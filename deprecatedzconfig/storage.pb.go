// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage.proto

/*
	Package deprecatedzconfig is a generated protocol buffer package.

	It is generated from these files:
		storage.proto
		vm.proto
		devconfig.proto
		appconfig.proto
		network.proto

	It has these top-level messages:
		SignatureInfo
		StorageConfig
		VmConfig
		EdgeDevConfig
		AppInstanceConfig
		ACEMatch
		ACEAction
		ACE
		NameToEid
		AdditionInfoDevice
		OverlayNetwork
		EIDAllocation
		EIDConfigDetails
		EIDOverlayConfig
		UnderlayNetwork
*/
package deprecatedzconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SignatureInfo struct {
	Intermediatecertspem []byte `protobuf:"bytes,1,opt,name=intermediatecertspem,proto3" json:"intermediatecertspem,omitempty"`
	Signercertpem        []byte `protobuf:"bytes,2,opt,name=signercertpem,proto3" json:"signercertpem,omitempty"`
	Signature            []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignatureInfo) Reset()                    { *m = SignatureInfo{} }
func (m *SignatureInfo) String() string            { return proto.CompactTextString(m) }
func (*SignatureInfo) ProtoMessage()               {}
func (*SignatureInfo) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{0} }

func (m *SignatureInfo) GetIntermediatecertspem() []byte {
	if m != nil {
		return m.Intermediatecertspem
	}
	return nil
}

func (m *SignatureInfo) GetSignercertpem() []byte {
	if m != nil {
		return m.Signercertpem
	}
	return nil
}

func (m *SignatureInfo) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type StorageConfig struct {
	Downloadurl string         `protobuf:"bytes,1,opt,name=downloadurl,proto3" json:"downloadurl,omitempty"`
	Maxsize     uint32         `protobuf:"varint,2,opt,name=maxsize,proto3" json:"maxsize,omitempty"`
	Siginfo     *SignatureInfo `protobuf:"bytes,3,opt,name=siginfo" json:"siginfo,omitempty"`
	Imagesha256 string         `protobuf:"bytes,4,opt,name=imagesha256,proto3" json:"imagesha256,omitempty"`
	Readonly    bool           `protobuf:"varint,5,opt,name=readonly,proto3" json:"readonly,omitempty"`
	Preserve    bool           `protobuf:"varint,6,opt,name=preserve,proto3" json:"preserve,omitempty"`
	Format      string         `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
	Devtype     string         `protobuf:"bytes,8,opt,name=devtype,proto3" json:"devtype,omitempty"`
	Target      string         `protobuf:"bytes,9,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *StorageConfig) Reset()                    { *m = StorageConfig{} }
func (m *StorageConfig) String() string            { return proto.CompactTextString(m) }
func (*StorageConfig) ProtoMessage()               {}
func (*StorageConfig) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{1} }

func (m *StorageConfig) GetDownloadurl() string {
	if m != nil {
		return m.Downloadurl
	}
	return ""
}

func (m *StorageConfig) GetMaxsize() uint32 {
	if m != nil {
		return m.Maxsize
	}
	return 0
}

func (m *StorageConfig) GetSiginfo() *SignatureInfo {
	if m != nil {
		return m.Siginfo
	}
	return nil
}

func (m *StorageConfig) GetImagesha256() string {
	if m != nil {
		return m.Imagesha256
	}
	return ""
}

func (m *StorageConfig) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

func (m *StorageConfig) GetPreserve() bool {
	if m != nil {
		return m.Preserve
	}
	return false
}

func (m *StorageConfig) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *StorageConfig) GetDevtype() string {
	if m != nil {
		return m.Devtype
	}
	return ""
}

func (m *StorageConfig) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func init() {
	proto.RegisterType((*SignatureInfo)(nil), "SignatureInfo")
	proto.RegisterType((*StorageConfig)(nil), "StorageConfig")
}
func (m *SignatureInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Intermediatecertspem) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Intermediatecertspem)))
		i += copy(dAtA[i:], m.Intermediatecertspem)
	}
	if len(m.Signercertpem) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Signercertpem)))
		i += copy(dAtA[i:], m.Signercertpem)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *StorageConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Downloadurl) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Downloadurl)))
		i += copy(dAtA[i:], m.Downloadurl)
	}
	if m.Maxsize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Maxsize))
	}
	if m.Siginfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.Siginfo.Size()))
		n1, err := m.Siginfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Imagesha256) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Imagesha256)))
		i += copy(dAtA[i:], m.Imagesha256)
	}
	if m.Readonly {
		dAtA[i] = 0x28
		i++
		if m.Readonly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Preserve {
		dAtA[i] = 0x30
		i++
		if m.Preserve {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Format) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Format)))
		i += copy(dAtA[i:], m.Format)
	}
	if len(m.Devtype) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Devtype)))
		i += copy(dAtA[i:], m.Devtype)
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignatureInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Intermediatecertspem)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Signercertpem)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *StorageConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Downloadurl)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Maxsize != 0 {
		n += 1 + sovStorage(uint64(m.Maxsize))
	}
	if m.Siginfo != nil {
		l = m.Siginfo.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Imagesha256)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Readonly {
		n += 2
	}
	if m.Preserve {
		n += 2
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Devtype)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func sovStorage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignatureInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignatureInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignatureInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intermediatecertspem", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intermediatecertspem = append(m.Intermediatecertspem[:0], dAtA[iNdEx:postIndex]...)
			if m.Intermediatecertspem == nil {
				m.Intermediatecertspem = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signercertpem", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signercertpem = append(m.Signercertpem[:0], dAtA[iNdEx:postIndex]...)
			if m.Signercertpem == nil {
				m.Signercertpem = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downloadurl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Downloadurl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxsize", wireType)
			}
			m.Maxsize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxsize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Siginfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Siginfo == nil {
				m.Siginfo = &SignatureInfo{}
			}
			if err := m.Siginfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imagesha256", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imagesha256 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Readonly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Readonly = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preserve", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Preserve = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStorage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStorage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStorage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("storage.proto", fileDescriptorStorage) }

var fileDescriptorStorage = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x3d, 0x4e, 0xc3, 0x30,
	0x14, 0xc7, 0x49, 0x81, 0x7e, 0xb8, 0x84, 0xc1, 0x42, 0xc8, 0x42, 0x28, 0x54, 0x15, 0x12, 0x9d,
	0x52, 0xa9, 0x08, 0x0e, 0x00, 0x13, 0x6b, 0xba, 0x75, 0x73, 0xe3, 0x17, 0xd7, 0x52, 0x62, 0x47,
	0xb6, 0x53, 0x68, 0x2f, 0xc0, 0x15, 0xe0, 0x46, 0x8c, 0x1c, 0x01, 0x95, 0x8b, 0x20, 0x3b, 0x0d,
	0xb4, 0x12, 0xe3, 0xff, 0xe3, 0xf9, 0xf7, 0x6c, 0xa3, 0xd0, 0x58, 0xa5, 0x29, 0x87, 0xb8, 0xd4,
	0xca, 0xaa, 0xe1, 0x6b, 0x80, 0xc2, 0xa9, 0xe0, 0x92, 0xda, 0x4a, 0xc3, 0x93, 0xcc, 0x14, 0x9e,
	0xa0, 0x33, 0x21, 0x2d, 0xe8, 0x02, 0x98, 0xa0, 0x16, 0x52, 0xd0, 0xd6, 0x94, 0x50, 0x90, 0x60,
	0x10, 0x8c, 0x4e, 0x92, 0x7f, 0x33, 0x7c, 0x8d, 0x42, 0x23, 0xb8, 0x04, 0xed, 0x1c, 0x57, 0x6e,
	0xf9, 0xf2, 0xbe, 0x89, 0x2f, 0x51, 0xcf, 0x34, 0x28, 0x72, 0xe8, 0x1b, 0x7f, 0xc6, 0xf0, 0xbd,
	0x85, 0xc2, 0x69, 0xbd, 0xdb, 0xa3, 0x92, 0x99, 0xe0, 0x78, 0x80, 0xfa, 0x4c, 0x3d, 0xcb, 0x5c,
	0x51, 0x56, 0xe9, 0xdc, 0x2f, 0xd0, 0x4b, 0x76, 0x2d, 0x4c, 0x50, 0xa7, 0xa0, 0x2f, 0x46, 0xac,
	0xc1, 0x13, 0xc3, 0xa4, 0x91, 0x78, 0x84, 0x3a, 0x46, 0x70, 0x21, 0x33, 0xe5, 0x49, 0xfd, 0xc9,
	0x69, 0xbc, 0x77, 0xcd, 0xa4, 0x89, 0x1d, 0x45, 0x14, 0x94, 0x83, 0x59, 0xd0, 0xc9, 0xdd, 0x3d,
	0x39, 0xaa, 0x29, 0x3b, 0x16, 0xbe, 0x40, 0x5d, 0x0d, 0x94, 0x29, 0x99, 0xaf, 0xc8, 0xf1, 0x20,
	0x18, 0x75, 0x93, 0x5f, 0xed, 0xb2, 0x52, 0x83, 0x01, 0xbd, 0x04, 0xd2, 0xae, 0xb3, 0x46, 0xe3,
	0x73, 0xd4, 0xce, 0x94, 0x2e, 0xa8, 0x25, 0x1d, 0x7f, 0xe8, 0x56, 0xb9, 0xad, 0x19, 0x2c, 0xed,
	0xaa, 0x04, 0xd2, 0xf5, 0x41, 0x23, 0xdd, 0x84, 0xa5, 0x9a, 0x83, 0x25, 0xbd, 0x7a, 0xa2, 0x56,
	0x0f, 0xb3, 0x8f, 0x4d, 0x14, 0x7c, 0x6e, 0xa2, 0xe0, 0x6b, 0x13, 0x05, 0x6f, 0xdf, 0xd1, 0x01,
	0xba, 0x4a, 0x55, 0x11, 0xaf, 0x81, 0x01, 0xa3, 0x71, 0x9a, 0xab, 0x8a, 0xc5, 0x95, 0x83, 0x8a,
	0x74, 0xfb, 0xb1, 0xb3, 0x1b, 0x2e, 0xec, 0xa2, 0x9a, 0xc7, 0xa9, 0x2a, 0xc6, 0x75, 0x6f, 0x4c,
	0x4b, 0x31, 0x66, 0x50, 0x6a, 0x48, 0xa9, 0x05, 0xb6, 0x4e, 0xfd, 0x2b, 0xcf, 0xdb, 0xbe, 0x7f,
	0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x98, 0x18, 0xbd, 0x19, 0x02, 0x00, 0x00,
}
