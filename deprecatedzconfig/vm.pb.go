// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vm.proto

package deprecatedzconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VmConfig struct {
	Kernel     string   `protobuf:"bytes,1,opt,name=kernel,proto3" json:"kernel,omitempty"`
	Ramdisk    string   `protobuf:"bytes,2,opt,name=ramdisk,proto3" json:"ramdisk,omitempty"`
	Memory     uint32   `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	Maxmem     uint32   `protobuf:"varint,4,opt,name=maxmem,proto3" json:"maxmem,omitempty"`
	Vcpus      uint32   `protobuf:"varint,5,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	Maxcpus    uint32   `protobuf:"varint,6,opt,name=maxcpus,proto3" json:"maxcpus,omitempty"`
	Rootdev    string   `protobuf:"bytes,7,opt,name=rootdev,proto3" json:"rootdev,omitempty"`
	Extraargs  string   `protobuf:"bytes,8,opt,name=extraargs,proto3" json:"extraargs,omitempty"`
	Bootloader string   `protobuf:"bytes,9,opt,name=bootloader,proto3" json:"bootloader,omitempty"`
	Cpus       string   `protobuf:"bytes,10,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Devicetree string   `protobuf:"bytes,11,opt,name=devicetree,proto3" json:"devicetree,omitempty"`
	Dtdev      []string `protobuf:"bytes,12,rep,name=dtdev" json:"dtdev,omitempty"`
	Irqs       []uint32 `protobuf:"varint,13,rep,packed,name=irqs" json:"irqs,omitempty"`
	Iomem      []string `protobuf:"bytes,14,rep,name=iomem" json:"iomem,omitempty"`
}

func (m *VmConfig) Reset()                    { *m = VmConfig{} }
func (m *VmConfig) String() string            { return proto.CompactTextString(m) }
func (*VmConfig) ProtoMessage()               {}
func (*VmConfig) Descriptor() ([]byte, []int) { return fileDescriptorVm, []int{0} }

func (m *VmConfig) GetKernel() string {
	if m != nil {
		return m.Kernel
	}
	return ""
}

func (m *VmConfig) GetRamdisk() string {
	if m != nil {
		return m.Ramdisk
	}
	return ""
}

func (m *VmConfig) GetMemory() uint32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *VmConfig) GetMaxmem() uint32 {
	if m != nil {
		return m.Maxmem
	}
	return 0
}

func (m *VmConfig) GetVcpus() uint32 {
	if m != nil {
		return m.Vcpus
	}
	return 0
}

func (m *VmConfig) GetMaxcpus() uint32 {
	if m != nil {
		return m.Maxcpus
	}
	return 0
}

func (m *VmConfig) GetRootdev() string {
	if m != nil {
		return m.Rootdev
	}
	return ""
}

func (m *VmConfig) GetExtraargs() string {
	if m != nil {
		return m.Extraargs
	}
	return ""
}

func (m *VmConfig) GetBootloader() string {
	if m != nil {
		return m.Bootloader
	}
	return ""
}

func (m *VmConfig) GetCpus() string {
	if m != nil {
		return m.Cpus
	}
	return ""
}

func (m *VmConfig) GetDevicetree() string {
	if m != nil {
		return m.Devicetree
	}
	return ""
}

func (m *VmConfig) GetDtdev() []string {
	if m != nil {
		return m.Dtdev
	}
	return nil
}

func (m *VmConfig) GetIrqs() []uint32 {
	if m != nil {
		return m.Irqs
	}
	return nil
}

func (m *VmConfig) GetIomem() []string {
	if m != nil {
		return m.Iomem
	}
	return nil
}

func init() {
	proto.RegisterType((*VmConfig)(nil), "VmConfig")
}
func (m *VmConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VmConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kernel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVm(dAtA, i, uint64(len(m.Kernel)))
		i += copy(dAtA[i:], m.Kernel)
	}
	if len(m.Ramdisk) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVm(dAtA, i, uint64(len(m.Ramdisk)))
		i += copy(dAtA[i:], m.Ramdisk)
	}
	if m.Memory != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVm(dAtA, i, uint64(m.Memory))
	}
	if m.Maxmem != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVm(dAtA, i, uint64(m.Maxmem))
	}
	if m.Vcpus != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVm(dAtA, i, uint64(m.Vcpus))
	}
	if m.Maxcpus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVm(dAtA, i, uint64(m.Maxcpus))
	}
	if len(m.Rootdev) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVm(dAtA, i, uint64(len(m.Rootdev)))
		i += copy(dAtA[i:], m.Rootdev)
	}
	if len(m.Extraargs) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintVm(dAtA, i, uint64(len(m.Extraargs)))
		i += copy(dAtA[i:], m.Extraargs)
	}
	if len(m.Bootloader) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintVm(dAtA, i, uint64(len(m.Bootloader)))
		i += copy(dAtA[i:], m.Bootloader)
	}
	if len(m.Cpus) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintVm(dAtA, i, uint64(len(m.Cpus)))
		i += copy(dAtA[i:], m.Cpus)
	}
	if len(m.Devicetree) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintVm(dAtA, i, uint64(len(m.Devicetree)))
		i += copy(dAtA[i:], m.Devicetree)
	}
	if len(m.Dtdev) > 0 {
		for _, s := range m.Dtdev {
			dAtA[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Irqs) > 0 {
		dAtA2 := make([]byte, len(m.Irqs)*10)
		var j1 int
		for _, num := range m.Irqs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x6a
		i++
		i = encodeVarintVm(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Iomem) > 0 {
		for _, s := range m.Iomem {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintVm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VmConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Kernel)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Ramdisk)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if m.Memory != 0 {
		n += 1 + sovVm(uint64(m.Memory))
	}
	if m.Maxmem != 0 {
		n += 1 + sovVm(uint64(m.Maxmem))
	}
	if m.Vcpus != 0 {
		n += 1 + sovVm(uint64(m.Vcpus))
	}
	if m.Maxcpus != 0 {
		n += 1 + sovVm(uint64(m.Maxcpus))
	}
	l = len(m.Rootdev)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Extraargs)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Bootloader)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Cpus)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	l = len(m.Devicetree)
	if l > 0 {
		n += 1 + l + sovVm(uint64(l))
	}
	if len(m.Dtdev) > 0 {
		for _, s := range m.Dtdev {
			l = len(s)
			n += 1 + l + sovVm(uint64(l))
		}
	}
	if len(m.Irqs) > 0 {
		l = 0
		for _, e := range m.Irqs {
			l += sovVm(uint64(e))
		}
		n += 1 + sovVm(uint64(l)) + l
	}
	if len(m.Iomem) > 0 {
		for _, s := range m.Iomem {
			l = len(s)
			n += 1 + l + sovVm(uint64(l))
		}
	}
	return n
}

func sovVm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVm(x uint64) (n int) {
	return sovVm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VmConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VmConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VmConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kernel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kernel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ramdisk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ramdisk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxmem", wireType)
			}
			m.Maxmem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxmem |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vcpus", wireType)
			}
			m.Vcpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vcpus |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maxcpus", wireType)
			}
			m.Maxcpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Maxcpus |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rootdev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rootdev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extraargs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extraargs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootloader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bootloader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cpus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Devicetree", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Devicetree = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtdev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtdev = append(m.Dtdev, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Irqs = append(m.Irqs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVm
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Irqs = append(m.Irqs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Irqs", wireType)
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iomem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iomem = append(m.Iomem, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("vm.proto", fileDescriptorVm) }

var fileDescriptorVm = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x3f, 0x52, 0xeb, 0x30,
	0x10, 0x87, 0x9f, 0xf3, 0xdf, 0x7a, 0x2f, 0xaf, 0xd0, 0x30, 0x8c, 0x0a, 0xc6, 0x78, 0x68, 0x70,
	0xe5, 0x14, 0xdc, 0x00, 0x6e, 0xe0, 0x82, 0x22, 0x9d, 0x22, 0x2d, 0x41, 0x93, 0x28, 0x6b, 0x64,
	0xd9, 0x13, 0x72, 0x12, 0x8e, 0x44, 0xc9, 0x11, 0x98, 0xd0, 0x70, 0x0c, 0x46, 0x2b, 0x67, 0x42,
	0xa7, 0xef, 0xdb, 0x5d, 0xfd, 0xa4, 0x59, 0x36, 0xeb, 0x6c, 0x59, 0x3b, 0xf4, 0x78, 0xf3, 0x3d,
	0x60, 0xb3, 0x47, 0xfb, 0x80, 0xbb, 0x27, 0xb3, 0xe6, 0x97, 0x6c, 0xb2, 0x01, 0xb7, 0x83, 0xad,
	0x48, 0xf2, 0xa4, 0x48, 0xab, 0x9e, 0xb8, 0x60, 0x53, 0x27, 0xad, 0x36, 0xcd, 0x46, 0x0c, 0xa8,
	0x70, 0xc2, 0x30, 0x61, 0xc1, 0xa2, 0x7b, 0x15, 0xc3, 0x3c, 0x29, 0xe6, 0x55, 0x4f, 0xe4, 0xe5,
	0xde, 0x82, 0x15, 0xa3, 0xde, 0x13, 0xf1, 0x0b, 0x36, 0xee, 0x54, 0xdd, 0x36, 0x62, 0x4c, 0x3a,
	0x42, 0xb8, 0xdf, 0xca, 0x3d, 0xf9, 0x09, 0xf9, 0x13, 0x52, 0x32, 0xa2, 0xd7, 0xd0, 0x89, 0x69,
	0x9f, 0x1c, 0x91, 0x5f, 0xb1, 0x14, 0xf6, 0xde, 0x49, 0xe9, 0xd6, 0x8d, 0x98, 0x51, 0xed, 0x2c,
	0x78, 0xc6, 0xd8, 0x0a, 0xd1, 0x6f, 0x51, 0x6a, 0x70, 0x22, 0xa5, 0xf2, 0x2f, 0xc3, 0x39, 0x1b,
	0x51, 0x1c, 0xa3, 0x0a, 0x9d, 0xc3, 0x8c, 0x86, 0xce, 0x28, 0xf0, 0x0e, 0x40, 0xfc, 0x8d, 0x33,
	0x67, 0x13, 0xde, 0xae, 0xe9, 0x25, 0xff, 0xf2, 0x61, 0x91, 0x56, 0x11, 0xc2, 0x4d, 0xc6, 0xbd,
	0x34, 0x62, 0x9e, 0x0f, 0x8b, 0x79, 0x45, 0xe7, 0xd0, 0x69, 0x30, 0x7c, 0xfe, 0x7f, 0xec, 0x24,
	0xb8, 0x5f, 0xbe, 0x1f, 0xb3, 0xe4, 0xe3, 0x98, 0x25, 0x9f, 0xc7, 0x2c, 0x79, 0xfb, 0xca, 0xfe,
	0xb0, 0x6b, 0x85, 0xb6, 0x3c, 0x80, 0x06, 0x2d, 0x4b, 0xb5, 0xc5, 0x56, 0x97, 0x6d, 0x03, 0x2e,
	0x04, 0xc6, 0xed, 0x2c, 0x6f, 0xd7, 0xc6, 0x3f, 0xb7, 0xab, 0x52, 0xa1, 0x5d, 0xc4, 0xbe, 0x85,
	0xac, 0xcd, 0x42, 0x43, 0xed, 0x40, 0x49, 0x0f, 0xfa, 0xa0, 0x68, 0x73, 0xab, 0x09, 0xf5, 0xdf,
	0xfd, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x12, 0x6d, 0xdc, 0xd9, 0x01, 0x00, 0x00,
}
