// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: devconfig.proto

package deprecatedzconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import devcommon "github.com/zededa/api/devcommon"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EdgeDevConfig struct {
	Id                 *devcommon.UUIDandVersion `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DevConfigSha256    []byte                    `protobuf:"bytes,2,opt,name=devConfigSha256,proto3" json:"devConfigSha256,omitempty"`
	DevConfigSignature []byte                    `protobuf:"bytes,3,opt,name=devConfigSignature,proto3" json:"devConfigSignature,omitempty"`
	Apps               []*AppInstanceConfig      `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
	Networks           []*UnderlayNetwork        `protobuf:"bytes,5,rep,name=networks" json:"networks,omitempty"`
}

func (m *EdgeDevConfig) Reset()                    { *m = EdgeDevConfig{} }
func (m *EdgeDevConfig) String() string            { return proto.CompactTextString(m) }
func (*EdgeDevConfig) ProtoMessage()               {}
func (*EdgeDevConfig) Descriptor() ([]byte, []int) { return fileDescriptorDevconfig, []int{0} }

func (m *EdgeDevConfig) GetId() *devcommon.UUIDandVersion {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EdgeDevConfig) GetDevConfigSha256() []byte {
	if m != nil {
		return m.DevConfigSha256
	}
	return nil
}

func (m *EdgeDevConfig) GetDevConfigSignature() []byte {
	if m != nil {
		return m.DevConfigSignature
	}
	return nil
}

func (m *EdgeDevConfig) GetApps() []*AppInstanceConfig {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *EdgeDevConfig) GetNetworks() []*UnderlayNetwork {
	if m != nil {
		return m.Networks
	}
	return nil
}

func init() {
	proto.RegisterType((*EdgeDevConfig)(nil), "EdgeDevConfig")
}
func (m *EdgeDevConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EdgeDevConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDevconfig(dAtA, i, uint64(m.Id.Size()))
		n1, err := m.Id.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.DevConfigSha256) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDevconfig(dAtA, i, uint64(len(m.DevConfigSha256)))
		i += copy(dAtA[i:], m.DevConfigSha256)
	}
	if len(m.DevConfigSignature) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDevconfig(dAtA, i, uint64(len(m.DevConfigSignature)))
		i += copy(dAtA[i:], m.DevConfigSignature)
	}
	if len(m.Apps) > 0 {
		for _, msg := range m.Apps {
			dAtA[i] = 0x22
			i++
			i = encodeVarintDevconfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Networks) > 0 {
		for _, msg := range m.Networks {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintDevconfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintDevconfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EdgeDevConfig) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovDevconfig(uint64(l))
	}
	l = len(m.DevConfigSha256)
	if l > 0 {
		n += 1 + l + sovDevconfig(uint64(l))
	}
	l = len(m.DevConfigSignature)
	if l > 0 {
		n += 1 + l + sovDevconfig(uint64(l))
	}
	if len(m.Apps) > 0 {
		for _, e := range m.Apps {
			l = e.Size()
			n += 1 + l + sovDevconfig(uint64(l))
		}
	}
	if len(m.Networks) > 0 {
		for _, e := range m.Networks {
			l = e.Size()
			n += 1 + l + sovDevconfig(uint64(l))
		}
	}
	return n
}

func sovDevconfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDevconfig(x uint64) (n int) {
	return sovDevconfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EdgeDevConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDevconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EdgeDevConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EdgeDevConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &devcommon.UUIDandVersion{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevConfigSha256", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevconfig
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevConfigSha256 = append(m.DevConfigSha256[:0], dAtA[iNdEx:postIndex]...)
			if m.DevConfigSha256 == nil {
				m.DevConfigSha256 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevConfigSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDevconfig
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevConfigSignature = append(m.DevConfigSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.DevConfigSignature == nil {
				m.DevConfigSignature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apps = append(m.Apps, &AppInstanceConfig{})
			if err := m.Apps[len(m.Apps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Networks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDevconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDevconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Networks = append(m.Networks, &UnderlayNetwork{})
			if err := m.Networks[len(m.Networks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDevconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDevconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDevconfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDevconfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDevconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDevconfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDevconfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDevconfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDevconfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDevconfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("devconfig.proto", fileDescriptorDevconfig) }

var fileDescriptorDevconfig = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd0, 0x31, 0x4e, 0xf3, 0x30,
	0x18, 0x06, 0xe0, 0xdf, 0x6d, 0x7f, 0x84, 0x5c, 0xaa, 0x22, 0x4f, 0x11, 0x43, 0x5a, 0x31, 0x40,
	0x06, 0xe4, 0x48, 0x45, 0xb0, 0x03, 0x65, 0xe8, 0xc2, 0x10, 0x14, 0x86, 0x6e, 0xae, 0xfd, 0x91,
	0x5a, 0x34, 0xb6, 0xe5, 0x38, 0x41, 0xf4, 0x24, 0x1c, 0x89, 0x91, 0x23, 0x54, 0xe1, 0x22, 0x48,
	0x76, 0x45, 0x05, 0x82, 0xcd, 0xfe, 0xde, 0xc7, 0x96, 0xfd, 0xe2, 0xa1, 0x80, 0x86, 0x6b, 0xf5,
	0x28, 0x0b, 0x6a, 0xac, 0x76, 0xfa, 0x28, 0x2d, 0xa4, 0x5b, 0xd6, 0x0b, 0xca, 0x75, 0x99, 0xae,
	0x41, 0x80, 0x60, 0x29, 0x33, 0x32, 0xf5, 0xac, 0x2c, 0xb5, 0xda, 0xad, 0xb6, 0x07, 0x86, 0xcc,
	0x98, 0x6f, 0x37, 0x0c, 0x14, 0xb8, 0x67, 0x6d, 0x9f, 0xc2, 0xf6, 0x78, 0x83, 0xf0, 0xe0, 0x56,
	0x14, 0x30, 0x85, 0xe6, 0xc6, 0x33, 0x32, 0xc2, 0x1d, 0x29, 0x22, 0x34, 0x46, 0x49, 0x7f, 0x32,
	0xa4, 0x79, 0x3e, 0x9b, 0x32, 0x25, 0x1e, 0xc0, 0x56, 0x52, 0xab, 0xac, 0x23, 0x05, 0x49, 0xfc,
	0xb3, 0x82, 0xbe, 0x5f, 0xb2, 0xc9, 0xc5, 0x65, 0xd4, 0x19, 0xa3, 0xe4, 0x20, 0xfb, 0x39, 0x26,
	0x14, 0x93, 0xdd, 0x48, 0x16, 0x8a, 0xb9, 0xda, 0x42, 0xd4, 0xf5, 0xf8, 0x97, 0x84, 0x9c, 0xe0,
	0x1e, 0x33, 0xa6, 0x8a, 0x7a, 0xe3, 0x6e, 0xd2, 0x9f, 0x10, 0x7a, 0x65, 0xcc, 0x4c, 0x55, 0x8e,
	0x29, 0x0e, 0x81, 0x66, 0x3e, 0x27, 0x67, 0x78, 0x7f, 0xfb, 0x8b, 0x2a, 0xfa, 0xef, 0xed, 0x21,
	0xcd, 0x95, 0x00, 0xbb, 0x62, 0x2f, 0x77, 0x21, 0xc8, 0xbe, 0xc4, 0xf5, 0xfc, 0xad, 0x8d, 0xd1,
	0x7b, 0x1b, 0xa3, 0x4d, 0x1b, 0xa3, 0xd7, 0x8f, 0xf8, 0x1f, 0x1e, 0x71, 0x5d, 0xd2, 0x50, 0x1f,
	0xe5, 0x2b, 0x5d, 0x0b, 0x5a, 0x57, 0x60, 0x1b, 0xc9, 0x21, 0xb4, 0x32, 0x3f, 0xfd, 0xab, 0x66,
	0x63, 0x81, 0x33, 0x07, 0x62, 0x1d, 0x3a, 0x5d, 0xec, 0x79, 0x7f, 0xfe, 0x19, 0x00, 0x00, 0xff,
	0xff, 0x74, 0x2e, 0x21, 0x0a, 0xa9, 0x01, 0x00, 0x00,
}
