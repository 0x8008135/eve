// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zmet.proto

/*
Package zmet is a generated protocol buffer package.

It is generated from these files:
	zmet.proto

It has these top-level messages:
	ZInfoManufacturer
	ZInfoNetwork
	ZInfoDNS
	ZinfoPeripheral
	ZInfoSW
	ZInfoDevice
	ZInfoStorage
	ZInfoHypervisor
	ZInfoApp
	ZInfoMsg
	ZioBundle
	CpuMetric
	MemoryMetric
	NetworkMetric
	ZedcloudMetric
	AppCpuMetric
	DevCpuMetric
	DeviceMetric
	DiskMetric
	AppMetric
	ZMetricMsg
*/
package zmet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// Broadly there are two types
// Info : information that is discovered/rarely changes
// Metrics: information that gets updated periodically
// Protobuf definitions in this file follow the convention.
type ZInfoTypes int32

const (
	ZInfoTypes_ZiNop        ZInfoTypes = 0
	ZInfoTypes_ZiDevice     ZInfoTypes = 1
	ZInfoTypes_ZiHypervisor ZInfoTypes = 2
	ZInfoTypes_ZiApp        ZInfoTypes = 3
)

var ZInfoTypes_name = map[int32]string{
	0: "ZiNop",
	1: "ZiDevice",
	2: "ZiHypervisor",
	3: "ZiApp",
}
var ZInfoTypes_value = map[string]int32{
	"ZiNop":        0,
	"ZiDevice":     1,
	"ZiHypervisor": 2,
	"ZiApp":        3,
}

func (x ZInfoTypes) String() string {
	return proto.EnumName(ZInfoTypes_name, int32(x))
}
func (ZInfoTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Deprecate since we can't determine it on the device
type ZPeripheralTypes int32

const (
	ZPeripheralTypes_ZpNone    ZPeripheralTypes = 0
	ZPeripheralTypes_ZpStorage ZPeripheralTypes = 1
	ZPeripheralTypes_ZpNetwork ZPeripheralTypes = 2
)

var ZPeripheralTypes_name = map[int32]string{
	0: "ZpNone",
	1: "ZpStorage",
	2: "ZpNetwork",
}
var ZPeripheralTypes_value = map[string]int32{
	"ZpNone":    0,
	"ZpStorage": 1,
	"ZpNetwork": 2,
}

func (x ZPeripheralTypes) String() string {
	return proto.EnumName(ZPeripheralTypes_name, int32(x))
}
func (ZPeripheralTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Enum names from OMA-TS-LWM2M_SwMgmt-V1_0-20151201-C
type ZSwState int32

const (
	ZSwState_INVALID          ZSwState = 0
	ZSwState_INITIAL          ZSwState = 1
	ZSwState_DOWNLOAD_STARTED ZSwState = 2
	ZSwState_DOWNLOADED       ZSwState = 3
	ZSwState_DELIVERED        ZSwState = 4
	ZSwState_INSTALLED        ZSwState = 5
)

var ZSwState_name = map[int32]string{
	0: "INVALID",
	1: "INITIAL",
	2: "DOWNLOAD_STARTED",
	3: "DOWNLOADED",
	4: "DELIVERED",
	5: "INSTALLED",
}
var ZSwState_value = map[string]int32{
	"INVALID":          0,
	"INITIAL":          1,
	"DOWNLOAD_STARTED": 2,
	"DOWNLOADED":       3,
	"DELIVERED":        4,
	"INSTALLED":        5,
}

func (x ZSwState) String() string {
	return proto.EnumName(ZSwState_name, int32(x))
}
func (ZSwState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// XXX duplicate of definition in appconfig.proto
// Types of I/O adapters that can be assigned to applications
type ZioType int32

const (
	ZioType_ZioNop   ZioType = 0
	ZioType_ZioEth   ZioType = 1
	ZioType_ZioUSB   ZioType = 2
	ZioType_ZioCOM   ZioType = 3
	ZioType_ZioOther ZioType = 255
)

var ZioType_name = map[int32]string{
	0:   "ZioNop",
	1:   "ZioEth",
	2:   "ZioUSB",
	3:   "ZioCOM",
	255: "ZioOther",
}
var ZioType_value = map[string]int32{
	"ZioNop":   0,
	"ZioEth":   1,
	"ZioUSB":   2,
	"ZioCOM":   3,
	"ZioOther": 255,
}

func (x ZioType) String() string {
	return proto.EnumName(ZioType_name, int32(x))
}
func (ZioType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ZmetricTypes int32

const (
	ZmetricTypes_ZmNop    ZmetricTypes = 0
	ZmetricTypes_ZmDevice ZmetricTypes = 1
	ZmetricTypes_ZmApp    ZmetricTypes = 3
)

var ZmetricTypes_name = map[int32]string{
	0: "ZmNop",
	1: "ZmDevice",
	3: "ZmApp",
}
var ZmetricTypes_value = map[string]int32{
	"ZmNop":    0,
	"ZmDevice": 1,
	"ZmApp":    3,
}

func (x ZmetricTypes) String() string {
	return proto.EnumName(ZmetricTypes_name, int32(x))
}
func (ZmetricTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// Manufacturing info, product name, model, version etc.
// From dmidecode/BIOS on Intel
type ZInfoManufacturer struct {
	Manufacturer    string `protobuf:"bytes,1,opt,name=manufacturer" json:"manufacturer,omitempty"`
	ProductName     string `protobuf:"bytes,2,opt,name=productName" json:"productName,omitempty"`
	Version         string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	SerialNumber    string `protobuf:"bytes,4,opt,name=serialNumber" json:"serialNumber,omitempty"`
	UUID            string `protobuf:"bytes,5,opt,name=UUID" json:"UUID,omitempty"`
	Compatible      string `protobuf:"bytes,6,opt,name=compatible" json:"compatible,omitempty"`
	BiosVendor      string `protobuf:"bytes,7,opt,name=biosVendor" json:"biosVendor,omitempty"`
	BiosVersion     string `protobuf:"bytes,8,opt,name=biosVersion" json:"biosVersion,omitempty"`
	BiosReleaseDate string `protobuf:"bytes,9,opt,name=biosReleaseDate" json:"biosReleaseDate,omitempty"`
}

func (m *ZInfoManufacturer) Reset()                    { *m = ZInfoManufacturer{} }
func (m *ZInfoManufacturer) String() string            { return proto.CompactTextString(m) }
func (*ZInfoManufacturer) ProtoMessage()               {}
func (*ZInfoManufacturer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ZInfoManufacturer) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *ZInfoManufacturer) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ZInfoManufacturer) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ZInfoManufacturer) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *ZInfoManufacturer) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *ZInfoManufacturer) GetCompatible() string {
	if m != nil {
		return m.Compatible
	}
	return ""
}

func (m *ZInfoManufacturer) GetBiosVendor() string {
	if m != nil {
		return m.BiosVendor
	}
	return ""
}

func (m *ZInfoManufacturer) GetBiosVersion() string {
	if m != nil {
		return m.BiosVersion
	}
	return ""
}

func (m *ZInfoManufacturer) GetBiosReleaseDate() string {
	if m != nil {
		return m.BiosReleaseDate
	}
	return ""
}

type ZInfoNetwork struct {
	IPAddr         string    `protobuf:"bytes,1,opt,name=IPAddr" json:"IPAddr,omitempty"`
	GwAddr         string    `protobuf:"bytes,2,opt,name=gwAddr" json:"gwAddr,omitempty"`
	MacAddr        string    `protobuf:"bytes,3,opt,name=macAddr" json:"macAddr,omitempty"`
	DevName        string    `protobuf:"bytes,4,opt,name=devName" json:"devName,omitempty"`
	IPAddrs        []string  `protobuf:"bytes,5,rep,name=IPAddrs" json:"IPAddrs,omitempty"`
	DefaultRouters []string  `protobuf:"bytes,6,rep,name=defaultRouters" json:"defaultRouters,omitempty"`
	Dns            *ZInfoDNS `protobuf:"bytes,7,opt,name=dns" json:"dns,omitempty"`
}

func (m *ZInfoNetwork) Reset()                    { *m = ZInfoNetwork{} }
func (m *ZInfoNetwork) String() string            { return proto.CompactTextString(m) }
func (*ZInfoNetwork) ProtoMessage()               {}
func (*ZInfoNetwork) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ZInfoNetwork) GetIPAddr() string {
	if m != nil {
		return m.IPAddr
	}
	return ""
}

func (m *ZInfoNetwork) GetGwAddr() string {
	if m != nil {
		return m.GwAddr
	}
	return ""
}

func (m *ZInfoNetwork) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *ZInfoNetwork) GetDevName() string {
	if m != nil {
		return m.DevName
	}
	return ""
}

func (m *ZInfoNetwork) GetIPAddrs() []string {
	if m != nil {
		return m.IPAddrs
	}
	return nil
}

func (m *ZInfoNetwork) GetDefaultRouters() []string {
	if m != nil {
		return m.DefaultRouters
	}
	return nil
}

func (m *ZInfoNetwork) GetDns() *ZInfoDNS {
	if m != nil {
		return m.Dns
	}
	return nil
}

// This is used both to represent the information we receive from DHCP
// for each interface, and the information the device is using
// (from /etc/resolv.conf). The latter could be different than what's received
// from DHCP on all the interfaces
type ZInfoDNS struct {
	DNSservers []string `protobuf:"bytes,1,rep,name=DNSservers" json:"DNSservers,omitempty"`
	DNSdomain  string   `protobuf:"bytes,2,opt,name=DNSdomain" json:"DNSdomain,omitempty"`
	DNSsearch  []string `protobuf:"bytes,3,rep,name=DNSsearch" json:"DNSsearch,omitempty"`
}

func (m *ZInfoDNS) Reset()                    { *m = ZInfoDNS{} }
func (m *ZInfoDNS) String() string            { return proto.CompactTextString(m) }
func (*ZInfoDNS) ProtoMessage()               {}
func (*ZInfoDNS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ZInfoDNS) GetDNSservers() []string {
	if m != nil {
		return m.DNSservers
	}
	return nil
}

func (m *ZInfoDNS) GetDNSdomain() string {
	if m != nil {
		return m.DNSdomain
	}
	return ""
}

func (m *ZInfoDNS) GetDNSsearch() []string {
	if m != nil {
		return m.DNSsearch
	}
	return nil
}

// Deprecate since we can't determine it on the device
type ZinfoPeripheral struct {
	Ztype     ZPeripheralTypes   `protobuf:"varint,1,opt,name=ztype,enum=ZPeripheralTypes" json:"ztype,omitempty"`
	Pluggable bool               `protobuf:"varint,2,opt,name=pluggable" json:"pluggable,omitempty"`
	Minfo     *ZInfoManufacturer `protobuf:"bytes,3,opt,name=minfo" json:"minfo,omitempty"`
}

func (m *ZinfoPeripheral) Reset()                    { *m = ZinfoPeripheral{} }
func (m *ZinfoPeripheral) String() string            { return proto.CompactTextString(m) }
func (*ZinfoPeripheral) ProtoMessage()               {}
func (*ZinfoPeripheral) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ZinfoPeripheral) GetZtype() ZPeripheralTypes {
	if m != nil {
		return m.Ztype
	}
	return ZPeripheralTypes_ZpNone
}

func (m *ZinfoPeripheral) GetPluggable() bool {
	if m != nil {
		return m.Pluggable
	}
	return false
}

func (m *ZinfoPeripheral) GetMinfo() *ZInfoManufacturer {
	if m != nil {
		return m.Minfo
	}
	return nil
}

type ZInfoSW struct {
	SwVersion string   `protobuf:"bytes,2,opt,name=swVersion" json:"swVersion,omitempty"`
	SwHash    string   `protobuf:"bytes,3,opt,name=swHash" json:"swHash,omitempty"`
	State     ZSwState `protobuf:"varint,4,opt,name=state,enum=ZSwState" json:"state,omitempty"`
	Activated bool     `protobuf:"varint,5,opt,name=activated" json:"activated,omitempty"`
	Target    string   `protobuf:"bytes,6,opt,name=target" json:"target,omitempty"`
	Vdev      string   `protobuf:"bytes,7,opt,name=vdev" json:"vdev,omitempty"`
}

func (m *ZInfoSW) Reset()                    { *m = ZInfoSW{} }
func (m *ZInfoSW) String() string            { return proto.CompactTextString(m) }
func (*ZInfoSW) ProtoMessage()               {}
func (*ZInfoSW) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ZInfoSW) GetSwVersion() string {
	if m != nil {
		return m.SwVersion
	}
	return ""
}

func (m *ZInfoSW) GetSwHash() string {
	if m != nil {
		return m.SwHash
	}
	return ""
}

func (m *ZInfoSW) GetState() ZSwState {
	if m != nil {
		return m.State
	}
	return ZSwState_INVALID
}

func (m *ZInfoSW) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *ZInfoSW) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *ZInfoSW) GetVdev() string {
	if m != nil {
		return m.Vdev
	}
	return ""
}

// Base device info, as discovered by Xen (or OS on bare metal)
type ZInfoDevice struct {
	MachineArch        string             `protobuf:"bytes,4,opt,name=machineArch" json:"machineArch,omitempty"`
	CpuArch            string             `protobuf:"bytes,5,opt,name=cpuArch" json:"cpuArch,omitempty"`
	Platform           string             `protobuf:"bytes,6,opt,name=platform" json:"platform,omitempty"`
	Ncpu               uint32             `protobuf:"varint,7,opt,name=ncpu" json:"ncpu,omitempty"`
	Memory             uint64             `protobuf:"varint,8,opt,name=memory" json:"memory,omitempty"`
	Storage            uint64             `protobuf:"varint,9,opt,name=storage" json:"storage,omitempty"`
	Devices            []*ZinfoPeripheral `protobuf:"bytes,10,rep,name=devices" json:"devices,omitempty"`
	Minfo              *ZInfoManufacturer `protobuf:"bytes,11,opt,name=minfo" json:"minfo,omitempty"`
	Software           *ZInfoSW           `protobuf:"bytes,12,opt,name=software" json:"software,omitempty"`
	Network            []*ZInfoNetwork    `protobuf:"bytes,13,rep,name=network" json:"network,omitempty"`
	SoftwareList       []*ZInfoSW         `protobuf:"bytes,14,rep,name=softwareList" json:"softwareList,omitempty"`
	AssignableAdapters []*ZioBundle       `protobuf:"bytes,15,rep,name=assignableAdapters" json:"assignableAdapters,omitempty"`
	Dns                *ZInfoDNS          `protobuf:"bytes,16,opt,name=dns" json:"dns,omitempty"`
	StorageList        []*ZInfoStorage    `protobuf:"bytes,17,rep,name=storageList" json:"storageList,omitempty"`
}

func (m *ZInfoDevice) Reset()                    { *m = ZInfoDevice{} }
func (m *ZInfoDevice) String() string            { return proto.CompactTextString(m) }
func (*ZInfoDevice) ProtoMessage()               {}
func (*ZInfoDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ZInfoDevice) GetMachineArch() string {
	if m != nil {
		return m.MachineArch
	}
	return ""
}

func (m *ZInfoDevice) GetCpuArch() string {
	if m != nil {
		return m.CpuArch
	}
	return ""
}

func (m *ZInfoDevice) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ZInfoDevice) GetNcpu() uint32 {
	if m != nil {
		return m.Ncpu
	}
	return 0
}

func (m *ZInfoDevice) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ZInfoDevice) GetStorage() uint64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *ZInfoDevice) GetDevices() []*ZinfoPeripheral {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *ZInfoDevice) GetMinfo() *ZInfoManufacturer {
	if m != nil {
		return m.Minfo
	}
	return nil
}

func (m *ZInfoDevice) GetSoftware() *ZInfoSW {
	if m != nil {
		return m.Software
	}
	return nil
}

func (m *ZInfoDevice) GetNetwork() []*ZInfoNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *ZInfoDevice) GetSoftwareList() []*ZInfoSW {
	if m != nil {
		return m.SoftwareList
	}
	return nil
}

func (m *ZInfoDevice) GetAssignableAdapters() []*ZioBundle {
	if m != nil {
		return m.AssignableAdapters
	}
	return nil
}

func (m *ZInfoDevice) GetDns() *ZInfoDNS {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *ZInfoDevice) GetStorageList() []*ZInfoStorage {
	if m != nil {
		return m.StorageList
	}
	return nil
}

// Per filesystem/partition information
type ZInfoStorage struct {
	Device    string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	MountPath string `protobuf:"bytes,2,opt,name=mountPath" json:"mountPath,omitempty"`
	Total     uint64 `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
}

func (m *ZInfoStorage) Reset()                    { *m = ZInfoStorage{} }
func (m *ZInfoStorage) String() string            { return proto.CompactTextString(m) }
func (*ZInfoStorage) ProtoMessage()               {}
func (*ZInfoStorage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ZInfoStorage) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ZInfoStorage) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *ZInfoStorage) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Device info from DOM0 perspective, if it exists.
// The following is deprecated.
type ZInfoHypervisor struct {
	Ncpu     uint32   `protobuf:"varint,3,opt,name=ncpu" json:"ncpu,omitempty"`
	Memory   uint64   `protobuf:"varint,4,opt,name=memory" json:"memory,omitempty"`
	Storage  uint64   `protobuf:"varint,5,opt,name=storage" json:"storage,omitempty"`
	Software *ZInfoSW `protobuf:"bytes,6,opt,name=software" json:"software,omitempty"`
}

func (m *ZInfoHypervisor) Reset()                    { *m = ZInfoHypervisor{} }
func (m *ZInfoHypervisor) String() string            { return proto.CompactTextString(m) }
func (*ZInfoHypervisor) ProtoMessage()               {}
func (*ZInfoHypervisor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ZInfoHypervisor) GetNcpu() uint32 {
	if m != nil {
		return m.Ncpu
	}
	return 0
}

func (m *ZInfoHypervisor) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ZInfoHypervisor) GetStorage() uint64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *ZInfoHypervisor) GetSoftware() *ZInfoSW {
	if m != nil {
		return m.Software
	}
	return nil
}

type ZInfoApp struct {
	AppID        string                     `protobuf:"bytes,1,opt,name=AppID" json:"AppID,omitempty"`
	Ncpu         uint32                     `protobuf:"varint,2,opt,name=ncpu" json:"ncpu,omitempty"`
	Memory       uint32                     `protobuf:"varint,3,opt,name=memory" json:"memory,omitempty"`
	Storage      uint32                     `protobuf:"varint,4,opt,name=storage" json:"storage,omitempty"`
	Software     *ZInfoSW                   `protobuf:"bytes,5,opt,name=software" json:"software,omitempty"`
	SystemApp    bool                       `protobuf:"varint,6,opt,name=systemApp" json:"systemApp,omitempty"`
	AppName      string                     `protobuf:"bytes,7,opt,name=AppName" json:"AppName,omitempty"`
	SoftwareList []*ZInfoSW                 `protobuf:"bytes,8,rep,name=softwareList" json:"softwareList,omitempty"`
	Activated    bool                       `protobuf:"varint,9,opt,name=activated" json:"activated,omitempty"`
	Error        string                     `protobuf:"bytes,10,opt,name=error" json:"error,omitempty"`
	ErrorTime    *google_protobuf.Timestamp `protobuf:"bytes,11,opt,name=errorTime" json:"errorTime,omitempty"`
}

func (m *ZInfoApp) Reset()                    { *m = ZInfoApp{} }
func (m *ZInfoApp) String() string            { return proto.CompactTextString(m) }
func (*ZInfoApp) ProtoMessage()               {}
func (*ZInfoApp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ZInfoApp) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *ZInfoApp) GetNcpu() uint32 {
	if m != nil {
		return m.Ncpu
	}
	return 0
}

func (m *ZInfoApp) GetMemory() uint32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ZInfoApp) GetStorage() uint32 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *ZInfoApp) GetSoftware() *ZInfoSW {
	if m != nil {
		return m.Software
	}
	return nil
}

func (m *ZInfoApp) GetSystemApp() bool {
	if m != nil {
		return m.SystemApp
	}
	return false
}

func (m *ZInfoApp) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ZInfoApp) GetSoftwareList() []*ZInfoSW {
	if m != nil {
		return m.SoftwareList
	}
	return nil
}

func (m *ZInfoApp) GetActivated() bool {
	if m != nil {
		return m.Activated
	}
	return false
}

func (m *ZInfoApp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ZInfoApp) GetErrorTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.ErrorTime
	}
	return nil
}

type ZInfoMsg struct {
	Ztype ZInfoTypes `protobuf:"varint,1,opt,name=ztype,enum=ZInfoTypes" json:"ztype,omitempty"`
	DevId string     `protobuf:"bytes,2,opt,name=devId" json:"devId,omitempty"`
	// Types that are valid to be assigned to InfoContent:
	//	*ZInfoMsg_Dinfo
	//	*ZInfoMsg_Hinfo
	//	*ZInfoMsg_Ainfo
	InfoContent isZInfoMsg_InfoContent     `protobuf_oneof:"InfoContent"`
	AtTimeStamp *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=atTimeStamp" json:"atTimeStamp,omitempty"`
}

func (m *ZInfoMsg) Reset()                    { *m = ZInfoMsg{} }
func (m *ZInfoMsg) String() string            { return proto.CompactTextString(m) }
func (*ZInfoMsg) ProtoMessage()               {}
func (*ZInfoMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isZInfoMsg_InfoContent interface {
	isZInfoMsg_InfoContent()
}

type ZInfoMsg_Dinfo struct {
	Dinfo *ZInfoDevice `protobuf:"bytes,3,opt,name=dinfo,oneof"`
}
type ZInfoMsg_Hinfo struct {
	Hinfo *ZInfoHypervisor `protobuf:"bytes,4,opt,name=hinfo,oneof"`
}
type ZInfoMsg_Ainfo struct {
	Ainfo *ZInfoApp `protobuf:"bytes,5,opt,name=ainfo,oneof"`
}

func (*ZInfoMsg_Dinfo) isZInfoMsg_InfoContent() {}
func (*ZInfoMsg_Hinfo) isZInfoMsg_InfoContent() {}
func (*ZInfoMsg_Ainfo) isZInfoMsg_InfoContent() {}

func (m *ZInfoMsg) GetInfoContent() isZInfoMsg_InfoContent {
	if m != nil {
		return m.InfoContent
	}
	return nil
}

func (m *ZInfoMsg) GetZtype() ZInfoTypes {
	if m != nil {
		return m.Ztype
	}
	return ZInfoTypes_ZiNop
}

func (m *ZInfoMsg) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *ZInfoMsg) GetDinfo() *ZInfoDevice {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Dinfo); ok {
		return x.Dinfo
	}
	return nil
}

func (m *ZInfoMsg) GetHinfo() *ZInfoHypervisor {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Hinfo); ok {
		return x.Hinfo
	}
	return nil
}

func (m *ZInfoMsg) GetAinfo() *ZInfoApp {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Ainfo); ok {
		return x.Ainfo
	}
	return nil
}

func (m *ZInfoMsg) GetAtTimeStamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.AtTimeStamp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ZInfoMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ZInfoMsg_OneofMarshaler, _ZInfoMsg_OneofUnmarshaler, _ZInfoMsg_OneofSizer, []interface{}{
		(*ZInfoMsg_Dinfo)(nil),
		(*ZInfoMsg_Hinfo)(nil),
		(*ZInfoMsg_Ainfo)(nil),
	}
}

func _ZInfoMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ZInfoMsg)
	// InfoContent
	switch x := m.InfoContent.(type) {
	case *ZInfoMsg_Dinfo:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dinfo); err != nil {
			return err
		}
	case *ZInfoMsg_Hinfo:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hinfo); err != nil {
			return err
		}
	case *ZInfoMsg_Ainfo:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ainfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ZInfoMsg.InfoContent has unexpected type %T", x)
	}
	return nil
}

func _ZInfoMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ZInfoMsg)
	switch tag {
	case 3: // InfoContent.dinfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZInfoDevice)
		err := b.DecodeMessage(msg)
		m.InfoContent = &ZInfoMsg_Dinfo{msg}
		return true, err
	case 4: // InfoContent.hinfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZInfoHypervisor)
		err := b.DecodeMessage(msg)
		m.InfoContent = &ZInfoMsg_Hinfo{msg}
		return true, err
	case 5: // InfoContent.ainfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZInfoApp)
		err := b.DecodeMessage(msg)
		m.InfoContent = &ZInfoMsg_Ainfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ZInfoMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ZInfoMsg)
	// InfoContent
	switch x := m.InfoContent.(type) {
	case *ZInfoMsg_Dinfo:
		s := proto.Size(x.Dinfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZInfoMsg_Hinfo:
		s := proto.Size(x.Hinfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZInfoMsg_Ainfo:
		s := proto.Size(x.Ainfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Information about assignable I/O adapter bundles
type ZioBundle struct {
	Type       ZioType  `protobuf:"varint,1,opt,name=type,enum=ZioType" json:"type,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Members    []string `protobuf:"bytes,3,rep,name=members" json:"members,omitempty"`
	UsedByUUID string   `protobuf:"bytes,4,opt,name=usedByUUID" json:"usedByUUID,omitempty"`
}

func (m *ZioBundle) Reset()                    { *m = ZioBundle{} }
func (m *ZioBundle) String() string            { return proto.CompactTextString(m) }
func (*ZioBundle) ProtoMessage()               {}
func (*ZioBundle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ZioBundle) GetType() ZioType {
	if m != nil {
		return m.Type
	}
	return ZioType_ZioNop
}

func (m *ZioBundle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZioBundle) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *ZioBundle) GetUsedByUUID() string {
	if m != nil {
		return m.UsedByUUID
	}
	return ""
}

type CpuMetric struct {
	UpTime         uint32  `protobuf:"varint,2,opt,name=upTime" json:"upTime,omitempty"`
	CpuUtilization float64 `protobuf:"fixed64,3,opt,name=cpuUtilization" json:"cpuUtilization,omitempty"`
	Usr            float64 `protobuf:"fixed64,4,opt,name=usr" json:"usr,omitempty"`
	Nice           float64 `protobuf:"fixed64,5,opt,name=nice" json:"nice,omitempty"`
	System         float64 `protobuf:"fixed64,6,opt,name=system" json:"system,omitempty"`
	Io             float64 `protobuf:"fixed64,7,opt,name=io" json:"io,omitempty"`
	Irq            float64 `protobuf:"fixed64,8,opt,name=irq" json:"irq,omitempty"`
	Soft           float64 `protobuf:"fixed64,9,opt,name=soft" json:"soft,omitempty"`
	Steal          float64 `protobuf:"fixed64,10,opt,name=steal" json:"steal,omitempty"`
	Guest          float64 `protobuf:"fixed64,11,opt,name=guest" json:"guest,omitempty"`
	Idle           float64 `protobuf:"fixed64,12,opt,name=idle" json:"idle,omitempty"`
}

func (m *CpuMetric) Reset()                    { *m = CpuMetric{} }
func (m *CpuMetric) String() string            { return proto.CompactTextString(m) }
func (*CpuMetric) ProtoMessage()               {}
func (*CpuMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CpuMetric) GetUpTime() uint32 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

func (m *CpuMetric) GetCpuUtilization() float64 {
	if m != nil {
		return m.CpuUtilization
	}
	return 0
}

func (m *CpuMetric) GetUsr() float64 {
	if m != nil {
		return m.Usr
	}
	return 0
}

func (m *CpuMetric) GetNice() float64 {
	if m != nil {
		return m.Nice
	}
	return 0
}

func (m *CpuMetric) GetSystem() float64 {
	if m != nil {
		return m.System
	}
	return 0
}

func (m *CpuMetric) GetIo() float64 {
	if m != nil {
		return m.Io
	}
	return 0
}

func (m *CpuMetric) GetIrq() float64 {
	if m != nil {
		return m.Irq
	}
	return 0
}

func (m *CpuMetric) GetSoft() float64 {
	if m != nil {
		return m.Soft
	}
	return 0
}

func (m *CpuMetric) GetSteal() float64 {
	if m != nil {
		return m.Steal
	}
	return 0
}

func (m *CpuMetric) GetGuest() float64 {
	if m != nil {
		return m.Guest
	}
	return 0
}

func (m *CpuMetric) GetIdle() float64 {
	if m != nil {
		return m.Idle
	}
	return 0
}

type MemoryMetric struct {
	UsedMem         uint32  `protobuf:"varint,2,opt,name=usedMem" json:"usedMem,omitempty"`
	AvailMem        uint32  `protobuf:"varint,3,opt,name=availMem" json:"availMem,omitempty"`
	UsedPercentage  float64 `protobuf:"fixed64,4,opt,name=usedPercentage" json:"usedPercentage,omitempty"`
	AvailPercentage float64 `protobuf:"fixed64,5,opt,name=availPercentage" json:"availPercentage,omitempty"`
}

func (m *MemoryMetric) Reset()                    { *m = MemoryMetric{} }
func (m *MemoryMetric) String() string            { return proto.CompactTextString(m) }
func (*MemoryMetric) ProtoMessage()               {}
func (*MemoryMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MemoryMetric) GetUsedMem() uint32 {
	if m != nil {
		return m.UsedMem
	}
	return 0
}

func (m *MemoryMetric) GetAvailMem() uint32 {
	if m != nil {
		return m.AvailMem
	}
	return 0
}

func (m *MemoryMetric) GetUsedPercentage() float64 {
	if m != nil {
		return m.UsedPercentage
	}
	return 0
}

func (m *MemoryMetric) GetAvailPercentage() float64 {
	if m != nil {
		return m.AvailPercentage
	}
	return 0
}

type NetworkMetric struct {
	IName    string `protobuf:"bytes,1,opt,name=iName" json:"iName,omitempty"`
	TxBytes  uint64 `protobuf:"varint,2,opt,name=txBytes" json:"txBytes,omitempty"`
	RxBytes  uint64 `protobuf:"varint,3,opt,name=rxBytes" json:"rxBytes,omitempty"`
	TxDrops  uint64 `protobuf:"varint,4,opt,name=txDrops" json:"txDrops,omitempty"`
	RxDrops  uint64 `protobuf:"varint,5,opt,name=rxDrops" json:"rxDrops,omitempty"`
	TxRate   uint64 `protobuf:"varint,6,opt,name=txRate" json:"txRate,omitempty"`
	RxRate   uint64 `protobuf:"varint,7,opt,name=rxRate" json:"rxRate,omitempty"`
	TxPkts   uint64 `protobuf:"varint,8,opt,name=txPkts" json:"txPkts,omitempty"`
	RxPkts   uint64 `protobuf:"varint,9,opt,name=rxPkts" json:"rxPkts,omitempty"`
	TxErrors uint64 `protobuf:"varint,10,opt,name=txErrors" json:"txErrors,omitempty"`
	RxErrors uint64 `protobuf:"varint,11,opt,name=rxErrors" json:"rxErrors,omitempty"`
}

func (m *NetworkMetric) Reset()                    { *m = NetworkMetric{} }
func (m *NetworkMetric) String() string            { return proto.CompactTextString(m) }
func (*NetworkMetric) ProtoMessage()               {}
func (*NetworkMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *NetworkMetric) GetIName() string {
	if m != nil {
		return m.IName
	}
	return ""
}

func (m *NetworkMetric) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *NetworkMetric) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *NetworkMetric) GetTxDrops() uint64 {
	if m != nil {
		return m.TxDrops
	}
	return 0
}

func (m *NetworkMetric) GetRxDrops() uint64 {
	if m != nil {
		return m.RxDrops
	}
	return 0
}

func (m *NetworkMetric) GetTxRate() uint64 {
	if m != nil {
		return m.TxRate
	}
	return 0
}

func (m *NetworkMetric) GetRxRate() uint64 {
	if m != nil {
		return m.RxRate
	}
	return 0
}

func (m *NetworkMetric) GetTxPkts() uint64 {
	if m != nil {
		return m.TxPkts
	}
	return 0
}

func (m *NetworkMetric) GetRxPkts() uint64 {
	if m != nil {
		return m.RxPkts
	}
	return 0
}

func (m *NetworkMetric) GetTxErrors() uint64 {
	if m != nil {
		return m.TxErrors
	}
	return 0
}

func (m *NetworkMetric) GetRxErrors() uint64 {
	if m != nil {
		return m.RxErrors
	}
	return 0
}

// Failures and successes for commuication to zedcloud
// for each uplink interface
type ZedcloudMetric struct {
	IfName      string                     `protobuf:"bytes,1,opt,name=ifName" json:"ifName,omitempty"`
	Failures    uint64                     `protobuf:"varint,2,opt,name=failures" json:"failures,omitempty"`
	Success     uint64                     `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	LastFailure *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=lastFailure" json:"lastFailure,omitempty"`
	LastSuccess *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=lastSuccess" json:"lastSuccess,omitempty"`
}

func (m *ZedcloudMetric) Reset()                    { *m = ZedcloudMetric{} }
func (m *ZedcloudMetric) String() string            { return proto.CompactTextString(m) }
func (*ZedcloudMetric) ProtoMessage()               {}
func (*ZedcloudMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ZedcloudMetric) GetIfName() string {
	if m != nil {
		return m.IfName
	}
	return ""
}

func (m *ZedcloudMetric) GetFailures() uint64 {
	if m != nil {
		return m.Failures
	}
	return 0
}

func (m *ZedcloudMetric) GetSuccess() uint64 {
	if m != nil {
		return m.Success
	}
	return 0
}

func (m *ZedcloudMetric) GetLastFailure() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastFailure
	}
	return nil
}

func (m *ZedcloudMetric) GetLastSuccess() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastSuccess
	}
	return nil
}

type AppCpuMetric struct {
	CpuTotal      uint32                     `protobuf:"varint,2,opt,name=cpuTotal" json:"cpuTotal,omitempty"`
	CpuPercentage float64                    `protobuf:"fixed64,3,opt,name=cpuPercentage" json:"cpuPercentage,omitempty"`
	UpTime        *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=upTime" json:"upTime,omitempty"`
	BootTime      *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=bootTime" json:"bootTime,omitempty"`
}

func (m *AppCpuMetric) Reset()                    { *m = AppCpuMetric{} }
func (m *AppCpuMetric) String() string            { return proto.CompactTextString(m) }
func (*AppCpuMetric) ProtoMessage()               {}
func (*AppCpuMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AppCpuMetric) GetCpuTotal() uint32 {
	if m != nil {
		return m.CpuTotal
	}
	return 0
}

func (m *AppCpuMetric) GetCpuPercentage() float64 {
	if m != nil {
		return m.CpuPercentage
	}
	return 0
}

func (m *AppCpuMetric) GetUpTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpTime
	}
	return nil
}

func (m *AppCpuMetric) GetBootTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.BootTime
	}
	return nil
}

// We report both upTime in seconds and bootTime. Allows to determine
// large clock skew. Difference betweem cpuTotal and upTime is the amount
// of idle.
type DevCpuMetric struct {
	CpuTotal uint64                     `protobuf:"varint,1,opt,name=cpuTotal" json:"cpuTotal,omitempty"`
	UpTime   uint64                     `protobuf:"varint,2,opt,name=upTime" json:"upTime,omitempty"`
	BootTime *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=bootTime" json:"bootTime,omitempty"`
}

func (m *DevCpuMetric) Reset()                    { *m = DevCpuMetric{} }
func (m *DevCpuMetric) String() string            { return proto.CompactTextString(m) }
func (*DevCpuMetric) ProtoMessage()               {}
func (*DevCpuMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DevCpuMetric) GetCpuTotal() uint64 {
	if m != nil {
		return m.CpuTotal
	}
	return 0
}

func (m *DevCpuMetric) GetUpTime() uint64 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

func (m *DevCpuMetric) GetBootTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.BootTime
	}
	return nil
}

type DeviceMetric struct {
	Cpu      *CpuMetric        `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory   *MemoryMetric     `protobuf:"bytes,2,opt,name=memory" json:"memory,omitempty"`
	Network  []*NetworkMetric  `protobuf:"bytes,3,rep,name=network" json:"network,omitempty"`
	Zedcloud []*ZedcloudMetric `protobuf:"bytes,4,rep,name=zedcloud" json:"zedcloud,omitempty"`
	Compute  *DevCpuMetric     `protobuf:"bytes,5,opt,name=compute" json:"compute,omitempty"`
	Disk     []*DiskMetric     `protobuf:"bytes,6,rep,name=disk" json:"disk,omitempty"`
}

func (m *DeviceMetric) Reset()                    { *m = DeviceMetric{} }
func (m *DeviceMetric) String() string            { return proto.CompactTextString(m) }
func (*DeviceMetric) ProtoMessage()               {}
func (*DeviceMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeviceMetric) GetCpu() *CpuMetric {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *DeviceMetric) GetMemory() *MemoryMetric {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *DeviceMetric) GetNetwork() []*NetworkMetric {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *DeviceMetric) GetZedcloud() []*ZedcloudMetric {
	if m != nil {
		return m.Zedcloud
	}
	return nil
}

func (m *DeviceMetric) GetCompute() *DevCpuMetric {
	if m != nil {
		return m.Compute
	}
	return nil
}

func (m *DeviceMetric) GetDisk() []*DiskMetric {
	if m != nil {
		return m.Disk
	}
	return nil
}

// For each partition; counts since boot
type DiskMetric struct {
	Disk       string `protobuf:"bytes,1,opt,name=disk" json:"disk,omitempty"`
	MountPath  string `protobuf:"bytes,2,opt,name=mountPath" json:"mountPath,omitempty"`
	ReadBytes  uint64 `protobuf:"varint,3,opt,name=readBytes" json:"readBytes,omitempty"`
	WriteBytes uint64 `protobuf:"varint,4,opt,name=writeBytes" json:"writeBytes,omitempty"`
	ReadCount  uint64 `protobuf:"varint,5,opt,name=readCount" json:"readCount,omitempty"`
	WriteCount uint64 `protobuf:"varint,6,opt,name=writeCount" json:"writeCount,omitempty"`
	Total      uint64 `protobuf:"varint,7,opt,name=total" json:"total,omitempty"`
	Used       uint64 `protobuf:"varint,8,opt,name=used" json:"used,omitempty"`
	Free       uint64 `protobuf:"varint,9,opt,name=free" json:"free,omitempty"`
}

func (m *DiskMetric) Reset()                    { *m = DiskMetric{} }
func (m *DiskMetric) String() string            { return proto.CompactTextString(m) }
func (*DiskMetric) ProtoMessage()               {}
func (*DiskMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DiskMetric) GetDisk() string {
	if m != nil {
		return m.Disk
	}
	return ""
}

func (m *DiskMetric) GetMountPath() string {
	if m != nil {
		return m.MountPath
	}
	return ""
}

func (m *DiskMetric) GetReadBytes() uint64 {
	if m != nil {
		return m.ReadBytes
	}
	return 0
}

func (m *DiskMetric) GetWriteBytes() uint64 {
	if m != nil {
		return m.WriteBytes
	}
	return 0
}

func (m *DiskMetric) GetReadCount() uint64 {
	if m != nil {
		return m.ReadCount
	}
	return 0
}

func (m *DiskMetric) GetWriteCount() uint64 {
	if m != nil {
		return m.WriteCount
	}
	return 0
}

func (m *DiskMetric) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *DiskMetric) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *DiskMetric) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

type AppMetric struct {
	AppID   string           `protobuf:"bytes,1,opt,name=AppID" json:"AppID,omitempty"`
	AppName string           `protobuf:"bytes,2,opt,name=AppName" json:"AppName,omitempty"`
	Cpu     *AppCpuMetric    `protobuf:"bytes,3,opt,name=cpu" json:"cpu,omitempty"`
	Memory  *MemoryMetric    `protobuf:"bytes,4,opt,name=memory" json:"memory,omitempty"`
	Network []*NetworkMetric `protobuf:"bytes,5,rep,name=network" json:"network,omitempty"`
}

func (m *AppMetric) Reset()                    { *m = AppMetric{} }
func (m *AppMetric) String() string            { return proto.CompactTextString(m) }
func (*AppMetric) ProtoMessage()               {}
func (*AppMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AppMetric) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *AppMetric) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *AppMetric) GetCpu() *AppCpuMetric {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *AppMetric) GetMemory() *MemoryMetric {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *AppMetric) GetNetwork() []*NetworkMetric {
	if m != nil {
		return m.Network
	}
	return nil
}

type ZMetricMsg struct {
	DevID       string                     `protobuf:"bytes,1,opt,name=devID" json:"devID,omitempty"`
	Ztype       ZmetricTypes               `protobuf:"varint,2,opt,name=ztype,enum=ZmetricTypes" json:"ztype,omitempty"`
	AtTimeStamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=atTimeStamp" json:"atTimeStamp,omitempty"`
	// Types that are valid to be assigned to MetricContent:
	//	*ZMetricMsg_Dm
	MetricContent isZMetricMsg_MetricContent `protobuf_oneof:"MetricContent"`
	Am            []*AppMetric               `protobuf:"bytes,5,rep,name=am" json:"am,omitempty"`
}

func (m *ZMetricMsg) Reset()                    { *m = ZMetricMsg{} }
func (m *ZMetricMsg) String() string            { return proto.CompactTextString(m) }
func (*ZMetricMsg) ProtoMessage()               {}
func (*ZMetricMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type isZMetricMsg_MetricContent interface {
	isZMetricMsg_MetricContent()
}

type ZMetricMsg_Dm struct {
	Dm *DeviceMetric `protobuf:"bytes,4,opt,name=dm,oneof"`
}

func (*ZMetricMsg_Dm) isZMetricMsg_MetricContent() {}

func (m *ZMetricMsg) GetMetricContent() isZMetricMsg_MetricContent {
	if m != nil {
		return m.MetricContent
	}
	return nil
}

func (m *ZMetricMsg) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *ZMetricMsg) GetZtype() ZmetricTypes {
	if m != nil {
		return m.Ztype
	}
	return ZmetricTypes_ZmNop
}

func (m *ZMetricMsg) GetAtTimeStamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.AtTimeStamp
	}
	return nil
}

func (m *ZMetricMsg) GetDm() *DeviceMetric {
	if x, ok := m.GetMetricContent().(*ZMetricMsg_Dm); ok {
		return x.Dm
	}
	return nil
}

func (m *ZMetricMsg) GetAm() []*AppMetric {
	if m != nil {
		return m.Am
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ZMetricMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ZMetricMsg_OneofMarshaler, _ZMetricMsg_OneofUnmarshaler, _ZMetricMsg_OneofSizer, []interface{}{
		(*ZMetricMsg_Dm)(nil),
	}
}

func _ZMetricMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ZMetricMsg)
	// MetricContent
	switch x := m.MetricContent.(type) {
	case *ZMetricMsg_Dm:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dm); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ZMetricMsg.MetricContent has unexpected type %T", x)
	}
	return nil
}

func _ZMetricMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ZMetricMsg)
	switch tag {
	case 4: // MetricContent.dm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceMetric)
		err := b.DecodeMessage(msg)
		m.MetricContent = &ZMetricMsg_Dm{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ZMetricMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ZMetricMsg)
	// MetricContent
	switch x := m.MetricContent.(type) {
	case *ZMetricMsg_Dm:
		s := proto.Size(x.Dm)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ZInfoManufacturer)(nil), "ZInfoManufacturer")
	proto.RegisterType((*ZInfoNetwork)(nil), "ZInfoNetwork")
	proto.RegisterType((*ZInfoDNS)(nil), "ZInfoDNS")
	proto.RegisterType((*ZinfoPeripheral)(nil), "ZinfoPeripheral")
	proto.RegisterType((*ZInfoSW)(nil), "ZInfoSW")
	proto.RegisterType((*ZInfoDevice)(nil), "ZInfoDevice")
	proto.RegisterType((*ZInfoStorage)(nil), "ZInfoStorage")
	proto.RegisterType((*ZInfoHypervisor)(nil), "ZInfoHypervisor")
	proto.RegisterType((*ZInfoApp)(nil), "ZInfoApp")
	proto.RegisterType((*ZInfoMsg)(nil), "ZInfoMsg")
	proto.RegisterType((*ZioBundle)(nil), "ZioBundle")
	proto.RegisterType((*CpuMetric)(nil), "cpuMetric")
	proto.RegisterType((*MemoryMetric)(nil), "memoryMetric")
	proto.RegisterType((*NetworkMetric)(nil), "networkMetric")
	proto.RegisterType((*ZedcloudMetric)(nil), "zedcloudMetric")
	proto.RegisterType((*AppCpuMetric)(nil), "appCpuMetric")
	proto.RegisterType((*DevCpuMetric)(nil), "devCpuMetric")
	proto.RegisterType((*DeviceMetric)(nil), "deviceMetric")
	proto.RegisterType((*DiskMetric)(nil), "diskMetric")
	proto.RegisterType((*AppMetric)(nil), "appMetric")
	proto.RegisterType((*ZMetricMsg)(nil), "ZMetricMsg")
	proto.RegisterEnum("ZInfoTypes", ZInfoTypes_name, ZInfoTypes_value)
	proto.RegisterEnum("ZPeripheralTypes", ZPeripheralTypes_name, ZPeripheralTypes_value)
	proto.RegisterEnum("ZSwState", ZSwState_name, ZSwState_value)
	proto.RegisterEnum("ZioType", ZioType_name, ZioType_value)
	proto.RegisterEnum("ZmetricTypes", ZmetricTypes_name, ZmetricTypes_value)
}

func init() { proto.RegisterFile("zmet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2019 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x4f, 0x6f, 0x23, 0x4b,
	0x11, 0xdf, 0xf1, 0x9f, 0xc4, 0x2e, 0xdb, 0xc9, 0xbc, 0xd6, 0x0a, 0x59, 0x61, 0x45, 0x96, 0x61,
	0xe1, 0xad, 0x02, 0x9a, 0x48, 0x41, 0x42, 0x08, 0x3d, 0x0e, 0xce, 0x3a, 0x68, 0x2d, 0x65, 0xbd,
	0x51, 0x3b, 0xbb, 0x4f, 0xf2, 0x05, 0x75, 0x66, 0xda, 0xce, 0x68, 0x3d, 0x9e, 0x61, 0xa6, 0x27,
	0xd9, 0x44, 0xe2, 0x02, 0x17, 0x3e, 0x01, 0xdf, 0x80, 0x0b, 0x12, 0x67, 0x2e, 0x7c, 0x09, 0xc4,
	0x8d, 0x13, 0x1f, 0x82, 0x03, 0xb7, 0x87, 0xaa, 0xba, 0x7b, 0x66, 0xec, 0x97, 0xfd, 0xf3, 0x6e,
	0xfd, 0xfb, 0x55, 0x75, 0x4f, 0x77, 0xf5, 0xaf, 0xaa, 0x6b, 0x00, 0xee, 0x63, 0xa9, 0xfc, 0x34,
	0x4b, 0x54, 0x72, 0x70, 0xb8, 0x4c, 0x92, 0xe5, 0x4a, 0x1e, 0x13, 0xba, 0x2a, 0x16, 0xc7, 0x2a,
	0x8a, 0x65, 0xae, 0x44, 0x9c, 0x6a, 0x07, 0xef, 0xef, 0x0d, 0xf8, 0x62, 0x3e, 0x59, 0x2f, 0x92,
	0x57, 0x62, 0x5d, 0x2c, 0x44, 0xa0, 0x8a, 0x4c, 0x66, 0xcc, 0x83, 0x7e, 0x5c, 0xc3, 0x43, 0xe7,
	0xa9, 0xf3, 0xbc, 0xcb, 0x37, 0x38, 0xf6, 0x14, 0x7a, 0x69, 0x96, 0x84, 0x45, 0xa0, 0xa6, 0x22,
	0x96, 0xc3, 0x06, 0xb9, 0xd4, 0x29, 0x36, 0x84, 0xdd, 0x1b, 0x99, 0xe5, 0x51, 0xb2, 0x1e, 0x36,
	0xc9, 0x6a, 0x21, 0xae, 0x9f, 0xcb, 0x2c, 0x12, 0xab, 0x69, 0x11, 0x5f, 0xc9, 0x6c, 0xd8, 0xd2,
	0xeb, 0xd7, 0x39, 0xc6, 0xa0, 0xf5, 0xe6, 0xcd, 0x64, 0x3c, 0x6c, 0x93, 0x8d, 0xc6, 0xec, 0x07,
	0x00, 0x41, 0x12, 0xa7, 0x42, 0x45, 0x57, 0x2b, 0x39, 0xdc, 0x21, 0x4b, 0x8d, 0x41, 0xfb, 0x55,
	0x94, 0xe4, 0x6f, 0xe5, 0x3a, 0x4c, 0xb2, 0xe1, 0xae, 0xb6, 0x57, 0x0c, 0xee, 0x59, 0x23, 0xbd,
	0xab, 0x8e, 0xde, 0x73, 0x8d, 0x62, 0xcf, 0x61, 0x1f, 0x21, 0x97, 0x2b, 0x29, 0x72, 0x39, 0x16,
	0x4a, 0x0e, 0xbb, 0xe4, 0xb5, 0x4d, 0x7b, 0xff, 0x74, 0xa0, 0x4f, 0x91, 0x9b, 0x4a, 0x75, 0x9b,
	0x64, 0xef, 0xd8, 0xf7, 0x60, 0x67, 0x72, 0x31, 0x0a, 0x43, 0x1b, 0x2e, 0x83, 0x90, 0x5f, 0xde,
	0x12, 0xaf, 0x63, 0x64, 0x10, 0x86, 0x27, 0x16, 0x01, 0x19, 0x4c, 0x78, 0x0c, 0x44, 0x4b, 0x28,
	0x6f, 0x28, 0xac, 0x3a, 0x32, 0x16, 0xa2, 0x45, 0xaf, 0x9a, 0x0f, 0xdb, 0x4f, 0x9b, 0x68, 0x31,
	0x90, 0xfd, 0x04, 0xf6, 0x42, 0xb9, 0x10, 0xc5, 0x4a, 0xf1, 0xa4, 0x50, 0x32, 0xcb, 0x87, 0x3b,
	0xe4, 0xb0, 0xc5, 0xb2, 0xef, 0x43, 0x33, 0x5c, 0xe7, 0x14, 0x9b, 0xde, 0x49, 0xd7, 0xa7, 0x13,
	0x8c, 0xa7, 0x33, 0x8e, 0xac, 0xb7, 0x80, 0x8e, 0x25, 0x30, 0x96, 0xe3, 0xe9, 0x2c, 0x97, 0x19,
	0x5e, 0xda, 0xd0, 0xa1, 0xc5, 0x6a, 0x0c, 0x7b, 0x02, 0xdd, 0xf1, 0x74, 0x16, 0x26, 0xb1, 0x88,
	0xd6, 0xe6, 0x64, 0x15, 0x61, 0xac, 0xb9, 0x14, 0x59, 0x70, 0x3d, 0x6c, 0xd2, 0xe4, 0x8a, 0xf0,
	0xfe, 0xe0, 0xc0, 0xfe, 0x3c, 0x5a, 0x2f, 0x92, 0x0b, 0x99, 0x45, 0xe9, 0xb5, 0xcc, 0xc4, 0x8a,
	0x7d, 0x09, 0xed, 0x7b, 0x75, 0x97, 0x4a, 0x8a, 0xde, 0xde, 0xc9, 0x17, 0xfe, 0xbc, 0x32, 0x5e,
	0xde, 0xa5, 0x32, 0xe7, 0xda, 0x8e, 0x4b, 0xa7, 0xab, 0x62, 0xb9, 0x14, 0xa8, 0x01, 0xfc, 0x70,
	0x87, 0x57, 0x04, 0x7b, 0x0e, 0xed, 0x18, 0x57, 0xa6, 0x98, 0xf6, 0x4e, 0x98, 0xff, 0x2d, 0x75,
	0x73, 0xed, 0xe0, 0xfd, 0xd5, 0x81, 0x5d, 0x32, 0xce, 0xbe, 0xc6, 0x35, 0xf3, 0x5b, 0x2b, 0x0b,
	0x73, 0x98, 0x92, 0xc0, 0x1b, 0xcc, 0x6f, 0x5f, 0x8a, 0xfc, 0xda, 0x5c, 0x94, 0x41, 0xec, 0x10,
	0xda, 0xb9, 0x42, 0x89, 0xb4, 0x68, 0xcb, 0x5d, 0x7f, 0x3e, 0xbb, 0x9d, 0x21, 0xc1, 0x35, 0x8f,
	0xcb, 0x8a, 0x40, 0x45, 0x37, 0x42, 0xc9, 0x90, 0x84, 0xdc, 0xe1, 0x15, 0x81, 0xcb, 0x2a, 0x91,
	0x2d, 0xa5, 0x32, 0x4a, 0x36, 0x08, 0x95, 0x7f, 0x13, 0xca, 0x1b, 0xa3, 0x5f, 0x1a, 0x7b, 0x7f,
	0x6a, 0x41, 0x4f, 0x5f, 0x8d, 0xbc, 0x89, 0x02, 0x89, 0x4a, 0x8e, 0x45, 0x70, 0x1d, 0xad, 0xe5,
	0x08, 0x23, 0xac, 0x65, 0x52, 0xa7, 0x50, 0x2a, 0x41, 0x5a, 0x90, 0x55, 0xa7, 0x90, 0x85, 0xec,
	0x00, 0x3a, 0xe9, 0x4a, 0xa8, 0x45, 0x92, 0xc5, 0xe6, 0xcb, 0x25, 0xc6, 0x6f, 0xaf, 0x83, 0xb4,
	0xa0, 0x6f, 0x0f, 0x38, 0x8d, 0x71, 0x9f, 0xb1, 0x8c, 0x93, 0xec, 0x8e, 0x12, 0xa6, 0xc5, 0x0d,
	0xc2, 0x2f, 0xe4, 0x2a, 0xc9, 0xc4, 0x52, 0xe7, 0x48, 0x8b, 0x5b, 0xc8, 0x8e, 0x48, 0xc0, 0x51,
	0x20, 0xf3, 0x21, 0x3c, 0x6d, 0x3e, 0xef, 0x9d, 0xb8, 0xfe, 0xd6, 0x75, 0x73, 0xeb, 0x50, 0x5d,
	0x58, 0xef, 0x13, 0x17, 0xc6, 0x9e, 0x41, 0x27, 0x4f, 0x16, 0xea, 0x56, 0x64, 0x72, 0xd8, 0x27,
	0xe7, 0x8e, 0x6f, 0x2e, 0x90, 0x97, 0x16, 0xf6, 0x25, 0xec, 0xae, 0x75, 0x46, 0x0e, 0x07, 0xf4,
	0xed, 0x81, 0x5f, 0x4f, 0x53, 0x6e, 0xad, 0xec, 0x67, 0xd0, 0xb7, 0x93, 0xce, 0xa3, 0x5c, 0x0d,
	0xf7, 0xc8, 0xbb, 0x5a, 0x72, 0xc3, 0xca, 0x7e, 0x05, 0x4c, 0xe4, 0x79, 0xb4, 0x5c, 0xa3, 0xca,
	0x46, 0xa1, 0x48, 0x29, 0xc7, 0xf6, 0x69, 0x0e, 0xf8, 0xf3, 0x28, 0x39, 0x2d, 0xd6, 0xe1, 0x4a,
	0xf2, 0x07, 0xbc, 0x6c, 0xce, 0xb9, 0x0f, 0xe5, 0x1c, 0x3b, 0x86, 0x9e, 0x09, 0x1b, 0xed, 0xe2,
	0x8b, 0xfa, 0x9e, 0x67, 0xda, 0xc0, 0xeb, 0x1e, 0xde, 0xdc, 0xd4, 0x1d, 0x63, 0xc4, 0xeb, 0xd1,
	0xb1, 0xb4, 0x75, 0x47, 0x23, 0x14, 0x5f, 0x9c, 0x14, 0x6b, 0x75, 0x21, 0xd4, 0xb5, 0xd5, 0x74,
	0x49, 0xb0, 0xc7, 0xd0, 0x56, 0x89, 0x12, 0x2b, 0x92, 0x74, 0x8b, 0x6b, 0xe0, 0xfd, 0x1e, 0xf6,
	0x69, 0xed, 0x97, 0x77, 0xa9, 0xcc, 0x6e, 0xa2, 0x3c, 0xc9, 0x4a, 0x45, 0x34, 0x1f, 0x54, 0x44,
	0xeb, 0x43, 0x8a, 0x68, 0x6f, 0x2a, 0xa2, 0x7e, 0x77, 0x3b, 0x1f, 0xba, 0x3b, 0xef, 0x3f, 0x0d,
	0x53, 0x80, 0x46, 0x69, 0x8a, 0x3b, 0x1c, 0xa5, 0xe9, 0x64, 0x6c, 0x8e, 0xa5, 0x41, 0xb9, 0x9d,
	0xc6, 0x83, 0xdb, 0xd1, 0x9b, 0x7c, 0x60, 0x3b, 0x2d, 0x32, 0x3c, 0xb8, 0x9d, 0xf6, 0x07, 0xa5,
	0x84, 0x55, 0xe1, 0x2e, 0x57, 0x32, 0x1e, 0xa5, 0x29, 0xed, 0xba, 0xc3, 0x2b, 0x02, 0x57, 0x1f,
	0xa5, 0x29, 0x55, 0x69, 0x9d, 0xa9, 0x16, 0x7e, 0x4b, 0x59, 0x9d, 0x8f, 0x2a, 0x6b, 0xa3, 0x48,
	0x74, 0xb7, 0x8b, 0xc4, 0x63, 0x68, 0xcb, 0x2c, 0x4b, 0xb2, 0x21, 0xe8, 0x28, 0x10, 0x60, 0xbf,
	0x84, 0x2e, 0x0d, 0x2e, 0xa3, 0x58, 0x9a, 0xc4, 0x39, 0xf0, 0xf5, 0x5b, 0xef, 0xdb, 0xb7, 0xde,
	0xbf, 0xb4, 0x6f, 0x3d, 0xaf, 0x9c, 0xbd, 0x3f, 0xda, 0x10, 0xbf, 0xca, 0x97, 0xec, 0x87, 0x9b,
	0x35, 0xb7, 0xa7, 0x77, 0xb8, 0x51, 0x6d, 0x1f, 0x43, 0x3b, 0x94, 0x37, 0x93, 0xd0, 0x28, 0x48,
	0x03, 0xf6, 0x0c, 0xda, 0x61, 0xad, 0xca, 0xf6, 0xfd, 0x5a, 0x6d, 0x7a, 0xf9, 0x88, 0x6b, 0x23,
	0xa6, 0xf6, 0x35, 0x79, 0xb5, 0xc8, 0xcb, 0xf5, 0xb7, 0xb4, 0x85, 0x9e, 0xe4, 0x80, 0x1b, 0x11,
	0xe4, 0xd9, 0xae, 0xe7, 0xc8, 0x28, 0x4d, 0xd1, 0x85, 0x2c, 0xec, 0x2b, 0xe8, 0x09, 0x85, 0x47,
	0x98, 0xe1, 0x91, 0x8c, 0x88, 0x3e, 0x76, 0xe8, 0xba, 0xfb, 0xe9, 0x00, 0x7a, 0xb8, 0xe2, 0x8b,
	0x64, 0xad, 0xe4, 0x5a, 0x79, 0xb7, 0xd0, 0x2d, 0x53, 0x96, 0x3d, 0x81, 0x56, 0x2d, 0x08, 0x1d,
	0x4c, 0x66, 0x0c, 0x01, 0x27, 0x96, 0x04, 0x57, 0x35, 0x38, 0x34, 0xa6, 0xa7, 0x5b, 0x62, 0x97,
	0x92, 0x9b, 0xb7, 0xcd, 0x42, 0x7c, 0x35, 0x8b, 0x5c, 0x86, 0xa7, 0x77, 0xd4, 0xbb, 0xe8, 0xb2,
	0x5c, 0x63, 0xbc, 0x6f, 0x1c, 0xe8, 0x06, 0x69, 0xf1, 0x4a, 0xaa, 0x2c, 0x0a, 0x50, 0xb8, 0x45,
	0x4a, 0x77, 0xa8, 0xe5, 0x6c, 0x10, 0x3e, 0xe6, 0x41, 0x5a, 0xbc, 0x51, 0xd1, 0x2a, 0xba, 0x17,
	0xca, 0x36, 0x50, 0x0e, 0xdf, 0x62, 0x99, 0x0b, 0xcd, 0x22, 0xd7, 0xed, 0x93, 0xc3, 0x71, 0x48,
	0xbb, 0xc5, 0x52, 0xd0, 0x26, 0x8a, 0xc6, 0xf4, 0x7c, 0x91, 0x6a, 0x29, 0x68, 0x0e, 0x37, 0x88,
	0xed, 0x41, 0x23, 0x4a, 0x48, 0xbb, 0x0e, 0x6f, 0x44, 0x09, 0xae, 0x16, 0x65, 0xbf, 0xa3, 0x22,
	0xef, 0x70, 0x1c, 0xe2, 0x6a, 0x28, 0x55, 0x52, 0xa5, 0xc3, 0x69, 0x8c, 0x82, 0xc8, 0x95, 0x14,
	0x2b, 0x12, 0xa4, 0xc3, 0x35, 0x40, 0x76, 0x59, 0xc8, 0x5c, 0x91, 0x18, 0x1d, 0xae, 0x01, 0xce,
	0x8f, 0xc2, 0x95, 0xae, 0xd6, 0x0e, 0xa7, 0xb1, 0xf7, 0x67, 0x07, 0xfa, 0x3a, 0x3f, 0x4d, 0x10,
	0x86, 0xb0, 0x8b, 0x01, 0x7a, 0x25, 0x63, 0x13, 0x05, 0x0b, 0xf1, 0xa1, 0x12, 0x37, 0x22, 0x5a,
	0xa1, 0x49, 0x67, 0x76, 0x89, 0x31, 0x44, 0xe8, 0x76, 0x21, 0xb3, 0x40, 0xae, 0x95, 0x4d, 0x71,
	0x87, 0x6f, 0xb1, 0xd8, 0xd0, 0xd1, 0x9c, 0x9a, 0xa3, 0x8e, 0xcd, 0x36, 0xed, 0xfd, 0xa5, 0x01,
	0x03, 0xf3, 0x36, 0x98, 0x9d, 0x3d, 0x86, 0x76, 0x44, 0xf9, 0x6d, 0x2a, 0x50, 0x64, 0x7b, 0x30,
	0xf5, 0xfe, 0xf4, 0x4e, 0xc9, 0x9c, 0xf6, 0xdb, 0xe2, 0x16, 0xa2, 0x25, 0x33, 0x16, 0x5d, 0x55,
	0x2d, 0xd4, 0x73, 0xc6, 0x59, 0x92, 0xe6, 0xa6, 0x62, 0x5a, 0xa8, 0xe7, 0x68, 0x4b, 0xdb, 0xce,
	0xd1, 0x16, 0x6c, 0x0f, 0xde, 0x73, 0x6c, 0x2f, 0x76, 0x74, 0x91, 0xd5, 0x08, 0xf9, 0x4c, 0xf3,
	0xbb, 0x9a, 0xcf, 0x4a, 0x5e, 0xbd, 0xbf, 0x78, 0xa7, 0x72, 0xfb, 0x4c, 0x6b, 0xa4, 0xfd, 0x89,
	0xef, 0x5a, 0x7f, 0xe2, 0x0f, 0xa0, 0xa3, 0xde, 0x9f, 0x61, 0x61, 0xc8, 0xe9, 0x2e, 0x5b, 0xbc,
	0xc4, 0x68, 0xcb, 0xac, 0xad, 0xa7, 0x6d, 0x16, 0x7b, 0xff, 0x76, 0x60, 0xef, 0x5e, 0x86, 0xc1,
	0x2a, 0x29, 0xc2, 0x4a, 0xc7, 0xd1, 0xa2, 0x16, 0x29, 0x83, 0x70, 0x99, 0x85, 0x88, 0x56, 0x45,
	0x56, 0xc6, 0xaa, 0xc4, 0x54, 0x9c, 0x8b, 0x20, 0x90, 0x79, 0x19, 0x2c, 0x03, 0x31, 0xd3, 0x57,
	0x22, 0x57, 0xbf, 0xd1, 0x9e, 0xa6, 0x78, 0x7c, 0x34, 0xd3, 0x6b, 0xee, 0x76, 0xf6, 0xcc, 0xac,
	0xdd, 0xfe, 0xbc, 0xd9, 0xc6, 0xdd, 0xfb, 0x87, 0x03, 0x7d, 0x91, 0xa6, 0x2f, 0xca, 0x14, 0x3d,
	0x80, 0x4e, 0x90, 0x16, 0x97, 0xf4, 0x54, 0x6a, 0x79, 0x96, 0x98, 0x3d, 0x83, 0x41, 0x90, 0x16,
	0x35, 0x65, 0xe9, 0x2c, 0xdd, 0x24, 0xd9, 0x49, 0x99, 0xe4, 0x9f, 0x3e, 0x89, 0x2d, 0x00, 0xbf,
	0x80, 0xce, 0x55, 0x92, 0x50, 0xfd, 0xfa, 0x8c, 0x13, 0x94, 0xbe, 0xde, 0x3d, 0xf4, 0x43, 0x79,
	0xf3, 0xf0, 0xee, 0x1d, 0x7d, 0x01, 0xe5, 0xee, 0x37, 0x8b, 0x4f, 0xeb, 0xc1, 0x6f, 0x37, 0xbf,
	0xc3, 0xb7, 0xff, 0xeb, 0xd0, 0xc7, 0xa3, 0x40, 0x9a, 0x8f, 0x3f, 0x81, 0x26, 0xbe, 0xd4, 0x0e,
	0xad, 0x01, 0x7e, 0x59, 0xf6, 0x38, 0xd2, 0xec, 0xc7, 0xe5, 0xa3, 0xdd, 0x20, 0x87, 0x81, 0x5f,
	0xaf, 0x0a, 0xe5, 0x1b, 0xfe, 0xbc, 0x6a, 0xe7, 0x9a, 0xf4, 0x8c, 0xee, 0xf9, 0x1b, 0x49, 0x5a,
	0xf5, 0x73, 0x3f, 0x85, 0x8e, 0x95, 0xe5, 0xb0, 0x45, 0xae, 0xfb, 0xfe, 0xa6, 0x4e, 0x79, 0xe9,
	0x80, 0x5d, 0x22, 0xfe, 0x37, 0x16, 0xca, 0xc6, 0x77, 0xe0, 0xd7, 0x03, 0xc7, 0xad, 0x95, 0x1d,
	0x42, 0x2b, 0x8c, 0xf2, 0x77, 0xf4, 0x37, 0xd5, 0x3b, 0xe9, 0xf9, 0x08, 0x8c, 0x0f, 0x19, 0xbc,
	0xff, 0x39, 0x00, 0x15, 0x89, 0x25, 0x8f, 0xfc, 0x75, 0x22, 0xd0, 0xf8, 0x13, 0x9d, 0xd8, 0x13,
	0xe8, 0x66, 0x52, 0x84, 0xf5, 0xba, 0x51, 0x11, 0xf8, 0xa0, 0xdc, 0x66, 0x91, 0x92, 0xda, 0xac,
	0x8b, 0x47, 0x8d, 0xb1, 0xb3, 0x5f, 0xe0, 0x72, 0xa6, 0x82, 0x54, 0x44, 0x39, 0x5b, 0x9b, 0x77,
	0x6a, 0xb3, 0xb5, 0xbd, 0xec, 0x02, 0x77, 0x6b, 0x5d, 0x20, 0x9e, 0x01, 0xab, 0xa8, 0xa9, 0x23,
	0x34, 0x46, 0x6e, 0x91, 0x49, 0xdb, 0xe9, 0xd3, 0xd8, 0xfb, 0x9b, 0x03, 0x5d, 0x91, 0xa6, 0x55,
	0xb5, 0x7c, 0xa0, 0x5f, 0xab, 0x75, 0x49, 0x8d, 0xcd, 0x2e, 0xe9, 0x50, 0xcb, 0xa3, 0x69, 0xc2,
	0x5f, 0xcf, 0xba, 0x6d, 0x85, 0xb4, 0x3e, 0x53, 0x21, 0xed, 0x8f, 0x2a, 0xc4, 0xfb, 0x97, 0x03,
	0x30, 0xd7, 0x24, 0x76, 0x3f, 0xa6, 0xb5, 0x29, 0x37, 0x4c, 0x80, 0xfd, 0xc8, 0xf6, 0x44, 0x0d,
	0x6a, 0x07, 0x06, 0xfe, 0x3c, 0xa6, 0x19, 0x1b, 0x5d, 0xd1, 0x56, 0x33, 0xd2, 0xfc, 0x4e, 0xcd,
	0x08, 0x3b, 0x84, 0x46, 0x18, 0x97, 0x87, 0xaa, 0xe7, 0xcc, 0xcb, 0x47, 0xbc, 0x11, 0xe2, 0xc3,
	0xd7, 0x10, 0xb1, 0x39, 0x0d, 0xf8, 0x65, 0x88, 0x79, 0x43, 0xc4, 0xa7, 0xfb, 0x30, 0xd0, 0xc8,
	0xf4, 0x32, 0x47, 0xa7, 0x00, 0x55, 0xdb, 0xc6, 0xba, 0xd0, 0x9e, 0x47, 0xd3, 0x24, 0x75, 0x1f,
	0xb1, 0x3e, 0x74, 0xe6, 0x91, 0xee, 0xc9, 0x5c, 0x87, 0xb9, 0xd0, 0x9f, 0x47, 0x55, 0xef, 0xe5,
	0x36, 0xb4, 0xeb, 0x28, 0x4d, 0xdd, 0xe6, 0xd1, 0x57, 0xe0, 0x6e, 0xff, 0x6e, 0x33, 0x80, 0x9d,
	0x79, 0x3a, 0x4d, 0xd6, 0xd2, 0x7d, 0xc4, 0x06, 0xd0, 0x9d, 0xa7, 0xe6, 0x87, 0xc3, 0x75, 0x34,
	0x34, 0x3f, 0x54, 0x6e, 0xe3, 0xe8, 0x1a, 0x3a, 0xf6, 0xcf, 0x97, 0xf5, 0x60, 0x77, 0x32, 0x7d,
	0x3b, 0x3a, 0x9f, 0x8c, 0xdd, 0x47, 0x1a, 0x4c, 0x2e, 0x27, 0xa3, 0x73, 0xd7, 0x61, 0x8f, 0xc1,
	0x1d, 0xbf, 0xfe, 0x7a, 0x7a, 0xfe, 0x7a, 0x34, 0xfe, 0xed, 0xec, 0x72, 0xc4, 0x2f, 0xcf, 0xc6,
	0x6e, 0x83, 0xed, 0x01, 0x58, 0xf6, 0x6c, 0xec, 0x36, 0x71, 0xe9, 0xf1, 0xd9, 0xf9, 0xe4, 0xed,
	0x19, 0x3f, 0x1b, 0xbb, 0x2d, 0x84, 0x93, 0xe9, 0xec, 0x72, 0x74, 0x7e, 0x7e, 0x36, 0x76, 0xdb,
	0x47, 0x2f, 0x61, 0xd7, 0x74, 0x67, 0xb4, 0xbd, 0x28, 0xd1, 0x27, 0xd5, 0xe3, 0x33, 0x75, 0xed,
	0x3a, 0x66, 0xfc, 0x66, 0x76, 0xea, 0x36, 0xcc, 0xf8, 0xc5, 0xeb, 0x57, 0xb4, 0x70, 0x67, 0x1e,
	0x25, 0xaf, 0xd5, 0xb5, 0xcc, 0xdc, 0x6f, 0x9c, 0xa3, 0x13, 0xe8, 0xd7, 0x2f, 0x96, 0x82, 0x11,
	0x57, 0x71, 0x8b, 0xcb, 0xb8, 0x91, 0x81, 0xa2, 0x74, 0xfa, 0x6b, 0x38, 0x0c, 0x92, 0x18, 0x8b,
	0x8a, 0x0c, 0x85, 0x4f, 0x85, 0xc4, 0x2f, 0x72, 0x0c, 0x68, 0x60, 0x2e, 0x7d, 0x7e, 0xb0, 0x8c,
	0xd4, 0x75, 0x71, 0xe5, 0x07, 0x49, 0x7c, 0xac, 0xfd, 0x8e, 0x45, 0x1a, 0x1d, 0xdf, 0xc7, 0x52,
	0x5d, 0xed, 0x90, 0xcb, 0xcf, 0xff, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x20, 0x55, 0xb5, 0xd9, 0xa1,
	0x13, 0x00, 0x00,
}
