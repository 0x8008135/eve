// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netconfig.proto

/*
Package zconfig is a generated protocol buffer package.

It is generated from these files:
	netconfig.proto
	service.proto
	fw.proto
	vm.proto
	devconfig.proto
	devcommon.proto
	storage.proto
	appconfig.proto
	netcmn.proto
	baseosconfig.proto

It has these top-level messages:
	NetworkConfig
	NetworkAdapter
	ServiceOpaqueConfig
	ServiceLispConfig
	ServiceInstanceConfig
	ACEMatch
	ACEAction
	ACE
	VmConfig
	MapServer
	ZedServer
	DeviceLispDetails
	DeviceOpsCmd
	SWAdapterParams
	SystemAdapter
	EdgeDevConfig
	ConfigItem
	ConfigRequest
	ConfigResponse
	UUIDandVersion
	Adapter
	ZcServicePoint
	SignatureInfo
	DatastoreConfig
	Image
	Drive
	AppInstanceConfig
	IpRange
	ZnetStaticDNSEntry
	Ipspec
	OSKeyTags
	OSVerDetails
	BaseOSConfig
*/
package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetworkConfig struct {
	Id   string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type NetworkType `protobuf:"varint,5,opt,name=type,enum=NetworkType" json:"type,omitempty"`
	// network ip specification
	Ip  *Ipspec               `protobuf:"bytes,6,opt,name=ip" json:"ip,omitempty"`
	Dns []*ZnetStaticDNSEntry `protobuf:"bytes,7,rep,name=dns" json:"dns,omitempty"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NetworkConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkConfig) GetType() NetworkType {
	if m != nil {
		return m.Type
	}
	return NetworkType_NETWORKTYPENOOP
}

func (m *NetworkConfig) GetIp() *Ipspec {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *NetworkConfig) GetDns() []*ZnetStaticDNSEntry {
	if m != nil {
		return m.Dns
	}
	return nil
}

type NetworkAdapter struct {
	// this is deviceName....
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	NetworkId string `protobuf:"bytes,3,opt,name=networkId" json:"networkId,omitempty"`
	// eid=lisp, v4=ipv4 etc...
	Addr     string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	Hostname string `protobuf:"bytes,5,opt,name=hostname" json:"hostname,omitempty"`
	// more configuration for getting addr
	Lispsignature string `protobuf:"bytes,6,opt,name=lispsignature" json:"lispsignature,omitempty"`
	Pemcert       []byte `protobuf:"bytes,7,opt,name=pemcert,proto3" json:"pemcert,omitempty"`
	Pemprivatekey []byte `protobuf:"bytes,8,opt,name=pemprivatekey,proto3" json:"pemprivatekey,omitempty"`
	// used in case of P2V, where we want to specify a macAddress
	// to vif, that is simulated towards app
	MacAddress string `protobuf:"bytes,9,opt,name=macAddress" json:"macAddress,omitempty"`
	// firewall
	Acls []*ACE `protobuf:"bytes,40,rep,name=acls" json:"acls,omitempty"`
}

func (m *NetworkAdapter) Reset()                    { *m = NetworkAdapter{} }
func (m *NetworkAdapter) String() string            { return proto.CompactTextString(m) }
func (*NetworkAdapter) ProtoMessage()               {}
func (*NetworkAdapter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NetworkAdapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkAdapter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkAdapter) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *NetworkAdapter) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NetworkAdapter) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NetworkAdapter) GetLispsignature() string {
	if m != nil {
		return m.Lispsignature
	}
	return ""
}

func (m *NetworkAdapter) GetPemcert() []byte {
	if m != nil {
		return m.Pemcert
	}
	return nil
}

func (m *NetworkAdapter) GetPemprivatekey() []byte {
	if m != nil {
		return m.Pemprivatekey
	}
	return nil
}

func (m *NetworkAdapter) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *NetworkAdapter) GetAcls() []*ACE {
	if m != nil {
		return m.Acls
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkConfig)(nil), "NetworkConfig")
	proto.RegisterType((*NetworkAdapter)(nil), "NetworkAdapter")
}

func init() { proto.RegisterFile("netconfig.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xbf, 0x6e, 0xdb, 0x30,
	0x10, 0xc6, 0x21, 0x59, 0x89, 0xac, 0x8b, 0xe3, 0x02, 0xec, 0x50, 0x22, 0xe8, 0x1f, 0x21, 0x68,
	0x01, 0x4d, 0x34, 0xe0, 0xbe, 0x40, 0xdd, 0x34, 0x43, 0x97, 0x0c, 0x4a, 0xa7, 0x6c, 0x0c, 0x79,
	0xb1, 0x09, 0x5b, 0x24, 0x41, 0x52, 0x36, 0xe4, 0xad, 0xaf, 0xd2, 0x27, 0x2d, 0x44, 0xa9, 0x6e,
	0xbc, 0xdd, 0xfd, 0xbe, 0xef, 0x3e, 0x9d, 0x48, 0xc2, 0x1b, 0x8d, 0x41, 0x18, 0xfd, 0xa2, 0xd6,
	0xcc, 0x3a, 0x13, 0xcc, 0xcd, 0xf4, 0xe5, 0x30, 0x56, 0xb3, 0x5e, 0x6a, 0xf4, 0xd0, 0xdd, 0xfe,
	0x4e, 0xe0, 0xfa, 0x01, 0xc3, 0xc1, 0xb8, 0xed, 0x5d, 0xf4, 0x93, 0x39, 0xa4, 0x4a, 0xd2, 0xa4,
	0x4c, 0xaa, 0xa2, 0x4e, 0x95, 0x24, 0x25, 0x64, 0xa1, 0xb3, 0x48, 0x2f, 0xca, 0xa4, 0x9a, 0x2f,
	0x67, 0x6c, 0x74, 0xff, 0xea, 0x2c, 0xd6, 0x51, 0x21, 0xef, 0x20, 0x55, 0x96, 0x5e, 0x96, 0x49,
	0x75, 0xb5, 0xcc, 0x99, 0xb2, 0xde, 0xa2, 0xa8, 0x53, 0x65, 0xc9, 0x17, 0x98, 0x48, 0xed, 0x69,
	0x5e, 0x4e, 0xaa, 0xab, 0xe5, 0x5b, 0xf6, 0xa4, 0x31, 0x3c, 0x06, 0x1e, 0x94, 0xf8, 0xf1, 0xf0,
	0x78, 0xaf, 0x83, 0xeb, 0xea, 0x5e, 0xbf, 0xfd, 0x93, 0xc2, 0x7c, 0x4c, 0x5d, 0x49, 0x6e, 0x03,
	0x3a, 0x42, 0x20, 0xd3, 0xbc, 0xc1, 0x71, 0x8d, 0x58, 0x8f, 0x8b, 0xa5, 0xa7, 0xc5, 0xde, 0x43,
	0xa1, 0x87, 0xa9, 0x9f, 0x92, 0x4e, 0x22, 0xfe, 0x0f, 0xfa, 0x04, 0x2e, 0xa5, 0xa3, 0xd9, 0x90,
	0xd0, 0xd7, 0xe4, 0x06, 0xa6, 0x1b, 0xe3, 0x43, 0x4c, 0xbe, 0x88, 0xfc, 0xd4, 0x93, 0xcf, 0x70,
	0xbd, 0x53, 0xde, 0x7a, 0xb5, 0xd6, 0x3c, 0xb4, 0x0e, 0xe3, 0xff, 0x14, 0xf5, 0x39, 0x24, 0x14,
	0x72, 0x8b, 0x8d, 0x40, 0x17, 0x68, 0x5e, 0x26, 0xd5, 0xac, 0xfe, 0xd7, 0xf6, 0xf3, 0x16, 0x1b,
	0xeb, 0xd4, 0x9e, 0x07, 0xdc, 0x62, 0x47, 0xa7, 0x51, 0x3f, 0x87, 0xe4, 0x23, 0x40, 0xc3, 0xc5,
	0x4a, 0x4a, 0x87, 0xde, 0xd3, 0x22, 0x7e, 0xe2, 0x15, 0x21, 0x14, 0x32, 0x2e, 0x76, 0x9e, 0x56,
	0xf1, 0xc8, 0x32, 0xb6, 0xba, 0xbb, 0xaf, 0x23, 0xf9, 0xfe, 0x0d, 0x3e, 0x09, 0xd3, 0xb0, 0x23,
	0x4a, 0x94, 0x9c, 0x89, 0x9d, 0x69, 0x25, 0x6b, 0x3d, 0xba, 0xbd, 0x12, 0x38, 0xdc, 0xe5, 0xd3,
	0x87, 0xb5, 0x0a, 0x9b, 0xf6, 0x99, 0x09, 0xd3, 0x2c, 0x06, 0xdf, 0x82, 0x5b, 0xb5, 0x38, 0x0e,
	0x0f, 0xe1, 0xf9, 0x32, 0xba, 0xbe, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x67, 0xeb, 0x38, 0x68,
	0x1c, 0x02, 0x00, 0x00,
}
