// Code generated by protoc-gen-go. DO NOT EDIT.
// source: devconfig.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MapServer struct {
	NameOrIp   string `protobuf:"bytes,1,opt,name=NameOrIp" json:"NameOrIp,omitempty"`
	Credential string `protobuf:"bytes,2,opt,name=Credential" json:"Credential,omitempty"`
}

func (m *MapServer) Reset()                    { *m = MapServer{} }
func (m *MapServer) String() string            { return proto.CompactTextString(m) }
func (*MapServer) ProtoMessage()               {}
func (*MapServer) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *MapServer) GetNameOrIp() string {
	if m != nil {
		return m.NameOrIp
	}
	return ""
}

func (m *MapServer) GetCredential() string {
	if m != nil {
		return m.Credential
	}
	return ""
}

type ZedServer struct {
	HostName string   `protobuf:"bytes,1,opt,name=HostName" json:"HostName,omitempty"`
	EID      []string `protobuf:"bytes,2,rep,name=EID" json:"EID,omitempty"`
}

func (m *ZedServer) Reset()                    { *m = ZedServer{} }
func (m *ZedServer) String() string            { return proto.CompactTextString(m) }
func (*ZedServer) ProtoMessage()               {}
func (*ZedServer) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ZedServer) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *ZedServer) GetEID() []string {
	if m != nil {
		return m.EID
	}
	return nil
}

type DeviceLispDetails struct {
	LispMapServers         []*MapServer `protobuf:"bytes,1,rep,name=LispMapServers" json:"LispMapServers,omitempty"`
	LispInstance           uint32       `protobuf:"varint,2,opt,name=LispInstance" json:"LispInstance,omitempty"`
	EID                    string       `protobuf:"bytes,4,opt,name=EID" json:"EID,omitempty"`
	EIDHashLen             uint32       `protobuf:"varint,5,opt,name=EIDHashLen" json:"EIDHashLen,omitempty"`
	ZedServers             []*ZedServer `protobuf:"bytes,6,rep,name=ZedServers" json:"ZedServers,omitempty"`
	EidAllocationPrefix    []byte       `protobuf:"bytes,8,opt,name=EidAllocationPrefix,proto3" json:"EidAllocationPrefix,omitempty"`
	EidAllocationPrefixLen uint32       `protobuf:"varint,9,opt,name=EidAllocationPrefixLen" json:"EidAllocationPrefixLen,omitempty"`
	ClientAddr             string       `protobuf:"bytes,10,opt,name=ClientAddr" json:"ClientAddr,omitempty"`
	Experimental           bool         `protobuf:"varint,20,opt,name=Experimental" json:"Experimental,omitempty"`
}

func (m *DeviceLispDetails) Reset()                    { *m = DeviceLispDetails{} }
func (m *DeviceLispDetails) String() string            { return proto.CompactTextString(m) }
func (*DeviceLispDetails) ProtoMessage()               {}
func (*DeviceLispDetails) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *DeviceLispDetails) GetLispMapServers() []*MapServer {
	if m != nil {
		return m.LispMapServers
	}
	return nil
}

func (m *DeviceLispDetails) GetLispInstance() uint32 {
	if m != nil {
		return m.LispInstance
	}
	return 0
}

func (m *DeviceLispDetails) GetEID() string {
	if m != nil {
		return m.EID
	}
	return ""
}

func (m *DeviceLispDetails) GetEIDHashLen() uint32 {
	if m != nil {
		return m.EIDHashLen
	}
	return 0
}

func (m *DeviceLispDetails) GetZedServers() []*ZedServer {
	if m != nil {
		return m.ZedServers
	}
	return nil
}

func (m *DeviceLispDetails) GetEidAllocationPrefix() []byte {
	if m != nil {
		return m.EidAllocationPrefix
	}
	return nil
}

func (m *DeviceLispDetails) GetEidAllocationPrefixLen() uint32 {
	if m != nil {
		return m.EidAllocationPrefixLen
	}
	return 0
}

func (m *DeviceLispDetails) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *DeviceLispDetails) GetExperimental() bool {
	if m != nil {
		return m.Experimental
	}
	return false
}

// Device Operational Commands Semantic
// For rebooting device,  command=Reset, counter = counter+delta, desiredState = on
// For poweroff device,  command=Reset, counter = counter+delta, desiredState = off
// For backup at midnight, command=Backup, counter = counter+delta, desiredState=n/a, opsTime = mm/dd/yy:hh:ss
// Current implementation does support only single command outstanding for each type
// In future can be extended to have more scheduled events
//
type DeviceOpsCmd struct {
	Counter      uint32 `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
	DesiredState bool   `protobuf:"varint,3,opt,name=desiredState" json:"desiredState,omitempty"`
	// FIXME: change to timestamp, once we move to gogo proto
	OpsTime string `protobuf:"bytes,4,opt,name=opsTime" json:"opsTime,omitempty"`
}

func (m *DeviceOpsCmd) Reset()                    { *m = DeviceOpsCmd{} }
func (m *DeviceOpsCmd) String() string            { return proto.CompactTextString(m) }
func (*DeviceOpsCmd) ProtoMessage()               {}
func (*DeviceOpsCmd) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *DeviceOpsCmd) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *DeviceOpsCmd) GetDesiredState() bool {
	if m != nil {
		return m.DesiredState
	}
	return false
}

func (m *DeviceOpsCmd) GetOpsTime() string {
	if m != nil {
		return m.OpsTime
	}
	return ""
}

type EdgeDevConfig struct {
	Id                 *UUIDandVersion      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DevConfigSha256    []byte               `protobuf:"bytes,2,opt,name=devConfigSha256,proto3" json:"devConfigSha256,omitempty"`
	DevConfigSignature []byte               `protobuf:"bytes,3,opt,name=devConfigSignature,proto3" json:"devConfigSignature,omitempty"`
	Apps               []*AppInstanceConfig `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
	Networks           []*NetworkConfig     `protobuf:"bytes,5,rep,name=networks" json:"networks,omitempty"`
	Datastores         []*DatastoreConfig   `protobuf:"bytes,6,rep,name=datastores" json:"datastores,omitempty"`
	LispInfo           *DeviceLispDetails   `protobuf:"bytes,7,opt,name=lispInfo" json:"lispInfo,omitempty"`
	Base               []*BaseOSConfig      `protobuf:"bytes,8,rep,name=base" json:"base,omitempty"`
	Reboot             *DeviceOpsCmd        `protobuf:"bytes,9,opt,name=reboot" json:"reboot,omitempty"`
	Backup             *DeviceOpsCmd        `protobuf:"bytes,10,opt,name=backup" json:"backup,omitempty"`
}

func (m *EdgeDevConfig) Reset()                    { *m = EdgeDevConfig{} }
func (m *EdgeDevConfig) String() string            { return proto.CompactTextString(m) }
func (*EdgeDevConfig) ProtoMessage()               {}
func (*EdgeDevConfig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *EdgeDevConfig) GetId() *UUIDandVersion {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EdgeDevConfig) GetDevConfigSha256() []byte {
	if m != nil {
		return m.DevConfigSha256
	}
	return nil
}

func (m *EdgeDevConfig) GetDevConfigSignature() []byte {
	if m != nil {
		return m.DevConfigSignature
	}
	return nil
}

func (m *EdgeDevConfig) GetApps() []*AppInstanceConfig {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *EdgeDevConfig) GetNetworks() []*NetworkConfig {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *EdgeDevConfig) GetDatastores() []*DatastoreConfig {
	if m != nil {
		return m.Datastores
	}
	return nil
}

func (m *EdgeDevConfig) GetLispInfo() *DeviceLispDetails {
	if m != nil {
		return m.LispInfo
	}
	return nil
}

func (m *EdgeDevConfig) GetBase() []*BaseOSConfig {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *EdgeDevConfig) GetReboot() *DeviceOpsCmd {
	if m != nil {
		return m.Reboot
	}
	return nil
}

func (m *EdgeDevConfig) GetBackup() *DeviceOpsCmd {
	if m != nil {
		return m.Backup
	}
	return nil
}

type ConfigRequest struct {
	ConfigHash string `protobuf:"bytes,1,opt,name=configHash" json:"configHash,omitempty"`
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *ConfigRequest) GetConfigHash() string {
	if m != nil {
		return m.ConfigHash
	}
	return ""
}

type ConfigResponse struct {
	Config     *EdgeDevConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	ConfigHash string         `protobuf:"bytes,2,opt,name=configHash" json:"configHash,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *ConfigResponse) GetConfig() *EdgeDevConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ConfigResponse) GetConfigHash() string {
	if m != nil {
		return m.ConfigHash
	}
	return ""
}

func init() {
	proto.RegisterType((*MapServer)(nil), "MapServer")
	proto.RegisterType((*ZedServer)(nil), "ZedServer")
	proto.RegisterType((*DeviceLispDetails)(nil), "DeviceLispDetails")
	proto.RegisterType((*DeviceOpsCmd)(nil), "DeviceOpsCmd")
	proto.RegisterType((*EdgeDevConfig)(nil), "EdgeDevConfig")
	proto.RegisterType((*ConfigRequest)(nil), "ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "ConfigResponse")
}

func init() { proto.RegisterFile("devconfig.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 676 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x5d, 0x4f, 0xdb, 0x48,
	0x14, 0x55, 0x3e, 0x08, 0xc9, 0x25, 0x09, 0xec, 0xec, 0x6a, 0x65, 0x21, 0xed, 0x92, 0xb5, 0xb4,
	0xab, 0x88, 0x07, 0x07, 0x65, 0x55, 0xa4, 0xbe, 0x15, 0x48, 0x54, 0x22, 0x51, 0xa8, 0x9c, 0x52,
	0x55, 0xbc, 0x4d, 0x3c, 0x37, 0x61, 0x84, 0x3d, 0xe3, 0xce, 0x4c, 0x52, 0xc4, 0xbf, 0xea, 0xaf,
	0xeb, 0x6b, 0x35, 0xe3, 0x0f, 0x92, 0x40, 0xdf, 0x7c, 0xcf, 0x39, 0xf7, 0xfa, 0xf8, 0x7e, 0x18,
	0xf6, 0x19, 0xae, 0x22, 0x29, 0xe6, 0x7c, 0x11, 0xa4, 0x4a, 0x1a, 0x79, 0x98, 0x01, 0x49, 0x22,
	0x45, 0x01, 0xd0, 0x34, 0xdd, 0x50, 0x90, 0x19, 0xd5, 0x28, 0xf5, 0x66, 0x96, 0x40, 0xb3, 0x01,
	0x74, 0xb4, 0x91, 0x8a, 0x2e, 0x30, 0x0b, 0xfd, 0xf7, 0xd0, 0xfa, 0x40, 0xd3, 0x29, 0xaa, 0x15,
	0x2a, 0x72, 0x08, 0xcd, 0x6b, 0x9a, 0xe0, 0x8d, 0x9a, 0xa4, 0x5e, 0xa5, 0x57, 0xe9, 0xb7, 0xc2,
	0x32, 0x26, 0x7f, 0x03, 0x5c, 0x28, 0x64, 0x28, 0x0c, 0xa7, 0xb1, 0x57, 0x75, 0xec, 0x1a, 0xe2,
	0xbf, 0x85, 0xd6, 0x1d, 0xb2, 0xe7, 0x42, 0x97, 0x52, 0x1b, 0x9b, 0x5c, 0x14, 0x2a, 0x62, 0x72,
	0x00, 0xb5, 0xf1, 0x64, 0xe4, 0x55, 0x7b, 0xb5, 0x7e, 0x2b, 0xb4, 0x8f, 0xfe, 0x8f, 0x2a, 0xfc,
	0x36, 0xc2, 0x15, 0x8f, 0xf0, 0x8a, 0xeb, 0x74, 0x84, 0x86, 0xf2, 0x58, 0x93, 0x21, 0x74, 0x6d,
	0x58, 0xba, 0xd3, 0x5e, 0xa5, 0x57, 0xeb, 0xef, 0x0d, 0x21, 0x28, 0xa1, 0x70, 0x4b, 0x41, 0x7c,
	0x68, 0x5b, 0x64, 0x22, 0xb4, 0xa1, 0x22, 0x42, 0x67, 0xb3, 0x13, 0x6e, 0x60, 0xc5, 0xfb, 0xeb,
	0xce, 0x96, 0x7d, 0xb4, 0x9f, 0x36, 0x9e, 0x8c, 0x2e, 0xa9, 0xbe, 0xbf, 0x42, 0xe1, 0xed, 0xb8,
	0x9c, 0x35, 0x84, 0x1c, 0x03, 0x94, 0x9f, 0xa6, 0xbd, 0x46, 0xee, 0xa2, 0x84, 0xc2, 0x35, 0x96,
	0x9c, 0xc0, 0xef, 0x63, 0xce, 0xce, 0xe2, 0x58, 0x46, 0xd4, 0x70, 0x29, 0x3e, 0x2a, 0x9c, 0xf3,
	0x47, 0xaf, 0xd9, 0xab, 0xf4, 0xdb, 0xe1, 0x6b, 0x14, 0x39, 0x85, 0x3f, 0x5f, 0x81, 0xad, 0x93,
	0x96, 0x73, 0xf2, 0x0b, 0xd6, 0x0d, 0x24, 0xe6, 0x28, 0xcc, 0x19, 0x63, 0xca, 0x83, 0x7c, 0x20,
	0x25, 0x62, 0x7b, 0x31, 0x7e, 0x4c, 0x51, 0xf1, 0x04, 0x85, 0xa1, 0xb1, 0xf7, 0x47, 0xaf, 0xd2,
	0x6f, 0x86, 0x1b, 0x98, 0x3f, 0x87, 0x76, 0xd6, 0xf8, 0x9b, 0x54, 0x5f, 0x24, 0x8c, 0x78, 0xb0,
	0x1b, 0xc9, 0xa5, 0x30, 0xa8, 0xf2, 0xd6, 0x15, 0xa1, 0xad, 0xc6, 0x50, 0x73, 0x85, 0x6c, 0x6a,
	0xa8, 0x41, 0xaf, 0x96, 0x55, 0x5b, 0xc7, 0x6c, 0xb6, 0x4c, 0xf5, 0x27, 0x9e, 0x60, 0xde, 0xdd,
	0x22, 0xf4, 0xbf, 0xd7, 0xa0, 0x33, 0x66, 0x0b, 0x1c, 0xe1, 0xea, 0xc2, 0x2d, 0x23, 0x39, 0x82,
	0x2a, 0x67, 0x6e, 0x37, 0xf6, 0x86, 0xfb, 0xc1, 0xed, 0xed, 0x64, 0x44, 0x05, 0xfb, 0x8c, 0x4a,
	0x73, 0x29, 0xc2, 0x2a, 0x67, 0xa4, 0xef, 0x2e, 0x20, 0x53, 0x4f, 0xef, 0xe9, 0xf0, 0xcd, 0xa9,
	0xb3, 0xd4, 0x0e, 0xb7, 0x61, 0x12, 0x00, 0x79, 0x86, 0xf8, 0x42, 0x50, 0xb3, 0x54, 0x99, 0xc1,
	0x76, 0xf8, 0x0a, 0x43, 0xfe, 0x83, 0x3a, 0x4d, 0x53, 0xed, 0xd5, 0xdd, 0x20, 0x49, 0x70, 0x96,
	0x96, 0xcb, 0x91, 0x49, 0x43, 0xc7, 0x93, 0x63, 0x68, 0x0a, 0x34, 0xdf, 0xa4, 0x7a, 0xd0, 0xde,
	0x8e, 0xd3, 0x76, 0x83, 0xeb, 0x0c, 0xc8, 0x75, 0x25, 0x4f, 0x4e, 0x00, 0x18, 0x35, 0xd4, 0xde,
	0x16, 0x16, 0x2b, 0x72, 0x10, 0x8c, 0x0a, 0x28, 0xd7, 0xaf, 0x69, 0x48, 0x00, 0xcd, 0xd8, 0xad,
	0xe5, 0x5c, 0x7a, 0xbb, 0xae, 0x0d, 0x24, 0x78, 0x71, 0x04, 0x61, 0xa9, 0x21, 0xff, 0x40, 0xdd,
	0x9e, 0xb7, 0xd7, 0x74, 0xb5, 0x3b, 0xc1, 0x39, 0xd5, 0x78, 0x33, 0x2d, 0x0c, 0x5b, 0x8a, 0xfc,
	0x0b, 0x0d, 0x85, 0x33, 0x29, 0x8d, 0xdb, 0x1c, 0x2b, 0x5a, 0x1f, 0x6e, 0x98, 0x93, 0x56, 0x36,
	0xa3, 0xd1, 0xc3, 0x32, 0x75, 0x4b, 0xf3, 0x52, 0x96, 0x91, 0xfe, 0x00, 0x3a, 0x79, 0x75, 0xfc,
	0xba, 0x44, 0x6d, 0xec, 0xc2, 0x65, 0x7f, 0x12, 0x7b, 0x17, 0xf9, 0x59, 0xaf, 0x21, 0xfe, 0x17,
	0xe8, 0x16, 0x09, 0x3a, 0x95, 0x42, 0xdb, 0x4e, 0x37, 0x32, 0x3e, 0x1f, 0x74, 0x37, 0xd8, 0x58,
	0x82, 0x30, 0x67, 0xb7, 0x2a, 0x57, 0xb7, 0x2b, 0x9f, 0xbf, 0x83, 0xa3, 0x48, 0x26, 0xc1, 0x13,
	0x32, 0x64, 0x34, 0x88, 0x62, 0xb9, 0x64, 0xc1, 0x52, 0xa3, 0xb2, 0xae, 0xb3, 0xff, 0xd8, 0xdd,
	0x5f, 0x0b, 0x6e, 0xee, 0x97, 0xb3, 0x20, 0x92, 0xc9, 0x20, 0xd3, 0x0d, 0x68, 0xca, 0x07, 0x4f,
	0x59, 0x95, 0x59, 0xc3, 0xa9, 0xfe, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0x22, 0x58, 0xd6, 0xa2,
	0x56, 0x05, 0x00, 0x00,
}
