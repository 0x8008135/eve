syntax = "proto3";

option go_package  = "github.com/zededa/api/zconfig";
option java_package = "com.zededa.cloud.uservice.proto";

import "devcommon.proto";
import "appconfig.proto";
import "baseosconfig.proto";
import "netconfig.proto";
import "storage.proto";


message MapServer {
        string NameOrIp   = 1;
        string Credential = 2;
}

message ZedServer {
        string HostName   = 1;
        repeated string EID = 2;
}

message DeviceLispDetails {
        repeated MapServer LispMapServers = 1;
        uint32 LispInstance = 2;
        string EID = 4;
        uint32 EIDHashLen = 5;
        repeated ZedServer ZedServers = 6;
        bytes EidAllocationPrefix = 8;
        uint32 EidAllocationPrefixLen = 9;
        string ClientAddr = 10;
        bool Experimental = 20;	// true: Zededa dataplane, false [default]: lispers.net dataplane
}

// Device Operational Commands Semantic
// For rebooting device,  command=Reset, counter = counter+delta, desiredState = on
// For poweroff device,  command=Reset, counter = counter+delta, desiredState = off
// For backup at midnight, command=Backup, counter = counter+delta, desiredState=n/a, opsTime = mm/dd/yy:hh:ss
// Current implementation does support only single command outstanding for each type
// In future can be extended to have more scheduled events
//
message DeviceOpsCmd {
	uint32 counter = 2;
	bool desiredState = 3;
	// FIXME: change to timestamp, once we move to gogo proto
	string opsTime = 4;
}

message EdgeDevConfig {
	UUIDandVersion id = 1;
	bytes devConfigSha256 = 2;
	bytes devConfigSignature = 3;

	repeated AppInstanceConfig apps   = 4;
	repeated NetworkConfig networks = 5;
	repeated DatastoreConfig datastores = 6;

	DeviceLispDetails lispInfo = 7;
	repeated BaseOSConfig base = 8;	// BaseOSImage config block
	DeviceOpsCmd reboot = 9;
	DeviceOpsCmd backup = 10;

	repeated ConfigItem configItems = 11;	
}

// Timers and other per-device policy which relates to the interaction
// with zedcloud. Note that the timers are randomized on the device
// to avoid synchronization with other devices. Random range is between
// between .5 and 1.5 of these nominal values. If not set (i.e. zero),
// it means the default value of 60 seconds.
// Initially we'll have a "configinterval" and a "metricsinterval" item.
// We'll also need a "resetIfCloudGoneTime" and a "fallbackIfCloudGoneTime"
// to control a normal operation and an upgrade inprogress check of
// cloud connectivity.
message ConfigItem {
	string key = 1;		// E.g., "configinterval"
	oneof configItemValue {
		bool boolValue = 3;
		uint32 uint32Value = 4;	// If timer this is in seconds
		uint64 uint64Value = 5;
		float floatValue = 6;
		string stringValue = 7;
	}
}		

message ConfigRequest {
	string configHash = 1;
}

message ConfigResponse {
	EdgeDevConfig config = 1;
	string configHash = 2;
}
