// Code generated by protoc-gen-go. DO NOT EDIT.
// source: appconfig.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// XXX duplicate of definition in zmet.proto with uniq names (ZCio vs Zio)
// Types of I/O adapters that can be assigned to applications
type ZioType int32

const (
	ZioType_ZCioNop   ZioType = 0
	ZioType_ZCioEth   ZioType = 1
	ZioType_ZCioUSB   ZioType = 2
	ZioType_ZCioCOM   ZioType = 3
	ZioType_ZCioOther ZioType = 255
)

var ZioType_name = map[int32]string{
	0:   "ZCioNop",
	1:   "ZCioEth",
	2:   "ZCioUSB",
	3:   "ZCioCOM",
	255: "ZCioOther",
}
var ZioType_value = map[string]int32{
	"ZCioNop":   0,
	"ZCioEth":   1,
	"ZCioUSB":   2,
	"ZCioCOM":   3,
	"ZCioOther": 255,
}

func (x ZioType) String() string {
	return proto.EnumName(ZioType_name, int32(x))
}
func (ZioType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type AppInstanceConfig struct {
	Uuidandversion *UUIDandVersion `protobuf:"bytes,1,opt,name=uuidandversion" json:"uuidandversion,omitempty"`
	Displayname    string          `protobuf:"bytes,2,opt,name=displayname" json:"displayname,omitempty"`
	Fixedresources *VmConfig       `protobuf:"bytes,3,opt,name=fixedresources" json:"fixedresources,omitempty"`
	Drives         []*Drive        `protobuf:"bytes,4,rep,name=drives" json:"drives,omitempty"`
	Activate       bool            `protobuf:"varint,5,opt,name=activate" json:"activate,omitempty"`
	// XXX At some point in time we should merge NetworkAdapter and
	// Adapter
	Interfaces []*NetworkAdapter `protobuf:"bytes,6,rep,name=interfaces" json:"interfaces,omitempty"`
	Adapters   []*Adapter        `protobuf:"bytes,7,rep,name=adapters" json:"adapters,omitempty"`
}

func (m *AppInstanceConfig) Reset()                    { *m = AppInstanceConfig{} }
func (m *AppInstanceConfig) String() string            { return proto.CompactTextString(m) }
func (*AppInstanceConfig) ProtoMessage()               {}
func (*AppInstanceConfig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *AppInstanceConfig) GetUuidandversion() *UUIDandVersion {
	if m != nil {
		return m.Uuidandversion
	}
	return nil
}

func (m *AppInstanceConfig) GetDisplayname() string {
	if m != nil {
		return m.Displayname
	}
	return ""
}

func (m *AppInstanceConfig) GetFixedresources() *VmConfig {
	if m != nil {
		return m.Fixedresources
	}
	return nil
}

func (m *AppInstanceConfig) GetDrives() []*Drive {
	if m != nil {
		return m.Drives
	}
	return nil
}

func (m *AppInstanceConfig) GetActivate() bool {
	if m != nil {
		return m.Activate
	}
	return false
}

func (m *AppInstanceConfig) GetInterfaces() []*NetworkAdapter {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *AppInstanceConfig) GetAdapters() []*Adapter {
	if m != nil {
		return m.Adapters
	}
	return nil
}

// Adapter bundles corresponding to a subset of what is in ZioBundle
type Adapter struct {
	Type ZioType `protobuf:"varint,1,opt,name=type,enum=ZioType" json:"type,omitempty"`
	Name string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Adapter) Reset()                    { *m = Adapter{} }
func (m *Adapter) String() string            { return proto.CompactTextString(m) }
func (*Adapter) ProtoMessage()               {}
func (*Adapter) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *Adapter) GetType() ZioType {
	if m != nil {
		return m.Type
	}
	return ZioType_ZCioNop
}

func (m *Adapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*AppInstanceConfig)(nil), "AppInstanceConfig")
	proto.RegisterType((*Adapter)(nil), "Adapter")
	proto.RegisterEnum("ZioType", ZioType_name, ZioType_value)
}

func init() { proto.RegisterFile("appconfig.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xbf, 0x6e, 0xdb, 0x30,
	0x10, 0x87, 0x2b, 0xdb, 0xb5, 0xe5, 0x33, 0x6a, 0xab, 0x9c, 0x84, 0xa0, 0x7f, 0x84, 0xa0, 0x83,
	0xd1, 0x81, 0x46, 0xdd, 0xa1, 0x43, 0x97, 0x26, 0x4e, 0x87, 0x0c, 0x49, 0x00, 0xb5, 0xce, 0xe0,
	0x8d, 0x21, 0xcf, 0x36, 0xd1, 0x88, 0x24, 0x48, 0x4a, 0xad, 0xf3, 0x5c, 0x7d, 0xbf, 0x16, 0xa6,
	0xa4, 0x40, 0xf0, 0xc6, 0xdf, 0x77, 0xdf, 0xf1, 0x80, 0xc3, 0xc1, 0x8c, 0x19, 0xc3, 0xb5, 0xda,
	0xca, 0x1d, 0x35, 0x56, 0x7b, 0x7d, 0x36, 0x13, 0x58, 0x71, 0x5d, 0x14, 0x5a, 0x35, 0xe0, 0x95,
	0xf3, 0xda, 0xb2, 0x1d, 0x36, 0x31, 0xae, 0x8a, 0xd6, 0x54, 0xe8, 0xbb, 0xad, 0xe7, 0x7f, 0x7b,
	0xf0, 0xfa, 0xc2, 0x98, 0x6b, 0xe5, 0x3c, 0x53, 0x1c, 0x57, 0xa1, 0x46, 0xbe, 0xc0, 0xb4, 0x2c,
	0xa5, 0x60, 0x4a, 0x54, 0x68, 0x9d, 0xd4, 0x2a, 0x8d, 0xb2, 0x68, 0x3e, 0x59, 0xce, 0xe8, 0x7a,
	0x7d, 0x7d, 0xc5, 0x94, 0xb8, 0xaf, 0x71, 0x7e, 0xa2, 0x91, 0x0c, 0x26, 0x42, 0x3a, 0xf3, 0xc8,
	0x0e, 0x8a, 0x15, 0x98, 0xf6, 0xb2, 0x68, 0x3e, 0xce, 0xbb, 0x88, 0x7c, 0x82, 0xe9, 0x56, 0xfe,
	0x41, 0x61, 0xd1, 0xe9, 0xd2, 0x72, 0x74, 0x69, 0x3f, 0x7c, 0x3d, 0xa6, 0xf7, 0x45, 0x3d, 0x3d,
	0x3f, 0x11, 0xc8, 0x3b, 0x18, 0x0a, 0x2b, 0x2b, 0x74, 0xe9, 0x20, 0xeb, 0xcf, 0x27, 0xcb, 0x21,
	0xbd, 0x3a, 0xc6, 0xbc, 0xa1, 0xe4, 0x0c, 0x62, 0xc6, 0xbd, 0xac, 0x98, 0xc7, 0xf4, 0x65, 0x16,
	0xcd, 0xe3, 0xfc, 0x39, 0x93, 0x05, 0x80, 0x54, 0x1e, 0xed, 0x96, 0x1d, 0x47, 0x0d, 0x43, 0xff,
	0x8c, 0xde, 0xa2, 0xff, 0xad, 0xed, 0xaf, 0x0b, 0xc1, 0x8c, 0x47, 0x9b, 0x77, 0x14, 0xf2, 0x01,
	0x62, 0x56, 0x63, 0x97, 0x8e, 0x82, 0x1e, 0xd3, 0xd6, 0x7b, 0xae, 0x9c, 0x7f, 0x85, 0x51, 0x03,
	0xc9, 0x1b, 0x18, 0xf8, 0x83, 0xc1, 0xb0, 0xa1, 0xe9, 0x32, 0xa6, 0x1b, 0xa9, 0x7f, 0x1e, 0x0c,
	0xe6, 0x81, 0x12, 0x02, 0x83, 0xce, 0x26, 0xc2, 0xfb, 0xe3, 0x0d, 0x8c, 0x1a, 0x89, 0x4c, 0x60,
	0xb4, 0x59, 0x49, 0x7d, 0xab, 0x4d, 0xf2, 0xa2, 0x0d, 0xdf, 0xfd, 0x3e, 0x89, 0xda, 0xb0, 0xfe,
	0x71, 0x99, 0xf4, 0xda, 0xb0, 0xba, 0xbb, 0x49, 0xfa, 0x64, 0x0a, 0xe3, 0x63, 0xb8, 0xf3, 0x7b,
	0xb4, 0xc9, 0xbf, 0xe8, 0xf2, 0x1b, 0xbc, 0xe7, 0xba, 0xa0, 0x4f, 0x28, 0x50, 0x30, 0xca, 0x1f,
	0x75, 0x29, 0x68, 0xe9, 0xd0, 0x56, 0x92, 0x37, 0x07, 0xb0, 0x79, 0xbb, 0x93, 0x7e, 0x5f, 0x3e,
	0x50, 0xae, 0x8b, 0x45, 0xed, 0x2d, 0x98, 0x91, 0x8b, 0xa7, 0xfa, 0x14, 0x1e, 0x86, 0xc1, 0xfa,
	0xfc, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x33, 0x3d, 0x0d, 0x7a, 0x59, 0x02, 0x00, 0x00,
}
