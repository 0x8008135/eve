// Code generated by protoc-gen-go.
// source: metrics.proto
// DO NOT EDIT!

/*
Package protometrics is a generated protocol buffer package.

It is generated from these files:
	metrics.proto

It has these top-level messages:
	ZInfoManufacturer
	ZInfoNetwork
	ZinfoPeripheral
	ZInfoSW
	ZInfoDevice
	ZInfoHypervisor
	ZInfoApp
	ZInfoMsg
	CpuMetric
	MemoryMetric
	NetworkMetric
	DeviceMetric
	ZMetricMsg
*/
package protometrics

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ZInfoTypes int32

const (
	ZInfoTypes_ZiNop        ZInfoTypes = 0
	ZInfoTypes_ZiDevice     ZInfoTypes = 1
	ZInfoTypes_ZiHypervisor ZInfoTypes = 2
	ZInfoTypes_ZiApp        ZInfoTypes = 3
)

var ZInfoTypes_name = map[int32]string{
	0: "ZiNop",
	1: "ZiDevice",
	2: "ZiHypervisor",
	3: "ZiApp",
}
var ZInfoTypes_value = map[string]int32{
	"ZiNop":        0,
	"ZiDevice":     1,
	"ZiHypervisor": 2,
	"ZiApp":        3,
}

func (x ZInfoTypes) Enum() *ZInfoTypes {
	p := new(ZInfoTypes)
	*p = x
	return p
}
func (x ZInfoTypes) String() string {
	return proto.EnumName(ZInfoTypes_name, int32(x))
}
func (x *ZInfoTypes) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ZInfoTypes_value, data, "ZInfoTypes")
	if err != nil {
		return err
	}
	*x = ZInfoTypes(value)
	return nil
}

type ZPeripheralTypes int32

const (
	ZPeripheralTypes_ZpNone    ZPeripheralTypes = 0
	ZPeripheralTypes_ZpStorage ZPeripheralTypes = 1
	ZPeripheralTypes_ZpNetwork ZPeripheralTypes = 2
)

var ZPeripheralTypes_name = map[int32]string{
	0: "ZpNone",
	1: "ZpStorage",
	2: "ZpNetwork",
}
var ZPeripheralTypes_value = map[string]int32{
	"ZpNone":    0,
	"ZpStorage": 1,
	"ZpNetwork": 2,
}

func (x ZPeripheralTypes) Enum() *ZPeripheralTypes {
	p := new(ZPeripheralTypes)
	*p = x
	return p
}
func (x ZPeripheralTypes) String() string {
	return proto.EnumName(ZPeripheralTypes_name, int32(x))
}
func (x *ZPeripheralTypes) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ZPeripheralTypes_value, data, "ZPeripheralTypes")
	if err != nil {
		return err
	}
	*x = ZPeripheralTypes(value)
	return nil
}

type ZmetricTypes int32

const (
	ZmetricTypes_ZmNop    ZmetricTypes = 0
	ZmetricTypes_ZmDevice ZmetricTypes = 1
	ZmetricTypes_ZmApp    ZmetricTypes = 3
)

var ZmetricTypes_name = map[int32]string{
	0: "ZmNop",
	1: "ZmDevice",
	3: "ZmApp",
}
var ZmetricTypes_value = map[string]int32{
	"ZmNop":    0,
	"ZmDevice": 1,
	"ZmApp":    3,
}

func (x ZmetricTypes) Enum() *ZmetricTypes {
	p := new(ZmetricTypes)
	*p = x
	return p
}
func (x ZmetricTypes) String() string {
	return proto.EnumName(ZmetricTypes_name, int32(x))
}
func (x *ZmetricTypes) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ZmetricTypes_value, data, "ZmetricTypes")
	if err != nil {
		return err
	}
	*x = ZmetricTypes(value)
	return nil
}

// Manufacturing info, product name, model, version etc.
type ZInfoManufacturer struct {
	Manufacturer     *string `protobuf:"bytes,1,req,name=manufacturer" json:"manufacturer,omitempty"`
	ProductName      *string `protobuf:"bytes,2,req,name=productName" json:"productName,omitempty"`
	Version          *string `protobuf:"bytes,3,req,name=version" json:"version,omitempty"`
	SerialNumber     *string `protobuf:"bytes,4,req,name=serialNumber" json:"serialNumber,omitempty"`
	UUID             *string `protobuf:"bytes,5,req" json:"UUID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ZInfoManufacturer) Reset()         { *m = ZInfoManufacturer{} }
func (m *ZInfoManufacturer) String() string { return proto.CompactTextString(m) }
func (*ZInfoManufacturer) ProtoMessage()    {}

func (m *ZInfoManufacturer) GetManufacturer() string {
	if m != nil && m.Manufacturer != nil {
		return *m.Manufacturer
	}
	return ""
}

func (m *ZInfoManufacturer) GetProductName() string {
	if m != nil && m.ProductName != nil {
		return *m.ProductName
	}
	return ""
}

func (m *ZInfoManufacturer) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *ZInfoManufacturer) GetSerialNumber() string {
	if m != nil && m.SerialNumber != nil {
		return *m.SerialNumber
	}
	return ""
}

func (m *ZInfoManufacturer) GetUUID() string {
	if m != nil && m.UUID != nil {
		return *m.UUID
	}
	return ""
}

type ZInfoNetwork struct {
	IPAddr           *string `protobuf:"bytes,1,req" json:"IPAddr,omitempty"`
	GwAddr           *string `protobuf:"bytes,2,req,name=gwAddr" json:"gwAddr,omitempty"`
	Macaddr          *string `protobuf:"bytes,3,req,name=macaddr" json:"macaddr,omitempty"`
	Devname          *string `protobuf:"bytes,4,req,name=devname" json:"devname,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ZInfoNetwork) Reset()         { *m = ZInfoNetwork{} }
func (m *ZInfoNetwork) String() string { return proto.CompactTextString(m) }
func (*ZInfoNetwork) ProtoMessage()    {}

func (m *ZInfoNetwork) GetIPAddr() string {
	if m != nil && m.IPAddr != nil {
		return *m.IPAddr
	}
	return ""
}

func (m *ZInfoNetwork) GetGwAddr() string {
	if m != nil && m.GwAddr != nil {
		return *m.GwAddr
	}
	return ""
}

func (m *ZInfoNetwork) GetMacaddr() string {
	if m != nil && m.Macaddr != nil {
		return *m.Macaddr
	}
	return ""
}

func (m *ZInfoNetwork) GetDevname() string {
	if m != nil && m.Devname != nil {
		return *m.Devname
	}
	return ""
}

type ZinfoPeripheral struct {
	Ztype            *ZPeripheralTypes  `protobuf:"varint,1,req,name=ztype,enum=protometrics.ZPeripheralTypes" json:"ztype,omitempty"`
	Pluggable        *bool              `protobuf:"varint,2,req,name=pluggable" json:"pluggable,omitempty"`
	Minfo            *ZInfoManufacturer `protobuf:"bytes,3,req,name=minfo" json:"minfo,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ZinfoPeripheral) Reset()         { *m = ZinfoPeripheral{} }
func (m *ZinfoPeripheral) String() string { return proto.CompactTextString(m) }
func (*ZinfoPeripheral) ProtoMessage()    {}

func (m *ZinfoPeripheral) GetZtype() ZPeripheralTypes {
	if m != nil && m.Ztype != nil {
		return *m.Ztype
	}
	return ZPeripheralTypes_ZpNone
}

func (m *ZinfoPeripheral) GetPluggable() bool {
	if m != nil && m.Pluggable != nil {
		return *m.Pluggable
	}
	return false
}

func (m *ZinfoPeripheral) GetMinfo() *ZInfoManufacturer {
	if m != nil {
		return m.Minfo
	}
	return nil
}

type ZInfoSW struct {
	SwVersion        *string `protobuf:"bytes,2,req,name=swVersion" json:"swVersion,omitempty"`
	SwHash           *string `protobuf:"bytes,3,req,name=swHash" json:"swHash,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ZInfoSW) Reset()         { *m = ZInfoSW{} }
func (m *ZInfoSW) String() string { return proto.CompactTextString(m) }
func (*ZInfoSW) ProtoMessage()    {}

func (m *ZInfoSW) GetSwVersion() string {
	if m != nil && m.SwVersion != nil {
		return *m.SwVersion
	}
	return ""
}

func (m *ZInfoSW) GetSwHash() string {
	if m != nil && m.SwHash != nil {
		return *m.SwHash
	}
	return ""
}

// Base device info, as discovered by Xen (or OS on bare metal)
type ZInfoDevice struct {
	MachineArch      *string            `protobuf:"bytes,4,req,name=machineArch" json:"machineArch,omitempty"`
	CpuArch          *string            `protobuf:"bytes,5,req,name=cpuArch" json:"cpuArch,omitempty"`
	Platform         *string            `protobuf:"bytes,6,req,name=platform" json:"platform,omitempty"`
	Ncpu             *uint32            `protobuf:"varint,7,req,name=ncpu" json:"ncpu,omitempty"`
	Memory           *uint64            `protobuf:"varint,8,req,name=memory" json:"memory,omitempty"`
	Storage          *uint64            `protobuf:"varint,9,req,name=storage" json:"storage,omitempty"`
	Devices          []*ZinfoPeripheral `protobuf:"bytes,10,rep,name=devices" json:"devices,omitempty"`
	Minfo            *ZInfoManufacturer `protobuf:"bytes,11,req,name=minfo" json:"minfo,omitempty"`
	Software         *ZInfoSW           `protobuf:"bytes,12,req,name=software" json:"software,omitempty"`
	Network          []*ZInfoNetwork    `protobuf:"bytes,13,rep,name=network" json:"network,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ZInfoDevice) Reset()         { *m = ZInfoDevice{} }
func (m *ZInfoDevice) String() string { return proto.CompactTextString(m) }
func (*ZInfoDevice) ProtoMessage()    {}

func (m *ZInfoDevice) GetMachineArch() string {
	if m != nil && m.MachineArch != nil {
		return *m.MachineArch
	}
	return ""
}

func (m *ZInfoDevice) GetCpuArch() string {
	if m != nil && m.CpuArch != nil {
		return *m.CpuArch
	}
	return ""
}

func (m *ZInfoDevice) GetPlatform() string {
	if m != nil && m.Platform != nil {
		return *m.Platform
	}
	return ""
}

func (m *ZInfoDevice) GetNcpu() uint32 {
	if m != nil && m.Ncpu != nil {
		return *m.Ncpu
	}
	return 0
}

func (m *ZInfoDevice) GetMemory() uint64 {
	if m != nil && m.Memory != nil {
		return *m.Memory
	}
	return 0
}

func (m *ZInfoDevice) GetStorage() uint64 {
	if m != nil && m.Storage != nil {
		return *m.Storage
	}
	return 0
}

func (m *ZInfoDevice) GetDevices() []*ZinfoPeripheral {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *ZInfoDevice) GetMinfo() *ZInfoManufacturer {
	if m != nil {
		return m.Minfo
	}
	return nil
}

func (m *ZInfoDevice) GetSoftware() *ZInfoSW {
	if m != nil {
		return m.Software
	}
	return nil
}

func (m *ZInfoDevice) GetNetwork() []*ZInfoNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

// Device info from DOM0 perspective, if it exists.
type ZInfoHypervisor struct {
	Ncpu             *uint32  `protobuf:"varint,3,req,name=ncpu" json:"ncpu,omitempty"`
	Memory           *uint64  `protobuf:"varint,4,req,name=memory" json:"memory,omitempty"`
	Storage          *uint64  `protobuf:"varint,5,req,name=storage" json:"storage,omitempty"`
	SwVersion        *ZInfoSW `protobuf:"bytes,6,req,name=swVersion" json:"swVersion,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ZInfoHypervisor) Reset()         { *m = ZInfoHypervisor{} }
func (m *ZInfoHypervisor) String() string { return proto.CompactTextString(m) }
func (*ZInfoHypervisor) ProtoMessage()    {}

func (m *ZInfoHypervisor) GetNcpu() uint32 {
	if m != nil && m.Ncpu != nil {
		return *m.Ncpu
	}
	return 0
}

func (m *ZInfoHypervisor) GetMemory() uint64 {
	if m != nil && m.Memory != nil {
		return *m.Memory
	}
	return 0
}

func (m *ZInfoHypervisor) GetStorage() uint64 {
	if m != nil && m.Storage != nil {
		return *m.Storage
	}
	return 0
}

func (m *ZInfoHypervisor) GetSwVersion() *ZInfoSW {
	if m != nil {
		return m.SwVersion
	}
	return nil
}

type ZInfoApp struct {
	AppID            *string  `protobuf:"bytes,1,req" json:"AppID,omitempty"`
	Ncpu             *uint32  `protobuf:"varint,2,req,name=ncpu" json:"ncpu,omitempty"`
	Memory           *uint32  `protobuf:"varint,3,req,name=memory" json:"memory,omitempty"`
	Storage          *uint32  `protobuf:"varint,4,req,name=storage" json:"storage,omitempty"`
	SwVersion        *ZInfoSW `protobuf:"bytes,5,req,name=swVersion" json:"swVersion,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ZInfoApp) Reset()         { *m = ZInfoApp{} }
func (m *ZInfoApp) String() string { return proto.CompactTextString(m) }
func (*ZInfoApp) ProtoMessage()    {}

func (m *ZInfoApp) GetAppID() string {
	if m != nil && m.AppID != nil {
		return *m.AppID
	}
	return ""
}

func (m *ZInfoApp) GetNcpu() uint32 {
	if m != nil && m.Ncpu != nil {
		return *m.Ncpu
	}
	return 0
}

func (m *ZInfoApp) GetMemory() uint32 {
	if m != nil && m.Memory != nil {
		return *m.Memory
	}
	return 0
}

func (m *ZInfoApp) GetStorage() uint32 {
	if m != nil && m.Storage != nil {
		return *m.Storage
	}
	return 0
}

func (m *ZInfoApp) GetSwVersion() *ZInfoSW {
	if m != nil {
		return m.SwVersion
	}
	return nil
}

type ZInfoMsg struct {
	Ztype            *ZInfoTypes      `protobuf:"varint,1,req,name=ztype,enum=protometrics.ZInfoTypes" json:"ztype,omitempty"`
	DevId            *string          `protobuf:"bytes,2,req,name=devId" json:"devId,omitempty"`
	Dinfo            *ZInfoDevice     `protobuf:"bytes,3,opt,name=dinfo" json:"dinfo,omitempty"`
	Hinfo            *ZInfoHypervisor `protobuf:"bytes,4,opt,name=hinfo" json:"hinfo,omitempty"`
	Ainfo            *ZInfoApp        `protobuf:"bytes,5,opt,name=ainfo" json:"ainfo,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *ZInfoMsg) Reset()         { *m = ZInfoMsg{} }
func (m *ZInfoMsg) String() string { return proto.CompactTextString(m) }
func (*ZInfoMsg) ProtoMessage()    {}

func (m *ZInfoMsg) GetZtype() ZInfoTypes {
	if m != nil && m.Ztype != nil {
		return *m.Ztype
	}
	return ZInfoTypes_ZiNop
}

func (m *ZInfoMsg) GetDevId() string {
	if m != nil && m.DevId != nil {
		return *m.DevId
	}
	return ""
}

func (m *ZInfoMsg) GetDinfo() *ZInfoDevice {
	if m != nil {
		return m.Dinfo
	}
	return nil
}

func (m *ZInfoMsg) GetHinfo() *ZInfoHypervisor {
	if m != nil {
		return m.Hinfo
	}
	return nil
}

func (m *ZInfoMsg) GetAinfo() *ZInfoApp {
	if m != nil {
		return m.Ainfo
	}
	return nil
}

type CpuMetric struct {
	UpTime           *uint32  `protobuf:"varint,2,req,name=upTime" json:"upTime,omitempty"`
	CpuUtilization   *float32 `protobuf:"fixed32,3,req,name=cpuUtilization" json:"cpuUtilization,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CpuMetric) Reset()         { *m = CpuMetric{} }
func (m *CpuMetric) String() string { return proto.CompactTextString(m) }
func (*CpuMetric) ProtoMessage()    {}

func (m *CpuMetric) GetUpTime() uint32 {
	if m != nil && m.UpTime != nil {
		return *m.UpTime
	}
	return 0
}

func (m *CpuMetric) GetCpuUtilization() float32 {
	if m != nil && m.CpuUtilization != nil {
		return *m.CpuUtilization
	}
	return 0
}

type MemoryMetric struct {
	UsedMem          *uint32  `protobuf:"varint,2,req,name=usedMem" json:"usedMem,omitempty"`
	UsedPercentage   *float32 `protobuf:"fixed32,3,req,name=usedPercentage" json:"usedPercentage,omitempty"`
	MaxMem           *uint32  `protobuf:"varint,4,req,name=maxMem" json:"maxMem,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MemoryMetric) Reset()         { *m = MemoryMetric{} }
func (m *MemoryMetric) String() string { return proto.CompactTextString(m) }
func (*MemoryMetric) ProtoMessage()    {}

func (m *MemoryMetric) GetUsedMem() uint32 {
	if m != nil && m.UsedMem != nil {
		return *m.UsedMem
	}
	return 0
}

func (m *MemoryMetric) GetUsedPercentage() float32 {
	if m != nil && m.UsedPercentage != nil {
		return *m.UsedPercentage
	}
	return 0
}

func (m *MemoryMetric) GetMaxMem() uint32 {
	if m != nil && m.MaxMem != nil {
		return *m.MaxMem
	}
	return 0
}

type NetworkMetric struct {
	DevName          *string `protobuf:"bytes,1,req,name=devName" json:"devName,omitempty"`
	TxBytes          *uint64 `protobuf:"varint,2,req,name=txBytes" json:"txBytes,omitempty"`
	RxBytes          *uint64 `protobuf:"varint,3,req,name=rxBytes" json:"rxBytes,omitempty"`
	TxDrops          *uint64 `protobuf:"varint,4,req,name=txDrops" json:"txDrops,omitempty"`
	RxDrops          *uint64 `protobuf:"varint,5,req,name=rxDrops" json:"rxDrops,omitempty"`
	TxRate           *uint64 `protobuf:"varint,6,req,name=txRate" json:"txRate,omitempty"`
	RxRate           *uint64 `protobuf:"varint,7,req,name=rxRate" json:"rxRate,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NetworkMetric) Reset()         { *m = NetworkMetric{} }
func (m *NetworkMetric) String() string { return proto.CompactTextString(m) }
func (*NetworkMetric) ProtoMessage()    {}

func (m *NetworkMetric) GetDevName() string {
	if m != nil && m.DevName != nil {
		return *m.DevName
	}
	return ""
}

func (m *NetworkMetric) GetTxBytes() uint64 {
	if m != nil && m.TxBytes != nil {
		return *m.TxBytes
	}
	return 0
}

func (m *NetworkMetric) GetRxBytes() uint64 {
	if m != nil && m.RxBytes != nil {
		return *m.RxBytes
	}
	return 0
}

func (m *NetworkMetric) GetTxDrops() uint64 {
	if m != nil && m.TxDrops != nil {
		return *m.TxDrops
	}
	return 0
}

func (m *NetworkMetric) GetRxDrops() uint64 {
	if m != nil && m.RxDrops != nil {
		return *m.RxDrops
	}
	return 0
}

func (m *NetworkMetric) GetTxRate() uint64 {
	if m != nil && m.TxRate != nil {
		return *m.TxRate
	}
	return 0
}

func (m *NetworkMetric) GetRxRate() uint64 {
	if m != nil && m.RxRate != nil {
		return *m.RxRate
	}
	return 0
}

type DeviceMetric struct {
	Cpu              *CpuMetric       `protobuf:"bytes,1,req,name=cpu" json:"cpu,omitempty"`
	Memory           *MemoryMetric    `protobuf:"bytes,2,req,name=memory" json:"memory,omitempty"`
	Network          []*NetworkMetric `protobuf:"bytes,3,rep,name=network" json:"network,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DeviceMetric) Reset()         { *m = DeviceMetric{} }
func (m *DeviceMetric) String() string { return proto.CompactTextString(m) }
func (*DeviceMetric) ProtoMessage()    {}

func (m *DeviceMetric) GetCpu() *CpuMetric {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *DeviceMetric) GetMemory() *MemoryMetric {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *DeviceMetric) GetNetwork() []*NetworkMetric {
	if m != nil {
		return m.Network
	}
	return nil
}

type ZMetricMsg struct {
	DevID            *string       `protobuf:"bytes,1,req,name=devID" json:"devID,omitempty"`
	Ztype            *ZmetricTypes `protobuf:"varint,2,req,name=ztype,enum=protometrics.ZmetricTypes" json:"ztype,omitempty"`
	Dm               *DeviceMetric `protobuf:"bytes,3,opt,name=dm" json:"dm,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ZMetricMsg) Reset()         { *m = ZMetricMsg{} }
func (m *ZMetricMsg) String() string { return proto.CompactTextString(m) }
func (*ZMetricMsg) ProtoMessage()    {}

func (m *ZMetricMsg) GetDevID() string {
	if m != nil && m.DevID != nil {
		return *m.DevID
	}
	return ""
}

func (m *ZMetricMsg) GetZtype() ZmetricTypes {
	if m != nil && m.Ztype != nil {
		return *m.Ztype
	}
	return ZmetricTypes_ZmNop
}

func (m *ZMetricMsg) GetDm() *DeviceMetric {
	if m != nil {
		return m.Dm
	}
	return nil
}

func init() {
	proto.RegisterEnum("protometrics.ZInfoTypes", ZInfoTypes_name, ZInfoTypes_value)
	proto.RegisterEnum("protometrics.ZPeripheralTypes", ZPeripheralTypes_name, ZPeripheralTypes_value)
	proto.RegisterEnum("protometrics.ZmetricTypes", ZmetricTypes_name, ZmetricTypes_value)
}
