// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: netconfig.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NetworkConfig struct {
	Id   string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type NetworkType `protobuf:"varint,5,opt,name=type,proto3,enum=NetworkType" json:"type,omitempty"`
	// Types that are valid to be assigned to NetContent:
	//	*NetworkConfig_Nl2
	//	*NetworkConfig_Nlisp
	//	*NetworkConfig_Nv4
	//	*NetworkConfig_Nv6
	NetContent isNetworkConfig_NetContent `protobuf_oneof:"netContent"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptorNetconfig, []int{0} }

type isNetworkConfig_NetContent interface {
	isNetworkConfig_NetContent()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NetworkConfig_Nl2 struct {
	Nl2 *L2Spec `protobuf:"bytes,8,opt,name=nl2,oneof"`
}
type NetworkConfig_Nlisp struct {
	Nlisp *Lispspec `protobuf:"bytes,9,opt,name=nlisp,oneof"`
}
type NetworkConfig_Nv4 struct {
	Nv4 *Ipv4Spec `protobuf:"bytes,10,opt,name=nv4,oneof"`
}
type NetworkConfig_Nv6 struct {
	Nv6 *Ipv6Spec `protobuf:"bytes,11,opt,name=nv6,oneof"`
}

func (*NetworkConfig_Nl2) isNetworkConfig_NetContent()   {}
func (*NetworkConfig_Nlisp) isNetworkConfig_NetContent() {}
func (*NetworkConfig_Nv4) isNetworkConfig_NetContent()   {}
func (*NetworkConfig_Nv6) isNetworkConfig_NetContent()   {}

func (m *NetworkConfig) GetNetContent() isNetworkConfig_NetContent {
	if m != nil {
		return m.NetContent
	}
	return nil
}

func (m *NetworkConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkConfig) GetType() NetworkType {
	if m != nil {
		return m.Type
	}
	return NetworkType_NETWORKTYPENOOP
}

func (m *NetworkConfig) GetNl2() *L2Spec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nl2); ok {
		return x.Nl2
	}
	return nil
}

func (m *NetworkConfig) GetNlisp() *Lispspec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nlisp); ok {
		return x.Nlisp
	}
	return nil
}

func (m *NetworkConfig) GetNv4() *Ipv4Spec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nv4); ok {
		return x.Nv4
	}
	return nil
}

func (m *NetworkConfig) GetNv6() *Ipv6Spec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nv6); ok {
		return x.Nv6
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NetworkConfig_OneofMarshaler, _NetworkConfig_OneofUnmarshaler, _NetworkConfig_OneofSizer, []interface{}{
		(*NetworkConfig_Nl2)(nil),
		(*NetworkConfig_Nlisp)(nil),
		(*NetworkConfig_Nv4)(nil),
		(*NetworkConfig_Nv6)(nil),
	}
}

func _NetworkConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NetworkConfig)
	// netContent
	switch x := m.NetContent.(type) {
	case *NetworkConfig_Nl2:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nl2); err != nil {
			return err
		}
	case *NetworkConfig_Nlisp:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nlisp); err != nil {
			return err
		}
	case *NetworkConfig_Nv4:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nv4); err != nil {
			return err
		}
	case *NetworkConfig_Nv6:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nv6); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NetworkConfig.NetContent has unexpected type %T", x)
	}
	return nil
}

func _NetworkConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NetworkConfig)
	switch tag {
	case 8: // netContent.nl2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L2Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nl2{msg}
		return true, err
	case 9: // netContent.nlisp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Lispspec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nlisp{msg}
		return true, err
	case 10: // netContent.nv4
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ipv4Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nv4{msg}
		return true, err
	case 11: // netContent.nv6
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ipv6Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nv6{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NetworkConfig)
	// netContent
	switch x := m.NetContent.(type) {
	case *NetworkConfig_Nl2:
		s := proto.Size(x.Nl2)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkConfig_Nlisp:
		s := proto.Size(x.Nlisp)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkConfig_Nv4:
		s := proto.Size(x.Nv4)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkConfig_Nv6:
		s := proto.Size(x.Nv6)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NetworkAdapter struct {
	// this is deviceName....
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	NetworkId string `protobuf:"bytes,3,opt,name=networkId,proto3" json:"networkId,omitempty"`
	// eid=lisp, v4=ipv4 etc...
	Addr     string `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// more configuration for getting addr
	Lispsignature string `protobuf:"bytes,6,opt,name=lispsignature,proto3" json:"lispsignature,omitempty"`
	Pemcert       []byte `protobuf:"bytes,7,opt,name=pemcert,proto3" json:"pemcert,omitempty"`
	Pemprivatekey []byte `protobuf:"bytes,8,opt,name=pemprivatekey,proto3" json:"pemprivatekey,omitempty"`
	// firewall
	Acls []*ACE `protobuf:"bytes,40,rep,name=acls" json:"acls,omitempty"`
}

func (m *NetworkAdapter) Reset()                    { *m = NetworkAdapter{} }
func (m *NetworkAdapter) String() string            { return proto.CompactTextString(m) }
func (*NetworkAdapter) ProtoMessage()               {}
func (*NetworkAdapter) Descriptor() ([]byte, []int) { return fileDescriptorNetconfig, []int{1} }

func (m *NetworkAdapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkAdapter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkAdapter) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *NetworkAdapter) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NetworkAdapter) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NetworkAdapter) GetLispsignature() string {
	if m != nil {
		return m.Lispsignature
	}
	return ""
}

func (m *NetworkAdapter) GetPemcert() []byte {
	if m != nil {
		return m.Pemcert
	}
	return nil
}

func (m *NetworkAdapter) GetPemprivatekey() []byte {
	if m != nil {
		return m.Pemprivatekey
	}
	return nil
}

func (m *NetworkAdapter) GetAcls() []*ACE {
	if m != nil {
		return m.Acls
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkConfig)(nil), "NetworkConfig")
	proto.RegisterType((*NetworkAdapter)(nil), "NetworkAdapter")
}
func (m *NetworkConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(m.Type))
	}
	if m.NetContent != nil {
		nn1, err := m.NetContent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *NetworkConfig_Nl2) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Nl2 != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(m.Nl2.Size()))
		n2, err := m.Nl2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *NetworkConfig_Nlisp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Nlisp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(m.Nlisp.Size()))
		n3, err := m.Nlisp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *NetworkConfig_Nv4) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Nv4 != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(m.Nv4.Size()))
		n4, err := m.Nv4.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *NetworkConfig_Nv6) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Nv6 != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(m.Nv6.Size()))
		n5, err := m.Nv6.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *NetworkAdapter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkAdapter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.NetworkId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(len(m.NetworkId)))
		i += copy(dAtA[i:], m.NetworkId)
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.Lispsignature) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(len(m.Lispsignature)))
		i += copy(dAtA[i:], m.Lispsignature)
	}
	if len(m.Pemcert) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(len(m.Pemcert)))
		i += copy(dAtA[i:], m.Pemcert)
	}
	if len(m.Pemprivatekey) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNetconfig(dAtA, i, uint64(len(m.Pemprivatekey)))
		i += copy(dAtA[i:], m.Pemprivatekey)
	}
	if len(m.Acls) > 0 {
		for _, msg := range m.Acls {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintNetconfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintNetconfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NetworkConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetconfig(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovNetconfig(uint64(m.Type))
	}
	if m.NetContent != nil {
		n += m.NetContent.Size()
	}
	return n
}

func (m *NetworkConfig_Nl2) Size() (n int) {
	var l int
	_ = l
	if m.Nl2 != nil {
		l = m.Nl2.Size()
		n += 1 + l + sovNetconfig(uint64(l))
	}
	return n
}
func (m *NetworkConfig_Nlisp) Size() (n int) {
	var l int
	_ = l
	if m.Nlisp != nil {
		l = m.Nlisp.Size()
		n += 1 + l + sovNetconfig(uint64(l))
	}
	return n
}
func (m *NetworkConfig_Nv4) Size() (n int) {
	var l int
	_ = l
	if m.Nv4 != nil {
		l = m.Nv4.Size()
		n += 1 + l + sovNetconfig(uint64(l))
	}
	return n
}
func (m *NetworkConfig_Nv6) Size() (n int) {
	var l int
	_ = l
	if m.Nv6 != nil {
		l = m.Nv6.Size()
		n += 1 + l + sovNetconfig(uint64(l))
	}
	return n
}
func (m *NetworkAdapter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetconfig(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetconfig(uint64(l))
	}
	l = len(m.NetworkId)
	if l > 0 {
		n += 1 + l + sovNetconfig(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovNetconfig(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovNetconfig(uint64(l))
	}
	l = len(m.Lispsignature)
	if l > 0 {
		n += 1 + l + sovNetconfig(uint64(l))
	}
	l = len(m.Pemcert)
	if l > 0 {
		n += 1 + l + sovNetconfig(uint64(l))
	}
	l = len(m.Pemprivatekey)
	if l > 0 {
		n += 1 + l + sovNetconfig(uint64(l))
	}
	if len(m.Acls) > 0 {
		for _, e := range m.Acls {
			l = e.Size()
			n += 2 + l + sovNetconfig(uint64(l))
		}
	}
	return n
}

func sovNetconfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetconfig(x uint64) (n int) {
	return sovNetconfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (NetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nl2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &L2Spec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetContent = &NetworkConfig_Nl2{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nlisp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Lispspec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetContent = &NetworkConfig_Nlisp{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ipv4Spec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetContent = &NetworkConfig_Nv4{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ipv6Spec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetContent = &NetworkConfig_Nv6{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkAdapter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkAdapter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkAdapter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lispsignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lispsignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pemcert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pemcert = append(m.Pemcert[:0], dAtA[iNdEx:postIndex]...)
			if m.Pemcert == nil {
				m.Pemcert = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pemprivatekey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pemprivatekey = append(m.Pemprivatekey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pemprivatekey == nil {
				m.Pemprivatekey = []byte{}
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetconfig
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acls = append(m.Acls, &ACE{})
			if err := m.Acls[len(m.Acls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetconfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetconfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetconfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetconfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetconfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetconfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetconfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("netconfig.proto", fileDescriptorNetconfig) }

var fileDescriptorNetconfig = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0x3f, 0x6f, 0xd4, 0x30,
	0x14, 0xaf, 0x2f, 0xb9, 0xe6, 0xf2, 0x2e, 0x3d, 0x24, 0x4f, 0x56, 0x81, 0x10, 0x2a, 0x86, 0x4c,
	0x1e, 0xc2, 0xe9, 0x06, 0xb6, 0xf6, 0x84, 0x04, 0x0b, 0x43, 0xc4, 0xc4, 0x16, 0xe2, 0xd7, 0x62,
	0x35, 0xb1, 0x2d, 0xc7, 0x97, 0xea, 0x3a, 0xf2, 0x29, 0xf8, 0x48, 0x2c, 0x48, 0x7c, 0x04, 0x74,
	0x7c, 0x11, 0x14, 0x27, 0xdc, 0xa9, 0xdb, 0xfb, 0xfd, 0x79, 0x3f, 0xf9, 0x67, 0x3d, 0x78, 0xa6,
	0xd0, 0xd5, 0x5a, 0xdd, 0xca, 0x3b, 0x6e, 0xac, 0x76, 0xfa, 0x72, 0x71, 0xfb, 0x30, 0x4d, 0xc9,
	0x20, 0xb5, 0x6a, 0x44, 0x57, 0xbf, 0x08, 0x5c, 0x7c, 0x42, 0xf7, 0xa0, 0xed, 0xfd, 0xd6, 0xfb,
	0xe9, 0x0a, 0x66, 0x52, 0x30, 0x92, 0x91, 0x3c, 0x2e, 0x67, 0x52, 0xd0, 0x0c, 0x42, 0xb7, 0x37,
	0xc8, 0xe6, 0x19, 0xc9, 0x57, 0x45, 0xc2, 0x27, 0xf7, 0xe7, 0xbd, 0xc1, 0xd2, 0x2b, 0xf4, 0x39,
	0x04, 0xaa, 0x29, 0xd8, 0x22, 0x23, 0xf9, 0xb2, 0x88, 0x78, 0x53, 0x74, 0x06, 0xeb, 0x0f, 0x67,
	0xe5, 0xc0, 0xd2, 0xd7, 0x30, 0x57, 0x8d, 0xec, 0x0c, 0x8b, 0xbd, 0x1c, 0xf3, 0x01, 0x4c, 0x86,
	0x51, 0xa1, 0x2f, 0x21, 0x50, 0xfd, 0x9a, 0xc1, 0x64, 0x90, 0xa6, 0x5f, 0x1f, 0x13, 0xfa, 0xf5,
	0x28, 0x6f, 0xd8, 0xf2, 0x24, 0x6f, 0x4e, 0xf2, 0xe6, 0x26, 0x01, 0x50, 0xe8, 0xb6, 0x5a, 0x39,
	0x54, 0xee, 0xea, 0xfb, 0x0c, 0x56, 0xd3, 0x0b, 0xaf, 0x45, 0x65, 0x1c, 0x5a, 0x4a, 0x21, 0x54,
	0x55, 0x8b, 0x53, 0x25, 0x3f, 0x4f, 0x25, 0x67, 0xc7, 0x92, 0x2f, 0x20, 0x56, 0xe3, 0xd6, 0x47,
	0xc1, 0x02, 0x4f, 0x9f, 0x88, 0x21, 0xa1, 0x12, 0xc2, 0xb2, 0x70, 0x4c, 0x18, 0x66, 0x7a, 0x09,
	0x8b, 0x6f, 0xba, 0x73, 0x3e, 0x79, 0xee, 0xf9, 0x23, 0xa6, 0x6f, 0xe0, 0xc2, 0xb7, 0x94, 0x77,
	0xaa, 0x72, 0x3b, 0x8b, 0xec, 0xdc, 0x1b, 0x9e, 0x92, 0x94, 0x41, 0x64, 0xb0, 0xad, 0xd1, 0x3a,
	0x16, 0x65, 0x24, 0x4f, 0xca, 0xff, 0x70, 0xd8, 0x37, 0xd8, 0x1a, 0x2b, 0xfb, 0xca, 0xe1, 0x3d,
	0xee, 0xfd, 0xd7, 0x26, 0xe5, 0x53, 0x92, 0x32, 0x08, 0xab, 0xba, 0xe9, 0x58, 0x9e, 0x05, 0xf9,
	0xb2, 0x08, 0xf9, 0xf5, 0xf6, 0x7d, 0xe9, 0x99, 0x9b, 0x77, 0x3f, 0x0f, 0x29, 0xf9, 0x7d, 0x48,
	0xc9, 0x9f, 0x43, 0x4a, 0x7e, 0xfc, 0x4d, 0xcf, 0xe0, 0x55, 0xad, 0x5b, 0xfe, 0x88, 0x02, 0x45,
	0xc5, 0xeb, 0x46, 0xef, 0x04, 0xdf, 0x75, 0x68, 0x7b, 0x59, 0xe3, 0x78, 0x07, 0x5f, 0xa2, 0xc7,
	0xf1, 0x5c, 0xbe, 0x9e, 0x7b, 0xfc, 0xf6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x56, 0x7e,
	0xeb, 0x42, 0x02, 0x00, 0x00,
}
