// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: netcmn.proto

/*
	Package zconfig is a generated protocol buffer package.

	It is generated from these files:
		netcmn.proto

	It has these top-level messages:
		Ipv4Spec
		Ipv6Spec
		NameToEid
		EIDAllocation
		Lispspec
		L2Spec
*/
package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetworkType int32

const (
	NetworkType_NETWORKTYPENOOP NetworkType = 0
	NetworkType_V4              NetworkType = 4
	NetworkType_V6              NetworkType = 6
	NetworkType_L2              NetworkType = 2
	NetworkType_LISP            NetworkType = 10
)

var NetworkType_name = map[int32]string{
	0:  "NETWORKTYPENOOP",
	4:  "V4",
	6:  "V6",
	2:  "L2",
	10: "LISP",
}
var NetworkType_value = map[string]int32{
	"NETWORKTYPENOOP": 0,
	"V4":              4,
	"V6":              6,
	"L2":              2,
	"LISP":            10,
}

func (x NetworkType) String() string {
	return proto.EnumName(NetworkType_name, int32(x))
}
func (NetworkType) EnumDescriptor() ([]byte, []int) { return fileDescriptorNetcmn, []int{0} }

type Ipv4Spec struct {
	Dhcp    bool     `protobuf:"varint,2,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	Subnet  string   `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Mask    string   `protobuf:"bytes,4,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway string   `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Domain  string   `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	Ntp     string   `protobuf:"bytes,7,opt,name=ntp,proto3" json:"ntp,omitempty"`
	Dns     []string `protobuf:"bytes,8,rep,name=dns" json:"dns,omitempty"`
}

func (m *Ipv4Spec) Reset()                    { *m = Ipv4Spec{} }
func (m *Ipv4Spec) String() string            { return proto.CompactTextString(m) }
func (*Ipv4Spec) ProtoMessage()               {}
func (*Ipv4Spec) Descriptor() ([]byte, []int) { return fileDescriptorNetcmn, []int{0} }

func (m *Ipv4Spec) GetDhcp() bool {
	if m != nil {
		return m.Dhcp
	}
	return false
}

func (m *Ipv4Spec) GetSubnet() string {
	if m != nil {
		return m.Subnet
	}
	return ""
}

func (m *Ipv4Spec) GetMask() string {
	if m != nil {
		return m.Mask
	}
	return ""
}

func (m *Ipv4Spec) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *Ipv4Spec) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Ipv4Spec) GetNtp() string {
	if m != nil {
		return m.Ntp
	}
	return ""
}

func (m *Ipv4Spec) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

type Ipv6Spec struct {
	Dhcp    bool     `protobuf:"varint,2,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	Subnet  string   `protobuf:"bytes,3,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Mask    string   `protobuf:"bytes,4,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway string   `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Domain  string   `protobuf:"bytes,6,opt,name=domain,proto3" json:"domain,omitempty"`
	Ntp     string   `protobuf:"bytes,7,opt,name=ntp,proto3" json:"ntp,omitempty"`
	Dns     []string `protobuf:"bytes,8,rep,name=dns" json:"dns,omitempty"`
}

func (m *Ipv6Spec) Reset()                    { *m = Ipv6Spec{} }
func (m *Ipv6Spec) String() string            { return proto.CompactTextString(m) }
func (*Ipv6Spec) ProtoMessage()               {}
func (*Ipv6Spec) Descriptor() ([]byte, []int) { return fileDescriptorNetcmn, []int{1} }

func (m *Ipv6Spec) GetDhcp() bool {
	if m != nil {
		return m.Dhcp
	}
	return false
}

func (m *Ipv6Spec) GetSubnet() string {
	if m != nil {
		return m.Subnet
	}
	return ""
}

func (m *Ipv6Spec) GetMask() string {
	if m != nil {
		return m.Mask
	}
	return ""
}

func (m *Ipv6Spec) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *Ipv6Spec) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Ipv6Spec) GetNtp() string {
	if m != nil {
		return m.Ntp
	}
	return ""
}

func (m *Ipv6Spec) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

type NameToEid struct {
	Hostname string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Eids     []string `protobuf:"bytes,2,rep,name=eids" json:"eids,omitempty"`
}

func (m *NameToEid) Reset()                    { *m = NameToEid{} }
func (m *NameToEid) String() string            { return proto.CompactTextString(m) }
func (*NameToEid) ProtoMessage()               {}
func (*NameToEid) Descriptor() ([]byte, []int) { return fileDescriptorNetcmn, []int{2} }

func (m *NameToEid) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NameToEid) GetEids() []string {
	if m != nil {
		return m.Eids
	}
	return nil
}

type EIDAllocation struct {
	Allocate            bool   `protobuf:"varint,1,opt,name=allocate,proto3" json:"allocate,omitempty"`
	Exportprivate       bool   `protobuf:"varint,2,opt,name=exportprivate,proto3" json:"exportprivate,omitempty"`
	Allocationprefix    []byte `protobuf:"bytes,3,opt,name=allocationprefix,proto3" json:"allocationprefix,omitempty"`
	Allocationprefixlen uint32 `protobuf:"varint,4,opt,name=allocationprefixlen,proto3" json:"allocationprefixlen,omitempty"`
}

func (m *EIDAllocation) Reset()                    { *m = EIDAllocation{} }
func (m *EIDAllocation) String() string            { return proto.CompactTextString(m) }
func (*EIDAllocation) ProtoMessage()               {}
func (*EIDAllocation) Descriptor() ([]byte, []int) { return fileDescriptorNetcmn, []int{3} }

func (m *EIDAllocation) GetAllocate() bool {
	if m != nil {
		return m.Allocate
	}
	return false
}

func (m *EIDAllocation) GetExportprivate() bool {
	if m != nil {
		return m.Exportprivate
	}
	return false
}

func (m *EIDAllocation) GetAllocationprefix() []byte {
	if m != nil {
		return m.Allocationprefix
	}
	return nil
}

func (m *EIDAllocation) GetAllocationprefixlen() uint32 {
	if m != nil {
		return m.Allocationprefixlen
	}
	return 0
}

type Lispspec struct {
	Iid      uint32         `protobuf:"varint,1,opt,name=iid,proto3" json:"iid,omitempty"`
	Eidalloc *EIDAllocation `protobuf:"bytes,2,opt,name=eidalloc" json:"eidalloc,omitempty"`
	Nmtoeid  []*NameToEid   `protobuf:"bytes,3,rep,name=nmtoeid" json:"nmtoeid,omitempty"`
}

func (m *Lispspec) Reset()                    { *m = Lispspec{} }
func (m *Lispspec) String() string            { return proto.CompactTextString(m) }
func (*Lispspec) ProtoMessage()               {}
func (*Lispspec) Descriptor() ([]byte, []int) { return fileDescriptorNetcmn, []int{4} }

func (m *Lispspec) GetIid() uint32 {
	if m != nil {
		return m.Iid
	}
	return 0
}

func (m *Lispspec) GetEidalloc() *EIDAllocation {
	if m != nil {
		return m.Eidalloc
	}
	return nil
}

func (m *Lispspec) GetNmtoeid() []*NameToEid {
	if m != nil {
		return m.Nmtoeid
	}
	return nil
}

type L2Spec struct {
}

func (m *L2Spec) Reset()                    { *m = L2Spec{} }
func (m *L2Spec) String() string            { return proto.CompactTextString(m) }
func (*L2Spec) ProtoMessage()               {}
func (*L2Spec) Descriptor() ([]byte, []int) { return fileDescriptorNetcmn, []int{5} }

func init() {
	proto.RegisterType((*Ipv4Spec)(nil), "ipv4spec")
	proto.RegisterType((*Ipv6Spec)(nil), "ipv6spec")
	proto.RegisterType((*NameToEid)(nil), "NameToEid")
	proto.RegisterType((*EIDAllocation)(nil), "EIDAllocation")
	proto.RegisterType((*Lispspec)(nil), "lispspec")
	proto.RegisterType((*L2Spec)(nil), "l2spec")
	proto.RegisterEnum("NetworkType", NetworkType_name, NetworkType_value)
}
func (m *Ipv4Spec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ipv4Spec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dhcp {
		dAtA[i] = 0x10
		i++
		if m.Dhcp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Subnet) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Subnet)))
		i += copy(dAtA[i:], m.Subnet)
	}
	if len(m.Mask) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Mask)))
		i += copy(dAtA[i:], m.Mask)
	}
	if len(m.Gateway) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Gateway)))
		i += copy(dAtA[i:], m.Gateway)
	}
	if len(m.Domain) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	if len(m.Ntp) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Ntp)))
		i += copy(dAtA[i:], m.Ntp)
	}
	if len(m.Dns) > 0 {
		for _, s := range m.Dns {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Ipv6Spec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ipv6Spec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dhcp {
		dAtA[i] = 0x10
		i++
		if m.Dhcp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Subnet) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Subnet)))
		i += copy(dAtA[i:], m.Subnet)
	}
	if len(m.Mask) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Mask)))
		i += copy(dAtA[i:], m.Mask)
	}
	if len(m.Gateway) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Gateway)))
		i += copy(dAtA[i:], m.Gateway)
	}
	if len(m.Domain) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Domain)))
		i += copy(dAtA[i:], m.Domain)
	}
	if len(m.Ntp) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Ntp)))
		i += copy(dAtA[i:], m.Ntp)
	}
	if len(m.Dns) > 0 {
		for _, s := range m.Dns {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *NameToEid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameToEid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hostname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.Eids) > 0 {
		for _, s := range m.Eids {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *EIDAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EIDAllocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Allocate {
		dAtA[i] = 0x8
		i++
		if m.Allocate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Exportprivate {
		dAtA[i] = 0x10
		i++
		if m.Exportprivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Allocationprefix) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(len(m.Allocationprefix)))
		i += copy(dAtA[i:], m.Allocationprefix)
	}
	if m.Allocationprefixlen != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(m.Allocationprefixlen))
	}
	return i, nil
}

func (m *Lispspec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lispspec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Iid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(m.Iid))
	}
	if m.Eidalloc != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetcmn(dAtA, i, uint64(m.Eidalloc.Size()))
		n1, err := m.Eidalloc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Nmtoeid) > 0 {
		for _, msg := range m.Nmtoeid {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintNetcmn(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *L2Spec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *L2Spec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintNetcmn(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Ipv4Spec) Size() (n int) {
	var l int
	_ = l
	if m.Dhcp {
		n += 2
	}
	l = len(m.Subnet)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	l = len(m.Mask)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	l = len(m.Ntp)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	if len(m.Dns) > 0 {
		for _, s := range m.Dns {
			l = len(s)
			n += 1 + l + sovNetcmn(uint64(l))
		}
	}
	return n
}

func (m *Ipv6Spec) Size() (n int) {
	var l int
	_ = l
	if m.Dhcp {
		n += 2
	}
	l = len(m.Subnet)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	l = len(m.Mask)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	l = len(m.Domain)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	l = len(m.Ntp)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	if len(m.Dns) > 0 {
		for _, s := range m.Dns {
			l = len(s)
			n += 1 + l + sovNetcmn(uint64(l))
		}
	}
	return n
}

func (m *NameToEid) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	if len(m.Eids) > 0 {
		for _, s := range m.Eids {
			l = len(s)
			n += 1 + l + sovNetcmn(uint64(l))
		}
	}
	return n
}

func (m *EIDAllocation) Size() (n int) {
	var l int
	_ = l
	if m.Allocate {
		n += 2
	}
	if m.Exportprivate {
		n += 2
	}
	l = len(m.Allocationprefix)
	if l > 0 {
		n += 1 + l + sovNetcmn(uint64(l))
	}
	if m.Allocationprefixlen != 0 {
		n += 1 + sovNetcmn(uint64(m.Allocationprefixlen))
	}
	return n
}

func (m *Lispspec) Size() (n int) {
	var l int
	_ = l
	if m.Iid != 0 {
		n += 1 + sovNetcmn(uint64(m.Iid))
	}
	if m.Eidalloc != nil {
		l = m.Eidalloc.Size()
		n += 1 + l + sovNetcmn(uint64(l))
	}
	if len(m.Nmtoeid) > 0 {
		for _, e := range m.Nmtoeid {
			l = e.Size()
			n += 1 + l + sovNetcmn(uint64(l))
		}
	}
	return n
}

func (m *L2Spec) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovNetcmn(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetcmn(x uint64) (n int) {
	return sovNetcmn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ipv4Spec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetcmn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv4spec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv4spec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dhcp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dhcp = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ntp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ntp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dns = append(m.Dns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetcmn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetcmn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ipv6Spec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetcmn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ipv6spec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ipv6spec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dhcp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dhcp = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mask = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ntp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ntp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dns = append(m.Dns, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetcmn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetcmn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameToEid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetcmn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameToEid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameToEid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Eids = append(m.Eids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetcmn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetcmn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EIDAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetcmn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EIDAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EIDAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Allocate = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exportprivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exportprivate = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocationprefix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Allocationprefix = append(m.Allocationprefix[:0], dAtA[iNdEx:postIndex]...)
			if m.Allocationprefix == nil {
				m.Allocationprefix = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Allocationprefixlen", wireType)
			}
			m.Allocationprefixlen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Allocationprefixlen |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetcmn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetcmn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lispspec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetcmn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: lispspec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: lispspec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iid", wireType)
			}
			m.Iid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eidalloc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Eidalloc == nil {
				m.Eidalloc = &EIDAllocation{}
			}
			if err := m.Eidalloc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nmtoeid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetcmn
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nmtoeid = append(m.Nmtoeid, &NameToEid{})
			if err := m.Nmtoeid[len(m.Nmtoeid)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetcmn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetcmn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *L2Spec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetcmn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: l2spec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: l2spec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetcmn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetcmn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetcmn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetcmn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetcmn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetcmn
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetcmn
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetcmn(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetcmn = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetcmn   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("netcmn.proto", fileDescriptorNetcmn) }

var fileDescriptorNetcmn = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0x4d, 0x6e, 0xd3, 0x40,
	0x18, 0xad, 0xe3, 0xe0, 0xb8, 0x5f, 0x1a, 0xb0, 0xa6, 0x12, 0x1a, 0xb1, 0x08, 0x51, 0xd4, 0x45,
	0x94, 0x85, 0x85, 0x42, 0xd5, 0x05, 0xac, 0x40, 0xcd, 0xa2, 0xa2, 0x4a, 0x22, 0x13, 0x81, 0x60,
	0x37, 0xf5, 0x7c, 0x6d, 0x47, 0xb5, 0x67, 0x46, 0x9e, 0x49, 0xfa, 0x73, 0x12, 0x96, 0xdc, 0x80,
	0x6b, 0xb0, 0xe4, 0x08, 0x28, 0x5c, 0x04, 0xcd, 0x98, 0x58, 0x2a, 0x70, 0x80, 0xae, 0xe6, 0xbd,
	0xf7, 0xcd, 0xf7, 0xfc, 0xfc, 0x2c, 0xc3, 0x9e, 0x44, 0x9b, 0x97, 0x32, 0xd5, 0x95, 0xb2, 0x6a,
	0xf8, 0x35, 0x80, 0x58, 0xe8, 0xf5, 0xa1, 0xd1, 0x98, 0x13, 0x02, 0x6d, 0x7e, 0x99, 0x6b, 0xda,
	0x1a, 0x04, 0xa3, 0x38, 0xf3, 0x98, 0x3c, 0x85, 0xc8, 0xac, 0xce, 0x24, 0x5a, 0x1a, 0x0e, 0x82,
	0xd1, 0x6e, 0xf6, 0x87, 0xb9, 0xbb, 0x25, 0x33, 0x57, 0xb4, 0xed, 0x55, 0x8f, 0x09, 0x85, 0xce,
	0x05, 0xb3, 0x78, 0xcd, 0x6e, 0xe9, 0x23, 0x2f, 0x6f, 0xa9, 0x73, 0xe1, 0xaa, 0x64, 0x42, 0xd2,
	0xa8, 0x76, 0xa9, 0x19, 0x49, 0x20, 0x94, 0x56, 0xd3, 0x8e, 0x17, 0x1d, 0x74, 0x0a, 0x97, 0x86,
	0xc6, 0x83, 0xd0, 0x29, 0x5c, 0x9a, 0x6d, 0xc4, 0xa3, 0x07, 0x1c, 0xf1, 0x35, 0xec, 0xce, 0x58,
	0x89, 0x4b, 0x35, 0x15, 0x9c, 0x3c, 0x83, 0xf8, 0x52, 0x19, 0x2b, 0x59, 0x89, 0x34, 0xf0, 0x5b,
	0x0d, 0x77, 0x91, 0x50, 0x70, 0x43, 0x5b, 0x7e, 0xd7, 0xe3, 0xe1, 0xb7, 0x00, 0x7a, 0xd3, 0x93,
	0xe3, 0x37, 0x45, 0xa1, 0x72, 0x66, 0x85, 0x92, 0xce, 0x81, 0xd5, 0xac, 0x76, 0x88, 0xb3, 0x86,
	0x93, 0x03, 0xe8, 0xe1, 0x8d, 0x56, 0x95, 0xd5, 0x95, 0x58, 0xbb, 0x0b, 0x75, 0x13, 0xf7, 0x45,
	0x32, 0x86, 0x84, 0x35, 0x7e, 0xba, 0xc2, 0x73, 0x71, 0xe3, 0xcb, 0xd9, 0xcb, 0xfe, 0xd1, 0xc9,
	0x0b, 0xd8, 0xff, 0x5b, 0x2b, 0x50, 0xfa, 0xd6, 0x7a, 0xd9, 0xff, 0x46, 0x43, 0x09, 0x71, 0x21,
	0x8c, 0xf6, 0x1f, 0x24, 0x81, 0x50, 0x08, 0xee, 0x63, 0xf6, 0x32, 0x07, 0xc9, 0x18, 0x62, 0x14,
	0xdc, 0xef, 0xf9, 0x70, 0xdd, 0xc9, 0xe3, 0xf4, 0xde, 0xfb, 0x65, 0xcd, 0x9c, 0x1c, 0x40, 0x47,
	0x96, 0x56, 0xa1, 0xe0, 0x34, 0x1c, 0x84, 0xa3, 0xee, 0x04, 0xd2, 0xa6, 0xc8, 0x6c, 0x3b, 0x1a,
	0xc6, 0x10, 0x15, 0x13, 0xf7, 0xb4, 0xf1, 0x31, 0x74, 0x67, 0x68, 0xaf, 0x55, 0x75, 0xb5, 0xbc,
	0xd5, 0x48, 0xf6, 0xe1, 0xc9, 0x6c, 0xba, 0xfc, 0x38, 0xcf, 0xde, 0x2d, 0x3f, 0x2d, 0xa6, 0xb3,
	0xf9, 0x7c, 0x91, 0xec, 0x90, 0x08, 0x5a, 0x1f, 0x0e, 0x93, 0xb6, 0x3f, 0x8f, 0x92, 0xc8, 0x9d,
	0xa7, 0x93, 0xa4, 0x45, 0x62, 0x68, 0x9f, 0x9e, 0xbc, 0x5f, 0x24, 0xf0, 0xf6, 0xd5, 0xf7, 0x4d,
	0x3f, 0xf8, 0xb1, 0xe9, 0x07, 0x3f, 0x37, 0xfd, 0xe0, 0xcb, 0xaf, 0xfe, 0x0e, 0x3c, 0xcf, 0x55,
	0x99, 0xde, 0x21, 0x47, 0xce, 0xd2, 0xbc, 0x50, 0x2b, 0x9e, 0xae, 0x0c, 0x56, 0x6b, 0x91, 0x63,
	0xfd, 0x9f, 0x7c, 0xee, 0xdc, 0xe5, 0x4a, 0x9e, 0x8b, 0x8b, 0xb3, 0xc8, 0xf3, 0x97, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xb5, 0x4b, 0x0b, 0xd9, 0x47, 0x03, 0x00, 0x00,
}
