// Code generated by protoc-gen-go. DO NOT EDIT.
// source: zmet.proto

/*
Package zmet is a generated protocol buffer package.

It is generated from these files:
	zmet.proto
	zregister.proto

It has these top-level messages:
	ZInfoManufacturer
	ZInfoNetwork
	ZinfoPeripheral
	ZInfoSW
	ZInfoDevice
	ZInfoHypervisor
	ZInfoApp
	ZInfoMsg
	CpuMetric
	MemoryMetric
	NetworkMetric
	DeviceMetric
	ZMetricMsg
	ZRegisterResp
	ZRegisterMsg
*/
package zmet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// Broadly there are two types
// Info : information that is discovered/rarely changes
// Metrics: information that gets updated periodically
// Protobuf definitions in this file follow the convention.
type ZInfoTypes int32

const (
	ZInfoTypes_ZiNop        ZInfoTypes = 0
	ZInfoTypes_ZiDevice     ZInfoTypes = 1
	ZInfoTypes_ZiHypervisor ZInfoTypes = 2
	ZInfoTypes_ZiApp        ZInfoTypes = 3
)

var ZInfoTypes_name = map[int32]string{
	0: "ZiNop",
	1: "ZiDevice",
	2: "ZiHypervisor",
	3: "ZiApp",
}
var ZInfoTypes_value = map[string]int32{
	"ZiNop":        0,
	"ZiDevice":     1,
	"ZiHypervisor": 2,
	"ZiApp":        3,
}

func (x ZInfoTypes) String() string {
	return proto.EnumName(ZInfoTypes_name, int32(x))
}
func (ZInfoTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ZPeripheralTypes int32

const (
	ZPeripheralTypes_ZpNone    ZPeripheralTypes = 0
	ZPeripheralTypes_ZpStorage ZPeripheralTypes = 1
	ZPeripheralTypes_ZpNetwork ZPeripheralTypes = 2
)

var ZPeripheralTypes_name = map[int32]string{
	0: "ZpNone",
	1: "ZpStorage",
	2: "ZpNetwork",
}
var ZPeripheralTypes_value = map[string]int32{
	"ZpNone":    0,
	"ZpStorage": 1,
	"ZpNetwork": 2,
}

func (x ZPeripheralTypes) String() string {
	return proto.EnumName(ZPeripheralTypes_name, int32(x))
}
func (ZPeripheralTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ZmetricTypes int32

const (
	ZmetricTypes_ZmNop    ZmetricTypes = 0
	ZmetricTypes_ZmDevice ZmetricTypes = 1
	ZmetricTypes_ZmApp    ZmetricTypes = 3
)

var ZmetricTypes_name = map[int32]string{
	0: "ZmNop",
	1: "ZmDevice",
	3: "ZmApp",
}
var ZmetricTypes_value = map[string]int32{
	"ZmNop":    0,
	"ZmDevice": 1,
	"ZmApp":    3,
}

func (x ZmetricTypes) String() string {
	return proto.EnumName(ZmetricTypes_name, int32(x))
}
func (ZmetricTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Manufacturing info, product name, model, version etc.
type ZInfoManufacturer struct {
	Manufacturer string `protobuf:"bytes,1,opt,name=manufacturer" json:"manufacturer,omitempty"`
	ProductName  string `protobuf:"bytes,2,opt,name=productName" json:"productName,omitempty"`
	Version      string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	SerialNumber string `protobuf:"bytes,4,opt,name=serialNumber" json:"serialNumber,omitempty"`
	UUID         string `protobuf:"bytes,5,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
}

func (m *ZInfoManufacturer) Reset()                    { *m = ZInfoManufacturer{} }
func (m *ZInfoManufacturer) String() string            { return proto.CompactTextString(m) }
func (*ZInfoManufacturer) ProtoMessage()               {}
func (*ZInfoManufacturer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ZInfoManufacturer) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *ZInfoManufacturer) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *ZInfoManufacturer) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ZInfoManufacturer) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *ZInfoManufacturer) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type ZInfoNetwork struct {
	IPAddr  string `protobuf:"bytes,1,opt,name=IPAddr,json=iPAddr" json:"IPAddr,omitempty"`
	GwAddr  string `protobuf:"bytes,2,opt,name=gwAddr" json:"gwAddr,omitempty"`
	MacAddr string `protobuf:"bytes,3,opt,name=macAddr" json:"macAddr,omitempty"`
	DevName string `protobuf:"bytes,4,opt,name=devName" json:"devName,omitempty"`
}

func (m *ZInfoNetwork) Reset()                    { *m = ZInfoNetwork{} }
func (m *ZInfoNetwork) String() string            { return proto.CompactTextString(m) }
func (*ZInfoNetwork) ProtoMessage()               {}
func (*ZInfoNetwork) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ZInfoNetwork) GetIPAddr() string {
	if m != nil {
		return m.IPAddr
	}
	return ""
}

func (m *ZInfoNetwork) GetGwAddr() string {
	if m != nil {
		return m.GwAddr
	}
	return ""
}

func (m *ZInfoNetwork) GetMacAddr() string {
	if m != nil {
		return m.MacAddr
	}
	return ""
}

func (m *ZInfoNetwork) GetDevName() string {
	if m != nil {
		return m.DevName
	}
	return ""
}

type ZinfoPeripheral struct {
	Ztype     ZPeripheralTypes   `protobuf:"varint,1,opt,name=ztype,enum=ZPeripheralTypes" json:"ztype,omitempty"`
	Pluggable bool               `protobuf:"varint,2,opt,name=pluggable" json:"pluggable,omitempty"`
	Minfo     *ZInfoManufacturer `protobuf:"bytes,3,opt,name=minfo" json:"minfo,omitempty"`
}

func (m *ZinfoPeripheral) Reset()                    { *m = ZinfoPeripheral{} }
func (m *ZinfoPeripheral) String() string            { return proto.CompactTextString(m) }
func (*ZinfoPeripheral) ProtoMessage()               {}
func (*ZinfoPeripheral) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ZinfoPeripheral) GetZtype() ZPeripheralTypes {
	if m != nil {
		return m.Ztype
	}
	return ZPeripheralTypes_ZpNone
}

func (m *ZinfoPeripheral) GetPluggable() bool {
	if m != nil {
		return m.Pluggable
	}
	return false
}

func (m *ZinfoPeripheral) GetMinfo() *ZInfoManufacturer {
	if m != nil {
		return m.Minfo
	}
	return nil
}

type ZInfoSW struct {
	SwVersion string `protobuf:"bytes,2,opt,name=swVersion" json:"swVersion,omitempty"`
	SwHash    string `protobuf:"bytes,3,opt,name=swHash" json:"swHash,omitempty"`
}

func (m *ZInfoSW) Reset()                    { *m = ZInfoSW{} }
func (m *ZInfoSW) String() string            { return proto.CompactTextString(m) }
func (*ZInfoSW) ProtoMessage()               {}
func (*ZInfoSW) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ZInfoSW) GetSwVersion() string {
	if m != nil {
		return m.SwVersion
	}
	return ""
}

func (m *ZInfoSW) GetSwHash() string {
	if m != nil {
		return m.SwHash
	}
	return ""
}

// Base device info, as discovered by Xen (or OS on bare metal)
type ZInfoDevice struct {
	MachineArch string             `protobuf:"bytes,4,opt,name=machineArch" json:"machineArch,omitempty"`
	CpuArch     string             `protobuf:"bytes,5,opt,name=cpuArch" json:"cpuArch,omitempty"`
	Platform    string             `protobuf:"bytes,6,opt,name=platform" json:"platform,omitempty"`
	Ncpu        uint32             `protobuf:"varint,7,opt,name=ncpu" json:"ncpu,omitempty"`
	Memory      uint64             `protobuf:"varint,8,opt,name=memory" json:"memory,omitempty"`
	Storage     uint64             `protobuf:"varint,9,opt,name=storage" json:"storage,omitempty"`
	Devices     []*ZinfoPeripheral `protobuf:"bytes,10,rep,name=devices" json:"devices,omitempty"`
	Minfo       *ZInfoManufacturer `protobuf:"bytes,11,opt,name=minfo" json:"minfo,omitempty"`
	Software    *ZInfoSW           `protobuf:"bytes,12,opt,name=software" json:"software,omitempty"`
	Network     []*ZInfoNetwork    `protobuf:"bytes,13,rep,name=network" json:"network,omitempty"`
}

func (m *ZInfoDevice) Reset()                    { *m = ZInfoDevice{} }
func (m *ZInfoDevice) String() string            { return proto.CompactTextString(m) }
func (*ZInfoDevice) ProtoMessage()               {}
func (*ZInfoDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ZInfoDevice) GetMachineArch() string {
	if m != nil {
		return m.MachineArch
	}
	return ""
}

func (m *ZInfoDevice) GetCpuArch() string {
	if m != nil {
		return m.CpuArch
	}
	return ""
}

func (m *ZInfoDevice) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ZInfoDevice) GetNcpu() uint32 {
	if m != nil {
		return m.Ncpu
	}
	return 0
}

func (m *ZInfoDevice) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ZInfoDevice) GetStorage() uint64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *ZInfoDevice) GetDevices() []*ZinfoPeripheral {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *ZInfoDevice) GetMinfo() *ZInfoManufacturer {
	if m != nil {
		return m.Minfo
	}
	return nil
}

func (m *ZInfoDevice) GetSoftware() *ZInfoSW {
	if m != nil {
		return m.Software
	}
	return nil
}

func (m *ZInfoDevice) GetNetwork() []*ZInfoNetwork {
	if m != nil {
		return m.Network
	}
	return nil
}

// Device info from DOM0 perspective, if it exists.
type ZInfoHypervisor struct {
	Ncpu     uint32   `protobuf:"varint,3,opt,name=ncpu" json:"ncpu,omitempty"`
	Memory   uint64   `protobuf:"varint,4,opt,name=memory" json:"memory,omitempty"`
	Storage  uint64   `protobuf:"varint,5,opt,name=storage" json:"storage,omitempty"`
	Software *ZInfoSW `protobuf:"bytes,6,opt,name=software" json:"software,omitempty"`
}

func (m *ZInfoHypervisor) Reset()                    { *m = ZInfoHypervisor{} }
func (m *ZInfoHypervisor) String() string            { return proto.CompactTextString(m) }
func (*ZInfoHypervisor) ProtoMessage()               {}
func (*ZInfoHypervisor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ZInfoHypervisor) GetNcpu() uint32 {
	if m != nil {
		return m.Ncpu
	}
	return 0
}

func (m *ZInfoHypervisor) GetMemory() uint64 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ZInfoHypervisor) GetStorage() uint64 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *ZInfoHypervisor) GetSoftware() *ZInfoSW {
	if m != nil {
		return m.Software
	}
	return nil
}

type ZInfoApp struct {
	AppID    string   `protobuf:"bytes,1,opt,name=AppID,json=appID" json:"AppID,omitempty"`
	Ncpu     uint32   `protobuf:"varint,2,opt,name=ncpu" json:"ncpu,omitempty"`
	Memory   uint32   `protobuf:"varint,3,opt,name=memory" json:"memory,omitempty"`
	Storage  uint32   `protobuf:"varint,4,opt,name=storage" json:"storage,omitempty"`
	Software *ZInfoSW `protobuf:"bytes,5,opt,name=software" json:"software,omitempty"`
}

func (m *ZInfoApp) Reset()                    { *m = ZInfoApp{} }
func (m *ZInfoApp) String() string            { return proto.CompactTextString(m) }
func (*ZInfoApp) ProtoMessage()               {}
func (*ZInfoApp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ZInfoApp) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *ZInfoApp) GetNcpu() uint32 {
	if m != nil {
		return m.Ncpu
	}
	return 0
}

func (m *ZInfoApp) GetMemory() uint32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ZInfoApp) GetStorage() uint32 {
	if m != nil {
		return m.Storage
	}
	return 0
}

func (m *ZInfoApp) GetSoftware() *ZInfoSW {
	if m != nil {
		return m.Software
	}
	return nil
}

type ZInfoMsg struct {
	Ztype ZInfoTypes `protobuf:"varint,1,opt,name=ztype,enum=ZInfoTypes" json:"ztype,omitempty"`
	DevId string     `protobuf:"bytes,2,opt,name=devId" json:"devId,omitempty"`
	// Types that are valid to be assigned to InfoContent:
	//	*ZInfoMsg_Dinfo
	//	*ZInfoMsg_Hinfo
	//	*ZInfoMsg_Ainfo
	InfoContent isZInfoMsg_InfoContent `protobuf_oneof:"InfoContent"`
}

func (m *ZInfoMsg) Reset()                    { *m = ZInfoMsg{} }
func (m *ZInfoMsg) String() string            { return proto.CompactTextString(m) }
func (*ZInfoMsg) ProtoMessage()               {}
func (*ZInfoMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isZInfoMsg_InfoContent interface {
	isZInfoMsg_InfoContent()
}

type ZInfoMsg_Dinfo struct {
	Dinfo *ZInfoDevice `protobuf:"bytes,3,opt,name=dinfo,oneof"`
}
type ZInfoMsg_Hinfo struct {
	Hinfo *ZInfoHypervisor `protobuf:"bytes,4,opt,name=hinfo,oneof"`
}
type ZInfoMsg_Ainfo struct {
	Ainfo *ZInfoApp `protobuf:"bytes,5,opt,name=ainfo,oneof"`
}

func (*ZInfoMsg_Dinfo) isZInfoMsg_InfoContent() {}
func (*ZInfoMsg_Hinfo) isZInfoMsg_InfoContent() {}
func (*ZInfoMsg_Ainfo) isZInfoMsg_InfoContent() {}

func (m *ZInfoMsg) GetInfoContent() isZInfoMsg_InfoContent {
	if m != nil {
		return m.InfoContent
	}
	return nil
}

func (m *ZInfoMsg) GetZtype() ZInfoTypes {
	if m != nil {
		return m.Ztype
	}
	return ZInfoTypes_ZiNop
}

func (m *ZInfoMsg) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *ZInfoMsg) GetDinfo() *ZInfoDevice {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Dinfo); ok {
		return x.Dinfo
	}
	return nil
}

func (m *ZInfoMsg) GetHinfo() *ZInfoHypervisor {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Hinfo); ok {
		return x.Hinfo
	}
	return nil
}

func (m *ZInfoMsg) GetAinfo() *ZInfoApp {
	if x, ok := m.GetInfoContent().(*ZInfoMsg_Ainfo); ok {
		return x.Ainfo
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ZInfoMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ZInfoMsg_OneofMarshaler, _ZInfoMsg_OneofUnmarshaler, _ZInfoMsg_OneofSizer, []interface{}{
		(*ZInfoMsg_Dinfo)(nil),
		(*ZInfoMsg_Hinfo)(nil),
		(*ZInfoMsg_Ainfo)(nil),
	}
}

func _ZInfoMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ZInfoMsg)
	// InfoContent
	switch x := m.InfoContent.(type) {
	case *ZInfoMsg_Dinfo:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dinfo); err != nil {
			return err
		}
	case *ZInfoMsg_Hinfo:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hinfo); err != nil {
			return err
		}
	case *ZInfoMsg_Ainfo:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ainfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ZInfoMsg.InfoContent has unexpected type %T", x)
	}
	return nil
}

func _ZInfoMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ZInfoMsg)
	switch tag {
	case 3: // InfoContent.dinfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZInfoDevice)
		err := b.DecodeMessage(msg)
		m.InfoContent = &ZInfoMsg_Dinfo{msg}
		return true, err
	case 4: // InfoContent.hinfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZInfoHypervisor)
		err := b.DecodeMessage(msg)
		m.InfoContent = &ZInfoMsg_Hinfo{msg}
		return true, err
	case 5: // InfoContent.ainfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZInfoApp)
		err := b.DecodeMessage(msg)
		m.InfoContent = &ZInfoMsg_Ainfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ZInfoMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ZInfoMsg)
	// InfoContent
	switch x := m.InfoContent.(type) {
	case *ZInfoMsg_Dinfo:
		s := proto.Size(x.Dinfo)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZInfoMsg_Hinfo:
		s := proto.Size(x.Hinfo)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ZInfoMsg_Ainfo:
		s := proto.Size(x.Ainfo)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CpuMetric struct {
	UpTime         uint32  `protobuf:"varint,2,opt,name=upTime" json:"upTime,omitempty"`
	CpuUtilization float64 `protobuf:"fixed64,3,opt,name=cpuUtilization" json:"cpuUtilization,omitempty"`
	Usr            float64 `protobuf:"fixed64,4,opt,name=usr" json:"usr,omitempty"`
	Nice           float64 `protobuf:"fixed64,5,opt,name=nice" json:"nice,omitempty"`
	System         float64 `protobuf:"fixed64,6,opt,name=system" json:"system,omitempty"`
	Io             float64 `protobuf:"fixed64,7,opt,name=io" json:"io,omitempty"`
	Irq            float64 `protobuf:"fixed64,8,opt,name=irq" json:"irq,omitempty"`
	Soft           float64 `protobuf:"fixed64,9,opt,name=soft" json:"soft,omitempty"`
	Steal          float64 `protobuf:"fixed64,10,opt,name=steal" json:"steal,omitempty"`
	Guest          float64 `protobuf:"fixed64,11,opt,name=guest" json:"guest,omitempty"`
	Idle           float64 `protobuf:"fixed64,12,opt,name=idle" json:"idle,omitempty"`
}

func (m *CpuMetric) Reset()                    { *m = CpuMetric{} }
func (m *CpuMetric) String() string            { return proto.CompactTextString(m) }
func (*CpuMetric) ProtoMessage()               {}
func (*CpuMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CpuMetric) GetUpTime() uint32 {
	if m != nil {
		return m.UpTime
	}
	return 0
}

func (m *CpuMetric) GetCpuUtilization() float64 {
	if m != nil {
		return m.CpuUtilization
	}
	return 0
}

func (m *CpuMetric) GetUsr() float64 {
	if m != nil {
		return m.Usr
	}
	return 0
}

func (m *CpuMetric) GetNice() float64 {
	if m != nil {
		return m.Nice
	}
	return 0
}

func (m *CpuMetric) GetSystem() float64 {
	if m != nil {
		return m.System
	}
	return 0
}

func (m *CpuMetric) GetIo() float64 {
	if m != nil {
		return m.Io
	}
	return 0
}

func (m *CpuMetric) GetIrq() float64 {
	if m != nil {
		return m.Irq
	}
	return 0
}

func (m *CpuMetric) GetSoft() float64 {
	if m != nil {
		return m.Soft
	}
	return 0
}

func (m *CpuMetric) GetSteal() float64 {
	if m != nil {
		return m.Steal
	}
	return 0
}

func (m *CpuMetric) GetGuest() float64 {
	if m != nil {
		return m.Guest
	}
	return 0
}

func (m *CpuMetric) GetIdle() float64 {
	if m != nil {
		return m.Idle
	}
	return 0
}

type MemoryMetric struct {
	UsedMem         uint32  `protobuf:"varint,2,opt,name=usedMem" json:"usedMem,omitempty"`
	AvailMem        uint32  `protobuf:"varint,3,opt,name=availMem" json:"availMem,omitempty"`
	UsedPercentage  float64 `protobuf:"fixed64,4,opt,name=usedPercentage" json:"usedPercentage,omitempty"`
	AvailPercentage float64 `protobuf:"fixed64,5,opt,name=availPercentage" json:"availPercentage,omitempty"`
}

func (m *MemoryMetric) Reset()                    { *m = MemoryMetric{} }
func (m *MemoryMetric) String() string            { return proto.CompactTextString(m) }
func (*MemoryMetric) ProtoMessage()               {}
func (*MemoryMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MemoryMetric) GetUsedMem() uint32 {
	if m != nil {
		return m.UsedMem
	}
	return 0
}

func (m *MemoryMetric) GetAvailMem() uint32 {
	if m != nil {
		return m.AvailMem
	}
	return 0
}

func (m *MemoryMetric) GetUsedPercentage() float64 {
	if m != nil {
		return m.UsedPercentage
	}
	return 0
}

func (m *MemoryMetric) GetAvailPercentage() float64 {
	if m != nil {
		return m.AvailPercentage
	}
	return 0
}

type NetworkMetric struct {
	IName   string `protobuf:"bytes,1,opt,name=iName" json:"iName,omitempty"`
	TxBytes uint64 `protobuf:"varint,2,opt,name=txBytes" json:"txBytes,omitempty"`
	RxBytes uint64 `protobuf:"varint,3,opt,name=rxBytes" json:"rxBytes,omitempty"`
	TxDrops uint64 `protobuf:"varint,4,opt,name=txDrops" json:"txDrops,omitempty"`
	RxDrops uint64 `protobuf:"varint,5,opt,name=rxDrops" json:"rxDrops,omitempty"`
	TxRate  uint64 `protobuf:"varint,6,opt,name=txRate" json:"txRate,omitempty"`
	RxRate  uint64 `protobuf:"varint,7,opt,name=rxRate" json:"rxRate,omitempty"`
}

func (m *NetworkMetric) Reset()                    { *m = NetworkMetric{} }
func (m *NetworkMetric) String() string            { return proto.CompactTextString(m) }
func (*NetworkMetric) ProtoMessage()               {}
func (*NetworkMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *NetworkMetric) GetIName() string {
	if m != nil {
		return m.IName
	}
	return ""
}

func (m *NetworkMetric) GetTxBytes() uint64 {
	if m != nil {
		return m.TxBytes
	}
	return 0
}

func (m *NetworkMetric) GetRxBytes() uint64 {
	if m != nil {
		return m.RxBytes
	}
	return 0
}

func (m *NetworkMetric) GetTxDrops() uint64 {
	if m != nil {
		return m.TxDrops
	}
	return 0
}

func (m *NetworkMetric) GetRxDrops() uint64 {
	if m != nil {
		return m.RxDrops
	}
	return 0
}

func (m *NetworkMetric) GetTxRate() uint64 {
	if m != nil {
		return m.TxRate
	}
	return 0
}

func (m *NetworkMetric) GetRxRate() uint64 {
	if m != nil {
		return m.RxRate
	}
	return 0
}

type DeviceMetric struct {
	Cpu     *CpuMetric       `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory  *MemoryMetric    `protobuf:"bytes,2,opt,name=memory" json:"memory,omitempty"`
	Network []*NetworkMetric `protobuf:"bytes,3,rep,name=network" json:"network,omitempty"`
}

func (m *DeviceMetric) Reset()                    { *m = DeviceMetric{} }
func (m *DeviceMetric) String() string            { return proto.CompactTextString(m) }
func (*DeviceMetric) ProtoMessage()               {}
func (*DeviceMetric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeviceMetric) GetCpu() *CpuMetric {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *DeviceMetric) GetMemory() *MemoryMetric {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *DeviceMetric) GetNetwork() []*NetworkMetric {
	if m != nil {
		return m.Network
	}
	return nil
}

type ZMetricMsg struct {
	DevID string       `protobuf:"bytes,1,opt,name=devID" json:"devID,omitempty"`
	Ztype ZmetricTypes `protobuf:"varint,2,opt,name=ztype,enum=ZmetricTypes" json:"ztype,omitempty"`
	// Types that are valid to be assigned to MetricContent:
	//	*ZMetricMsg_Dm
	MetricContent isZMetricMsg_MetricContent `protobuf_oneof:"MetricContent"`
}

func (m *ZMetricMsg) Reset()                    { *m = ZMetricMsg{} }
func (m *ZMetricMsg) String() string            { return proto.CompactTextString(m) }
func (*ZMetricMsg) ProtoMessage()               {}
func (*ZMetricMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type isZMetricMsg_MetricContent interface {
	isZMetricMsg_MetricContent()
}

type ZMetricMsg_Dm struct {
	Dm *DeviceMetric `protobuf:"bytes,4,opt,name=dm,oneof"`
}

func (*ZMetricMsg_Dm) isZMetricMsg_MetricContent() {}

func (m *ZMetricMsg) GetMetricContent() isZMetricMsg_MetricContent {
	if m != nil {
		return m.MetricContent
	}
	return nil
}

func (m *ZMetricMsg) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *ZMetricMsg) GetZtype() ZmetricTypes {
	if m != nil {
		return m.Ztype
	}
	return ZmetricTypes_ZmNop
}

func (m *ZMetricMsg) GetDm() *DeviceMetric {
	if x, ok := m.GetMetricContent().(*ZMetricMsg_Dm); ok {
		return x.Dm
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ZMetricMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ZMetricMsg_OneofMarshaler, _ZMetricMsg_OneofUnmarshaler, _ZMetricMsg_OneofSizer, []interface{}{
		(*ZMetricMsg_Dm)(nil),
	}
}

func _ZMetricMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ZMetricMsg)
	// MetricContent
	switch x := m.MetricContent.(type) {
	case *ZMetricMsg_Dm:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dm); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ZMetricMsg.MetricContent has unexpected type %T", x)
	}
	return nil
}

func _ZMetricMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ZMetricMsg)
	switch tag {
	case 4: // MetricContent.dm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceMetric)
		err := b.DecodeMessage(msg)
		m.MetricContent = &ZMetricMsg_Dm{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ZMetricMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ZMetricMsg)
	// MetricContent
	switch x := m.MetricContent.(type) {
	case *ZMetricMsg_Dm:
		s := proto.Size(x.Dm)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ZInfoManufacturer)(nil), "ZInfoManufacturer")
	proto.RegisterType((*ZInfoNetwork)(nil), "ZInfoNetwork")
	proto.RegisterType((*ZinfoPeripheral)(nil), "ZinfoPeripheral")
	proto.RegisterType((*ZInfoSW)(nil), "ZInfoSW")
	proto.RegisterType((*ZInfoDevice)(nil), "ZInfoDevice")
	proto.RegisterType((*ZInfoHypervisor)(nil), "ZInfoHypervisor")
	proto.RegisterType((*ZInfoApp)(nil), "ZInfoApp")
	proto.RegisterType((*ZInfoMsg)(nil), "ZInfoMsg")
	proto.RegisterType((*CpuMetric)(nil), "cpuMetric")
	proto.RegisterType((*MemoryMetric)(nil), "memoryMetric")
	proto.RegisterType((*NetworkMetric)(nil), "networkMetric")
	proto.RegisterType((*DeviceMetric)(nil), "deviceMetric")
	proto.RegisterType((*ZMetricMsg)(nil), "ZMetricMsg")
	proto.RegisterEnum("ZInfoTypes", ZInfoTypes_name, ZInfoTypes_value)
	proto.RegisterEnum("ZPeripheralTypes", ZPeripheralTypes_name, ZPeripheralTypes_value)
	proto.RegisterEnum("ZmetricTypes", ZmetricTypes_name, ZmetricTypes_value)
}

func init() { proto.RegisterFile("zmet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1090 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x56, 0x4d, 0x6f, 0xe3, 0x36,
	0x10, 0x0d, 0x6d, 0xcb, 0x1f, 0x63, 0x3b, 0xd1, 0x12, 0xc1, 0x42, 0x58, 0x2c, 0xb0, 0xa9, 0xba,
	0xed, 0x1a, 0x39, 0x28, 0x40, 0x7a, 0x6d, 0x51, 0x24, 0xcd, 0x21, 0x3e, 0x24, 0x08, 0xb8, 0x9b,
	0x16, 0xf0, 0x4d, 0x91, 0x18, 0x9b, 0xa8, 0x65, 0xb1, 0x14, 0xe5, 0xc4, 0x01, 0xf6, 0xd2, 0x73,
	0xcf, 0xfd, 0x13, 0xfd, 0x0d, 0x3d, 0xf6, 0xde, 0x7f, 0xd4, 0x82, 0x43, 0xca, 0x96, 0xdd, 0x04,
	0xbd, 0xe9, 0xcd, 0x1b, 0x51, 0x6f, 0x66, 0xf8, 0xc6, 0x06, 0x78, 0xca, 0xb8, 0x8e, 0xa4, 0xca,
	0x75, 0x1e, 0xfe, 0x41, 0xe0, 0xd5, 0x64, 0xbc, 0xb8, 0xcf, 0xaf, 0xe2, 0x45, 0x79, 0x1f, 0x27,
	0xba, 0x54, 0x5c, 0xd1, 0x10, 0x06, 0x59, 0x0d, 0x07, 0xe4, 0x88, 0x8c, 0x7a, 0x6c, 0x2b, 0x46,
	0x8f, 0xa0, 0x2f, 0x55, 0x9e, 0x96, 0x89, 0xbe, 0x8e, 0x33, 0x1e, 0x34, 0x30, 0xa5, 0x1e, 0xa2,
	0x01, 0x74, 0x96, 0x5c, 0x15, 0x22, 0x5f, 0x04, 0x4d, 0x64, 0x2b, 0x68, 0xce, 0x2f, 0xb8, 0x12,
	0xf1, 0xfc, 0xba, 0xcc, 0xee, 0xb8, 0x0a, 0x5a, 0xf6, 0xfc, 0x7a, 0x8c, 0x52, 0x68, 0xdd, 0xde,
	0x8e, 0x2f, 0x02, 0x0f, 0xb9, 0x56, 0x79, 0x3b, 0xbe, 0x08, 0x15, 0x0c, 0x50, 0xec, 0x35, 0xd7,
	0x0f, 0xb9, 0xfa, 0x99, 0xbe, 0x86, 0xf6, 0xf8, 0xe6, 0x2c, 0x4d, 0x2b, 0x85, 0x6d, 0x81, 0xc8,
	0xc4, 0xa7, 0x0f, 0x18, 0xb7, 0xb2, 0x1c, 0x32, 0x8a, 0xb2, 0x38, 0x41, 0xc2, 0x29, 0x72, 0xd0,
	0x30, 0x29, 0x5f, 0x62, 0x25, 0x56, 0x4c, 0x05, 0xc3, 0x5f, 0x09, 0x1c, 0x4c, 0xc4, 0xe2, 0x3e,
	0xbf, 0xe1, 0x4a, 0xc8, 0x19, 0x57, 0xf1, 0x9c, 0x7e, 0x00, 0xef, 0x49, 0xaf, 0x24, 0xc7, 0xcf,
	0xee, 0x9f, 0xbe, 0x8a, 0x26, 0x1b, 0xf2, 0xd3, 0x4a, 0xf2, 0x82, 0x59, 0x9e, 0xbe, 0x85, 0x9e,
	0x9c, 0x97, 0xd3, 0x69, 0x7c, 0x37, 0xb7, 0x2d, 0xea, 0xb2, 0x4d, 0x80, 0x8e, 0xc0, 0xcb, 0xcc,
	0xc9, 0x28, 0xa6, 0x7f, 0x4a, 0xa3, 0xff, 0x4c, 0x82, 0xd9, 0x84, 0xf0, 0x7b, 0xe8, 0x20, 0xf7,
	0xf1, 0x27, 0x73, 0x64, 0xf1, 0xf0, 0xa3, 0xeb, 0xab, 0x2d, 0x6f, 0x13, 0x30, 0x95, 0x17, 0x0f,
	0x97, 0x71, 0x31, 0x73, 0x05, 0x3a, 0x14, 0xfe, 0xdd, 0x80, 0x3e, 0x9e, 0x70, 0xc1, 0x97, 0x22,
	0xe1, 0x66, 0x7a, 0x59, 0x9c, 0xcc, 0xc4, 0x82, 0x9f, 0xa9, 0x64, 0xe6, 0x6a, 0xae, 0x87, 0x4c,
	0x47, 0x12, 0x59, 0x22, 0x6b, 0x47, 0x50, 0x41, 0xfa, 0x06, 0xba, 0x72, 0x1e, 0xeb, 0xfb, 0x5c,
	0x65, 0x41, 0x1b, 0xa9, 0x35, 0x36, 0x53, 0x5b, 0x24, 0xb2, 0x0c, 0x3a, 0x47, 0x64, 0x34, 0x64,
	0xf8, 0x6c, 0x34, 0x65, 0x3c, 0xcb, 0xd5, 0x2a, 0xe8, 0x1e, 0x91, 0x51, 0x8b, 0x39, 0x64, 0xbe,
	0x50, 0xe8, 0x5c, 0xc5, 0x53, 0x1e, 0xf4, 0x90, 0xa8, 0x20, 0x3d, 0xc6, 0x69, 0x88, 0x84, 0x17,
	0x01, 0x1c, 0x35, 0x47, 0xfd, 0x53, 0x3f, 0xda, 0x19, 0x01, 0xab, 0x12, 0x36, 0x4d, 0xec, 0xff,
	0x4f, 0x13, 0xe9, 0x7b, 0xe8, 0x16, 0xf9, 0xbd, 0x7e, 0x88, 0x15, 0x0f, 0x06, 0x98, 0xdc, 0x8d,
	0x5c, 0x57, 0xd9, 0x9a, 0xa1, 0x1f, 0xa0, 0xb3, 0xb0, 0xd7, 0x2b, 0x18, 0xe2, 0xb7, 0x87, 0x51,
	0xfd, 0xce, 0xb1, 0x8a, 0x0d, 0x3f, 0xc3, 0x01, 0x12, 0x97, 0x2b, 0xc9, 0xd5, 0x52, 0x14, 0xb9,
	0x5a, 0x57, 0xdf, 0x7c, 0xb6, 0xfa, 0xd6, 0x4b, 0xd5, 0x7b, 0xdb, 0xd5, 0xd7, 0x75, 0xb6, 0x5f,
	0xd2, 0x19, 0xfe, 0x46, 0xa0, 0x8b, 0xd1, 0x33, 0x29, 0xe9, 0x21, 0x78, 0x67, 0x52, 0x8e, 0x2f,
	0x9c, 0x0f, 0xbc, 0xd8, 0x80, 0xb5, 0x9c, 0xc6, 0xb3, 0x72, 0xac, 0xc8, 0x67, 0xe4, 0xb4, 0x90,
	0x78, 0x56, 0x8e, 0xf7, 0xa2, 0x9c, 0xbf, 0x2a, 0x39, 0x57, 0xc5, 0x94, 0x7e, 0xb1, 0xed, 0x8f,
	0xbe, 0xcd, 0xdf, 0x72, 0xc6, 0x21, 0x78, 0x29, 0x5f, 0x8e, 0x53, 0x77, 0x85, 0x2d, 0xa0, 0xef,
	0xc1, 0x4b, 0x6b, 0x8e, 0x18, 0x44, 0xb5, 0x3b, 0x7b, 0xb9, 0xc7, 0x2c, 0x69, 0x46, 0x3e, 0xc3,
	0xac, 0x16, 0x66, 0xf9, 0xd1, 0xce, 0x1c, 0x4c, 0x26, 0x26, 0x18, 0x21, 0x31, 0x66, 0x5a, 0xe1,
	0xbd, 0xa8, 0xea, 0x98, 0x49, 0x41, 0xe6, 0x7c, 0x08, 0x7d, 0x13, 0xfb, 0x21, 0x5f, 0x68, 0xbe,
	0xd0, 0xe1, 0x3f, 0x04, 0x7a, 0x89, 0x2c, 0xaf, 0xb8, 0x56, 0x22, 0x31, 0xdd, 0x2a, 0xe5, 0x27,
	0xe1, 0xf6, 0xdb, 0x90, 0x39, 0x44, 0xbf, 0x86, 0xfd, 0x44, 0x96, 0xb7, 0x5a, 0xcc, 0xc5, 0x53,
	0xac, 0xab, 0x0d, 0x47, 0xd8, 0x4e, 0x94, 0xfa, 0xd0, 0x2c, 0x0b, 0xbb, 0xdf, 0x08, 0x33, 0x8f,
	0x38, 0x13, 0x91, 0xd8, 0x4e, 0x12, 0x86, 0xcf, 0x68, 0xda, 0x55, 0xa1, 0xb9, 0xb5, 0x13, 0x61,
	0x0e, 0xd1, 0x7d, 0x68, 0x88, 0x1c, 0xad, 0x44, 0x58, 0x43, 0xe4, 0xe6, 0x34, 0xa1, 0x7e, 0x41,
	0x17, 0x11, 0x66, 0x1e, 0xcd, 0x69, 0x66, 0x02, 0xe8, 0x1f, 0xc2, 0xf0, 0xd9, 0x74, 0xb6, 0xd0,
	0x3c, 0x9e, 0x07, 0x80, 0x41, 0x0b, 0x4c, 0x74, 0x5a, 0xf2, 0x42, 0xa3, 0x4d, 0x08, 0xb3, 0xc0,
	0xbc, 0x2f, 0xd2, 0xb9, 0xb5, 0x03, 0x61, 0xf8, 0x1c, 0xfe, 0x4e, 0x60, 0x60, 0x2f, 0x85, 0x6b,
	0x42, 0x00, 0x9d, 0xb2, 0xe0, 0xe9, 0x15, 0xcf, 0x5c, 0x17, 0x2a, 0x68, 0x36, 0x41, 0xbc, 0x8c,
	0xc5, 0xdc, 0x50, 0xf6, 0x3a, 0xad, 0xb1, 0x69, 0x91, 0x49, 0xbb, 0xe1, 0x2a, 0xe1, 0x0b, 0x5d,
	0xdd, 0x2b, 0xc2, 0x76, 0xa2, 0x74, 0x04, 0x07, 0xf8, 0x4e, 0x2d, 0xd1, 0xf6, 0x66, 0x37, 0x1c,
	0xfe, 0x49, 0x60, 0xe8, 0xcc, 0xe7, 0x94, 0x1d, 0x82, 0x27, 0x70, 0x67, 0xbb, 0x6b, 0x2f, 0xaa,
	0xdf, 0x1d, 0xfd, 0x78, 0xbe, 0xd2, 0xbc, 0x40, 0xbd, 0x2d, 0x56, 0x41, 0xc3, 0x28, 0xc7, 0x34,
	0x2d, 0xa3, 0x36, 0x8c, 0x7e, 0xbc, 0x50, 0xb9, 0x2c, 0x9c, 0x4d, 0x2b, 0x68, 0xdf, 0xb1, 0x8c,
	0x57, 0xbd, 0x63, 0x99, 0xd7, 0xd0, 0xd6, 0x8f, 0x2c, 0xd6, 0xd6, 0xa5, 0x2d, 0xe6, 0x90, 0x89,
	0x2b, 0x1b, 0xef, 0xd8, 0xb8, 0x45, 0xe1, 0x67, 0x18, 0xd8, 0xa5, 0xe5, 0xd4, 0xbf, 0x85, 0xa6,
	0x71, 0x27, 0xc1, 0xab, 0x09, 0xd1, 0xfa, 0xd6, 0x31, 0x13, 0xa6, 0x5f, 0xad, 0x8d, 0xda, 0xc0,
	0x84, 0x61, 0x54, 0x1f, 0xca, 0xda, 0xb7, 0xa3, 0xcd, 0xba, 0x6a, 0xe2, 0xba, 0xda, 0x8f, 0xb6,
	0x7a, 0xb4, 0xd9, 0x57, 0x2b, 0x80, 0x89, 0x8d, 0x19, 0x8b, 0x3a, 0xff, 0xad, 0x37, 0x06, 0x02,
	0xfa, 0x65, 0x65, 0xdc, 0x06, 0x1a, 0x77, 0x18, 0x4d, 0x32, 0x7c, 0x63, 0xcb, 0xba, 0xef, 0xa0,
	0x91, 0x66, 0xce, 0x7b, 0xc3, 0xa8, 0x5e, 0xd2, 0xe5, 0x1e, 0x6b, 0xa4, 0xd9, 0xf9, 0x01, 0x0c,
	0x2d, 0x76, 0xa6, 0x3a, 0x3e, 0x07, 0xd8, 0x6c, 0x00, 0xda, 0x03, 0x6f, 0x22, 0xae, 0x73, 0xe9,
	0xef, 0xd1, 0x01, 0x74, 0x27, 0xc2, 0xda, 0xdb, 0x27, 0xd4, 0x87, 0xc1, 0x44, 0x6c, 0x6c, 0xec,
	0x37, 0x6c, 0xea, 0x99, 0x94, 0x7e, 0xf3, 0xf8, 0x5b, 0xf0, 0x77, 0x7f, 0x65, 0x29, 0x40, 0x7b,
	0x22, 0xaf, 0xf3, 0x05, 0xf7, 0xf7, 0xe8, 0x10, 0x7a, 0x13, 0xf9, 0xd1, 0xee, 0x2c, 0x9f, 0x58,
	0xe8, 0x76, 0xb6, 0xdf, 0x38, 0x3e, 0x85, 0x41, 0xbd, 0x14, 0x3c, 0x38, 0xdb, 0x68, 0xc8, 0xd6,
	0x1a, 0x90, 0xc0, 0x2f, 0x9e, 0x7f, 0x07, 0xef, 0x92, 0x3c, 0x8b, 0x9e, 0x78, 0xca, 0xd3, 0x38,
	0x4a, 0xe6, 0x79, 0x99, 0x46, 0x65, 0x61, 0xc4, 0x25, 0xdc, 0xfe, 0x7d, 0x9a, 0xbc, 0x99, 0x0a,
	0x3d, 0x2b, 0xef, 0xa2, 0x24, 0xcf, 0x4e, 0x6c, 0xde, 0x49, 0x2c, 0xc5, 0x89, 0xf9, 0x83, 0x75,
	0xd7, 0xc6, 0x94, 0x6f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x69, 0xa4, 0x66, 0x11, 0x6f, 0x09,
	0x00, 0x00,
}
