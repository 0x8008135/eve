zedmanager:
 - Need handleDelete to clean up all dependent files
 - Need modification for ACL and eidlist in handlezedrouter

zedrouter:
 - Seems to re-add the iptables rules for each handleModify. CHECK
 
device-steps.sh:
DONE - Need cleanup of dependent /var/run/*/config, however we have two global files
   plus the IsZedmanager zedrouter/config; preserve zedmanager/config/
 - XXX keep downloads directory in place as well

NOTE:
ubuntu guest and zedrouter assumes bu is first in list of networks - becomes eth0

zedrouter:
 - move dnsmasq and radvd from /etc to /var/run/zedrouter/
 - create domain name ipsets on the fly. Easy in handleCreate
   Requires some care in handleModify
 - handleModify's update to ACLs assumes there is no DROP rules since does -I
   Need to generate new list of rules and then just apply them?
   (Using save/restore for efficiency? Should we use restore for initial set
   as well for efficiency?)

xenmgr:
 - How do we wait for state?
 - How do we find out crashed? boot failures show up as "r"
 - How do we always delete? Wait state to change after xl shutdown then xl destroy and wait again? Means a goroutine per UUID?
   It could periodically look for status and update.
   
DONE zedmanager:
 - special handling of IsZedManager - do we create it's file on the fly
   from onboarding? Don't pass to XenMgr.
 - 1st read status from everybody and build collections in memory
   Implies handle* for multiple input collections.
   Should it produce status for ZedCloud?
 - 2nd read config from ZedCloud
   
===

Create DeviceSwStatus separate from DeviceSwResources
Include uplink interfaces, available memory and disk
NAT i.e. uplink global address? (From exchanges with ZedControl).
Trigger such exchange when local interface/address change.
DeviceSwStatus upload results in an ack containing the global address.

===

New zedmanager - no TLS
    Has the hwupdate and swupdate clients.
    Runs server as well (how?) PUSH of swconfig, GET of swstatus
    (is there also a patch of swconfig? Use directory with /var/tmp/zededa/swconfig/<eidOrName>/<version>
    SwConfig includes URL, DigestAlg, Digest (Eid, Name, Version also sent)
    SwConfig has a type (Image, Disk - with location attribute, Resource? ACL?)
    SwConfig has a signer (base64Url of cert? or pem?)
    ZedManager/dom0 has root cert; need cert chain from somewhere...

    XXX where, how do we get the peer cert chain and save it for verification?

    XXX type=process? Install in /var/tmp/zededa/app/<EID>/<version> and assume
    there is a ./run program? Works for the python apps.
    Throwaway!

Hierarchical structure?
    SwConfig -> Components list
        Each component has a URL, digest, digestalg?
	Also displayName, version?? 
    Signer, signature on all of SwConfig
    Means two levels and not hierarchical.
    Version and name in SwConfig. Means doing diffs when the version changes to
    detect that component X did not change its digest. XXX should we have informative version strings for the components? Still compare the digest? Or compare both?

==

Move to /usr/local/etc/lisp

lisp_directory = "/root/lispers.net/" if docker else "/home/pi/lispers.net/"

===

What about /var/tmp? Just a mock up.
Might want to have it survive reboot hence move to /var/zededa/device and
/var/zededa/onboarding.



