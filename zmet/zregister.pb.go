// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zregister.proto

package zmet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ZRegisterResult int32

const (
	ZRegisterResult_ZRegNone        ZRegisterResult = 0
	ZRegisterResult_ZRegSuccess     ZRegisterResult = 1
	ZRegisterResult_ZRegNotActive   ZRegisterResult = 2
	ZRegisterResult_ZRegAlreadyDone ZRegisterResult = 3
	ZRegisterResult_ZRegDeviceNA    ZRegisterResult = 4
	ZRegisterResult_ZRegFailed      ZRegisterResult = 5
)

var ZRegisterResult_name = map[int32]string{
	0: "ZRegNone",
	1: "ZRegSuccess",
	2: "ZRegNotActive",
	3: "ZRegAlreadyDone",
	4: "ZRegDeviceNA",
	5: "ZRegFailed",
}
var ZRegisterResult_value = map[string]int32{
	"ZRegNone":        0,
	"ZRegSuccess":     1,
	"ZRegNotActive":   2,
	"ZRegAlreadyDone": 3,
	"ZRegDeviceNA":    4,
	"ZRegFailed":      5,
}

func (x ZRegisterResult) String() string {
	return proto.EnumName(ZRegisterResult_name, int32(x))
}
func (ZRegisterResult) EnumDescriptor() ([]byte, []int) { return fileDescriptorZregister, []int{0} }

type ZRegisterResp struct {
	Result ZRegisterResult `protobuf:"varint,2,opt,name=result,proto3,enum=ZRegisterResult" json:"result,omitempty"`
}

func (m *ZRegisterResp) Reset()                    { *m = ZRegisterResp{} }
func (m *ZRegisterResp) String() string            { return proto.CompactTextString(m) }
func (*ZRegisterResp) ProtoMessage()               {}
func (*ZRegisterResp) Descriptor() ([]byte, []int) { return fileDescriptorZregister, []int{0} }

func (m *ZRegisterResp) GetResult() ZRegisterResult {
	if m != nil {
		return m.Result
	}
	return ZRegisterResult_ZRegNone
}

type ZRegisterMsg struct {
	OnBoardKey string `protobuf:"bytes,1,opt,name=onBoardKey,proto3" json:"onBoardKey,omitempty"`
	PemCert    []byte `protobuf:"bytes,2,opt,name=pemCert,proto3" json:"pemCert,omitempty"`
}

func (m *ZRegisterMsg) Reset()                    { *m = ZRegisterMsg{} }
func (m *ZRegisterMsg) String() string            { return proto.CompactTextString(m) }
func (*ZRegisterMsg) ProtoMessage()               {}
func (*ZRegisterMsg) Descriptor() ([]byte, []int) { return fileDescriptorZregister, []int{1} }

func (m *ZRegisterMsg) GetOnBoardKey() string {
	if m != nil {
		return m.OnBoardKey
	}
	return ""
}

func (m *ZRegisterMsg) GetPemCert() []byte {
	if m != nil {
		return m.PemCert
	}
	return nil
}

func init() {
	proto.RegisterType((*ZRegisterResp)(nil), "ZRegisterResp")
	proto.RegisterType((*ZRegisterMsg)(nil), "ZRegisterMsg")
	proto.RegisterEnum("ZRegisterResult", ZRegisterResult_name, ZRegisterResult_value)
}
func (m *ZRegisterResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZRegisterResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZregister(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *ZRegisterMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZRegisterMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OnBoardKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZregister(dAtA, i, uint64(len(m.OnBoardKey)))
		i += copy(dAtA[i:], m.OnBoardKey)
	}
	if len(m.PemCert) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZregister(dAtA, i, uint64(len(m.PemCert)))
		i += copy(dAtA[i:], m.PemCert)
	}
	return i, nil
}

func encodeVarintZregister(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ZRegisterResp) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovZregister(uint64(m.Result))
	}
	return n
}

func (m *ZRegisterMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.OnBoardKey)
	if l > 0 {
		n += 1 + l + sovZregister(uint64(l))
	}
	l = len(m.PemCert)
	if l > 0 {
		n += 1 + l + sovZregister(uint64(l))
	}
	return n
}

func sovZregister(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZregister(x uint64) (n int) {
	return sovZregister(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZRegisterResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZregister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZRegisterResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZRegisterResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZregister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ZRegisterResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZregister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZregister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZRegisterMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZregister
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZRegisterMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZRegisterMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnBoardKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZregister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZregister
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnBoardKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PemCert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZregister
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZregister
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PemCert = append(m.PemCert[:0], dAtA[iNdEx:postIndex]...)
			if m.PemCert == nil {
				m.PemCert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZregister(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZregister
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZregister(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZregister
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZregister
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZregister
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZregister
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZregister
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZregister(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZregister = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZregister   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zregister.proto", fileDescriptorZregister) }

var fileDescriptorZregister = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0x97, 0xa9, 0x53, 0x3f, 0xeb, 0x1a, 0xe3, 0xa5, 0x78, 0x28, 0x63, 0xa7, 0x22, 0xd2,
	0x82, 0x9e, 0x3c, 0x76, 0x0e, 0x11, 0xc4, 0x1e, 0xea, 0x6d, 0xb7, 0x2e, 0xf9, 0xa8, 0x81, 0x76,
	0x29, 0x49, 0x3a, 0x58, 0x7f, 0x89, 0x3f, 0xc9, 0xa3, 0x3f, 0x41, 0xea, 0x1f, 0x91, 0xda, 0x29,
	0x63, 0xc7, 0xf7, 0x79, 0xc8, 0x9b, 0x97, 0x0f, 0xdc, 0x46, 0x63, 0x2e, 0x8d, 0x45, 0x1d, 0x56,
	0x5a, 0x59, 0x35, 0xbd, 0x87, 0xf3, 0x45, 0xba, 0x45, 0x29, 0x9a, 0x8a, 0x05, 0x30, 0xd2, 0x68,
	0xea, 0xc2, 0x7a, 0xc3, 0x09, 0x09, 0xc6, 0xb7, 0x34, 0xdc, 0xf5, 0x75, 0x61, 0xd3, 0xad, 0x9f,
	0x3e, 0x81, 0xf3, 0xaf, 0x5e, 0x4c, 0xce, 0x7c, 0x00, 0xb5, 0x9a, 0xa9, 0x4c, 0x8b, 0x67, 0xdc,
	0x78, 0x64, 0x42, 0x82, 0xd3, 0x74, 0x87, 0x30, 0x0f, 0x8e, 0x2b, 0x2c, 0x1f, 0x50, 0xf7, 0xd5,
	0x4e, 0xfa, 0x17, 0xaf, 0x1b, 0x70, 0xf7, 0x3e, 0x61, 0x0e, 0x9c, 0x74, 0x28, 0x51, 0x2b, 0xa4,
	0x03, 0xe6, 0xc2, 0x59, 0x97, 0x5e, 0x6b, 0xce, 0xd1, 0x18, 0x4a, 0xd8, 0x45, 0x3f, 0x3b, 0x51,
	0x36, 0xe6, 0x56, 0xae, 0x91, 0x0e, 0xd9, 0x65, 0x5f, 0x12, 0x17, 0x1a, 0x33, 0xb1, 0x99, 0x77,
	0x0f, 0x0f, 0x18, 0xed, 0x37, 0xce, 0x71, 0x2d, 0x39, 0x26, 0x31, 0x3d, 0x64, 0x63, 0x80, 0x8e,
	0x3c, 0x66, 0xb2, 0x40, 0x41, 0x8f, 0x66, 0x37, 0x1f, 0xad, 0x4f, 0x3e, 0x5b, 0x9f, 0x7c, 0xb5,
	0x3e, 0x79, 0xff, 0xf6, 0x07, 0x8b, 0xab, 0x5c, 0xda, 0xb7, 0x7a, 0x19, 0x72, 0x55, 0x46, 0x0d,
	0x0a, 0x14, 0x59, 0x94, 0x55, 0x32, 0x6a, 0x4a, 0xb4, 0xcb, 0xd1, 0xef, 0xd5, 0xee, 0x7e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xcc, 0xcc, 0xd3, 0x94, 0x48, 0x01, 0x00, 0x00,
}
