syntax = "proto3";

import "google/protobuf/timestamp.proto";
option go_package  = "github.com/zededa/api/zmet";

option java_package = "com.zededa.cloud.uservice.proto";

/*
 * Broadly there are two types
 * Info : information that is discovered/rarely changes
 * Metrics: information that gets updated periodically
 * Protobuf definitions in this file follow the convention. 
 */
enum ZInfoTypes {
  ZiNop = 0;
  ZiDevice = 1;
  ZiHypervisor = 2;	// Deprecated
  ZiApp = 3;
}

// Manufacturing info, product name, model, version etc.
// From dmidecode/BIOS on Intel
message ZInfoManufacturer {
  string manufacturer = 1;
  string productName = 2;
  string version = 3;
  string serialNumber = 4;
  string UUID = 5;		// From BIOS; different than device UUID
  string compatible = 6;	// From /proc/device-tree/compatible on ARM
  string biosVendor = 7;
  string biosVersion = 8;
  string biosReleaseDate = 9;
}

message ZInfoNetwork {
  string IPAddr = 1; // Deprecated. Returning first address for now
  string gwAddr = 2; // Deprecated; routing is richer than a single gateway
  string macAddr = 3;
  string devName = 4; // eth0, eth1 etc.
  repeated string IPAddrs = 5; // All IP addresses with /N for subnet
  repeated string defaultRouters = 6; // If DHCP assigned
  ZInfoDNS dns = 7; // If DHCP assigned
  bool up = 8;      // operational up/down status.
  GeoLoc location = 9;
  bool uplink = 10; // Uplink interface
}

// From an IP address-based geolocation service
// XXX later define GPS coordinates from device
message GeoLoc {
  string UnderlayIP = 1;
  string Hostname = 2;
  string City = 3;
  string Region = 4;
  string Country = 5;
  string Loc = 6;
  string Org = 7;
  string Postal = 8;
}

// This is used both to represent the information we receive from DHCP
// for each interface, and the information the device is using
// (from /etc/resolv.conf). The latter could be different than what's received
// from DHCP on all the interfaces
message ZInfoDNS {
  repeated string DNSservers = 1;
  string DNSdomain = 2;
  repeated string DNSsearch = 3;
}

// Deprecate since we can't determine it on the device
enum ZPeripheralTypes {
  ZpNone = 0;
  ZpStorage = 1;
  ZpNetwork = 2;
}

// Enum names from OMA-TS-LWM2M_SwMgmt-V1_0-20151201-C
enum ZSwState {
  INVALID		= 0;
  INITIAL		= 1;	// Config received
  DOWNLOAD_STARTED	= 2;	// Download in-progress
  DOWNLOADED		= 3;	// Download completed, verification in-progress
  DELIVERED		= 4;	// Verification completed
  INSTALLED		= 5;	// Installed, ready for activation
}

// Deprecate since we can't determine it on the device
message ZinfoPeripheral {
  ZPeripheralTypes ztype = 1;
  bool pluggable = 2;
  ZInfoManufacturer minfo = 3;
}

//SW Info for Apps
message ZInfoSW {
  string swVersion = 2;
  string swHash = 3;
  ZSwState state = 4;		// State of Software Image download/install
  bool activated = 5;		// Activation flag -- deprecated
  string target = 6;		// E.g., "disk", "kernel", "device-tree"
  string vdev = 7;		// E.g., "xvda"
}

// Errors in response to the applicatioan of configuration
message ErrorInfo {
  string description = 1;
  google.protobuf.Timestamp timestamp = 2;
}

// Base device info, as discovered by Xen (or OS on bare metal)
message ZInfoDevice {
  string machineArch = 4;
  string cpuArch = 5;
  string platform = 6;
  uint32 ncpu = 7;
  uint64 memory = 8;	// in Mbytes
  uint64 storage = 9;	// in MBytes for the currently active image filesystem

  repeated ZinfoPeripheral devices = 10; // Deprecated
  ZInfoManufacturer minfo = 11;

  ZInfoSW software = 12;		// Deprecated;
  repeated ZInfoNetwork network = 13;
  repeated ZInfoSW softwareList = 14;	// Deprecated
  repeated ZioBundle assignableAdapters = 15;
  ZInfoDNS dns = 16; // What is used in resolv.conf
  repeated ZInfoStorage storageList = 17;

  google.protobuf.Timestamp bootTime = 18;

  repeated ZInfoDevSW swList = 19;
  string   HostName = 20;
  repeated MetricItem metricItems = 21; // For instance, static LTE network info
}

//SW Info for the device base OS
message ZInfoDevSW {
  bool activated = 2;        // XXX is this implicit in partitionStatus?
  string partitionLabel = 3; // E.g., "IMGA"
  string partitionDevice = 4;// /dev/something
  string partitionState = 5; // state obtained from cboot
  ZSwState status = 6;       // E.g., "DOWNLOADED"
  string shortVersion = 7;   // From rootfs i.e., image
  string longVersion = 8;    // E.g., the yml file content from build
  ErrorInfo swErr = 9;
}

// Per filesystem/partition information
message ZInfoStorage {
  string device = 1;	// E.g., "sda3"
  string mountPath = 2;	// E.g., "/", or "/config"
  uint64 total = 3;	// in MBytes
  bool storageLocation = 4; // Storage location for app disks, images etc.
}

// Device info from DOM0 perspective, if it exists.
// The following is deprecated.
message ZInfoHypervisor {
  uint32 ncpu = 3;
  uint64 memory = 4;
  uint64 storage = 5;

  ZInfoSW software = 6;
}

message ZInfoApp {
  string AppID = 1;
  uint32 ncpu = 2;          // deprecated
  uint32 memory = 3;        // deprecated
  uint32 storage = 4;       // deprecated

  ZInfoSW software = 5;     // deprecated

  bool systemApp = 6;
  string AppName = 7;
  repeated ZInfoSW softwareList = 8;
  bool activated = 9;
  string error = 10;  // deprecated, use ErrorInfo
  google.protobuf.Timestamp errorTime = 11; //deprecated, use ErrorInfo

  google.protobuf.Timestamp bootTime = 12;
  repeated ZioBundle assignedAdapters = 13;
  repeated ErrorInfo appErr = 14;
  ZSwState state = 15;
  repeated ZInfoNetwork network = 16;	// XXX add?
}

// ipSec state information
enum ZInfoVpnState {
  VPN_INVALID     = 0;
  VPN_INITIAL     = 1;	// Config received
  VPN_CONNECTING  = 2;	// Connection is in-progress
  VPN_ESTABLISHED = 3;	// Connection established
  VPN_INSTALLED   = 4;	// SAs/Routes Installed
}

message ZInfoVpnLink {
  string ipAddr = 1;   // End point Ip Address
  string subNet = 2;   // Associate Subnet
  string spiId = 3;    // Security Parameter Index
  bool direction = 4;  // 0 = in, 1 = out
}

message ZInfoVpnConn {
  string reqId = 1;      // tunnel reqest id
  string routeTable = 2; // default or, 220 for route/policy based
  repeated ZInfoVpnLink link = 10; // connection details
}

message ZInfoVpn {
  string id = 1;	// connection id
  string name = 2;	// connection name
  string ikeProposals = 3; // ike proposals
  ZInfoVpnState state = 4;	// vpn connection state
  repeated string listeningIpAddrs = 5; //listening on
  repeated ZInfoVpnConn conn = 10; // Connection Information
}

// Lisp state information
message RlocState {
	string Rloc = 1;
	bool Reachable = 2;
}

message MapCacheEntry {
	string EID = 1;
	repeated RlocState Rlocs = 2;
}

message DatabaseMap {
	uint64 IID = 1;
	repeated MapCacheEntry MapCacheEntries = 2;
}


message DecapKey {
	string Rloc = 1;
	uint64 Port = 2;
	uint64 KeyCount = 3;
}

message ZInfoLisp {
	uint64 ItrCryptoPort = 1;
	uint64 EtrNatPort = 2;
	repeated string Interfaces = 3;
	repeated DatabaseMap DatabaseMaps = 4;
	repeated DecapKey DecapKeys = 5;
}

// Service instance state information
message ZInfoService {
  string serviceID = 1;
  string serviceName = 2;
  uint32 serviceType = 3;
  ZInfoSW softwareList = 4;
  bool activated = 5;
  google.protobuf.Timestamp upTime = 6;
  repeated ZioBundle assignedAdapters = 7;
  repeated ErrorInfo svcErr = 8;
  repeated ZInfoNetwork network = 9;
  oneof InfoContent {
    ZInfoVpn vinfo = 20;
    ZInfoLisp linfo = 21;
  }
}

message ZInfoMsg {
  ZInfoTypes ztype = 1;
  string devId = 2;
  oneof InfoContent {
  	ZInfoDevice dinfo = 3;
  	ZInfoHypervisor hinfo = 4;	// Deprecated
  	ZInfoApp ainfo = 5;
	ZInfoService sinfo = 10;
   }
  google.protobuf.Timestamp atTimeStamp = 6;
}

// XXX duplicate of definition in appconfig.proto
// Types of I/O adapters that can be assigned to applications
enum ZioType {
  ZioNop = 0;
  ZioEth = 1;		// Includes WiFi?
  ZioUSB = 2;
  ZioCOM = 3;		// Com ports
  ZioOther = 255;
}

// Information about assignable I/O adapter bundles
message ZioBundle {
  ZioType type = 1;
  string name = 2;		// Short hand name such as "com"
  repeated string members = 3;	// E.g., "com1", "com2"
  string usedByAppUUID = 4;
  bool usedByBaseOS = 5;
}

// Metrics from devices and applications

enum ZmetricTypes {
  ZmNop = 0;
  ZmDevice = 1;
  ZmApp = 3;
}

message cpuMetric { // Deprecated
  uint32 upTime = 2;
  double cpuUtilization = 3;
  double usr = 4;
  double nice = 5;
  double system = 6;
  double io = 7;
  double irq = 8;
  double soft = 9;
  double steal = 10;
  double guest = 11;
  double idle = 12;
}

message memoryMetric {
  uint32 usedMem = 2;            //in MBytes
  uint32 availMem = 3;           //in MBytes
  double usedPercentage = 4;
  double availPercentage = 5;
}

message networkMetric {
  string iName = 1;	// interface name
  uint64 txBytes = 2;	// in bytes
  uint64 rxBytes = 3;	// in bytes
  uint64 txDrops = 4;
  uint64 rxDrops = 5;
  uint64 txRate = 6;  // deprecate
  uint64 rxRate = 7;  // deprecate
  uint64 txPkts = 8;
  uint64 rxPkts = 9;
  uint64 txErrors = 10;
  uint64 rxErrors = 11;
  uint64 txAclDrops = 12;
  uint64 rxAclDrops = 13;
  uint64 txAclRateLimitDrops = 14;
  uint64 rxAclRateLimitDrops = 15;
}

// Failures and successes for commuication to zedcloud
// for each uplink interface
message zedcloudMetric {
    string ifName = 1;	// interface name
    uint64 failures = 2;
    uint64 success = 3;
    google.protobuf.Timestamp lastFailure = 4;
    google.protobuf.Timestamp lastSuccess = 5;
    repeated urlcloudMetric urlMetrics = 6;
}

message urlcloudMetric {
    string url = 1;
    int64 tryMsgCount = 2;	// Things we might have tried to send
    int64 tryByteCount = 3;	// or it failed before we could send them.
    int64 sentMsgCount = 4;
    int64 sentByteCount = 5;
    int64 recvMsgCount = 6;
    int64 recvByteCount = 7;
}

message appCpuMetric {
    uint32 cpuTotal = 2;		// deprecated
    double cpuPercentage = 3;		// deprecated
    google.protobuf.Timestamp upTime = 4;
    uint64 total = 5;                   // cpu total in secs.
}

// We report both upTime in seconds and bootTime (in info). Allows to determine
// large clock skew. Difference betweem cpuTotal and upTime is the amount
// of idle.
message devCpuMetric {  // deprecated
    uint64 cpuTotal = 1;	// in seconds
    uint64 upTime = 2;          // in seconds
}

message deviceMetric {
  cpuMetric cpu = 1;	// deprecated
  memoryMetric memory = 2;
  repeated networkMetric network = 3;
  repeated zedcloudMetric zedcloud = 4;
  devCpuMetric compute = 5; // depcreated
  repeated diskMetric disk = 6;
  appCpuMetric cpuMetric = 7;
  repeated MetricItem metricItems = 8;
}

enum MetricItemType {
  MetricItemOther = 0;		// E.g., a string like an ESSID
  MetricItemGauge = 1;		// Goes up and down over time
  MetricItemCounter = 2;	// Monotonically increasing (until reboot)
  MetricItemState = 3;		// Toggles on and off; count transitions
}

// Open-ended metrics from different part of the device such as LTE modem
// metrics.
message MetricItem {
	string key = 1;		// E.g., "lte-signal-strength"
	MetricItemType type = 2;
	oneof metricItemValue {
		bool boolValue = 3;
		uint32 uint32Value = 4;	// If timer this is in seconds
		uint64 uint64Value = 5;
		float floatValue = 6;
		string stringValue = 7; // Use with care
	}
}		

// For each partition; counts since boot
message diskMetric {
  string disk = 1;		// E.g., "mmcblk0p2"
  string mountPath = 2;		// E.g., "/config"
  uint64 readBytes = 3;		// In MB
  uint64 writeBytes = 4;	// In MB
  uint64 readCount = 5;		// Number of ops
  uint64 writeCount = 6;	// Number of ops
  uint64 total = 7;		// in MBytes; if we know the mountpath
  uint64 used = 8;		// in MBytes; if we know the mountpath
  uint64 free = 9;		// in MBytes; if we know the mountpath
}

message appDiskMetric {
  string disk = 1;		// E.g., "mmcblk0p2"
  uint64 provisioned = 2;	// in MBytes
  uint64 used = 3;		// in MBytes
  string diskType = 4;          // Type of disk, e.g., QCOW2, RAW etc.
  bool dirty = 5;               // Dirty flag
}

message appMetric {
  string AppID  = 1;
  string AppName = 2;
  appCpuMetric cpu = 3;
  memoryMetric memory = 4;
  repeated networkMetric network = 5;
  repeated appDiskMetric disk = 6;
}

// Lisp stats
message PktStat {
	uint64 Packets = 1;
	uint64 Bytes = 2;
}

message RlocStats {
	string Rloc = 1;
	PktStat Stats = 2;
	uint64 SecondsSinceLastPacket = 3;
}

message EidStats {
	uint64 IID = 1;
	string EID = 2;
	repeated RlocStats RlocStatsEntries = 3;
}

message ZMetricLisp {
	// Encap Statistics
	repeated EidStats EidStatsEntries = 1; // ITR Statistics
	PktStat ItrPacketSendError = 2;
	PktStat InvalidEidError = 3;

	// Decap Statistics
	PktStat NoDecryptKey = 4;
	PktStat OuterHeaderError = 5;
	PktStat BadInnerVersion = 6;
	PktStat GoodPackets = 7;
	PktStat ICVError = 8;
	PktStat LispHeaderError = 9;
	PktStat CheckSumError = 10;
	PktStat DecapReInjectError = 11;
	PktStat DecryptError = 12;
}

// Vpn Stats
message ZMetricConn {
	PktStat InPkts = 1;
	PktStat OutPkts = 2;
	PktStat ErrPkts = 3;
	PktStat CarierErrPkts = 4;
}

message ZMetricVpn {
	ZMetricConn ConnStat = 1;
	ZMetricConn IkeStat = 2;
	ZMetricConn NatTStat = 3;
	ZMetricConn EspStat = 4;
}

message ZMetricService {
  string serviceID = 1;
  string serviceName = 2;
  repeated networkMetric network = 3;
  oneof ServiceContent {
    ZMetricVpn  vpnm = 20;
    ZMetricLisp lispm = 21;
  }
}

message ZMetricMsg {
  string devID = 1;
  ZmetricTypes ztype = 2;  // deprecated
  google.protobuf.Timestamp atTimeStamp = 3;

  oneof MetricContent {
  	deviceMetric dm = 4;
   }
   repeated appMetric am = 5;
   repeated ZMetricService sm = 6;
}
