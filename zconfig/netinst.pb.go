// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netinst.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ZNetworkInstType int32

const (
	ZNetworkInstType_ZNetInstFirst       ZNetworkInstType = 0
	ZNetworkInstType_ZnetInstSwitch      ZNetworkInstType = 1
	ZNetworkInstType_ZnetInstLocal       ZNetworkInstType = 2
	ZNetworkInstType_ZnetInstCloud       ZNetworkInstType = 3
	ZNetworkInstType_ZnetInstMesh        ZNetworkInstType = 4
	ZNetworkInstType_ZnetInstHoneyPot    ZNetworkInstType = 5
	ZNetworkInstType_ZnetInstTransparent ZNetworkInstType = 6
	ZNetworkInstType_ZNetInstLast        ZNetworkInstType = 255
)

var ZNetworkInstType_name = map[int32]string{
	0:   "ZNetInstFirst",
	1:   "ZnetInstSwitch",
	2:   "ZnetInstLocal",
	3:   "ZnetInstCloud",
	4:   "ZnetInstMesh",
	5:   "ZnetInstHoneyPot",
	6:   "ZnetInstTransparent",
	255: "ZNetInstLast",
}
var ZNetworkInstType_value = map[string]int32{
	"ZNetInstFirst":       0,
	"ZnetInstSwitch":      1,
	"ZnetInstLocal":       2,
	"ZnetInstCloud":       3,
	"ZnetInstMesh":        4,
	"ZnetInstHoneyPot":    5,
	"ZnetInstTransparent": 6,
	"ZNetInstLast":        255,
}

func (x ZNetworkInstType) String() string {
	return proto.EnumName(ZNetworkInstType_name, int32(x))
}
func (ZNetworkInstType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

// Network Instance Opaque config. In future we might add more fields here
// but idea is here. This is service specific configuration.
type NetworkInstanceOpaqueConfig struct {
	Oconfig string `protobuf:"bytes,1,opt,name=oconfig" json:"oconfig,omitempty"`
}

func (m *NetworkInstanceOpaqueConfig) Reset()                    { *m = NetworkInstanceOpaqueConfig{} }
func (m *NetworkInstanceOpaqueConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkInstanceOpaqueConfig) ProtoMessage()               {}
func (*NetworkInstanceOpaqueConfig) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *NetworkInstanceOpaqueConfig) GetOconfig() string {
	if m != nil {
		return m.Oconfig
	}
	return ""
}

// Lisp NetworkInstance config
type NetworkInstanceLispConfig struct {
	LispMSs             []*ZcServicePoint `protobuf:"bytes,1,rep,name=LispMSs" json:"LispMSs,omitempty"`
	LispInstanceId      uint32            `protobuf:"varint,2,opt,name=LispInstanceId" json:"LispInstanceId,omitempty"`
	Allocate            bool              `protobuf:"varint,3,opt,name=allocate" json:"allocate,omitempty"`
	Exportprivate       bool              `protobuf:"varint,4,opt,name=exportprivate" json:"exportprivate,omitempty"`
	Allocationprefix    []byte            `protobuf:"bytes,5,opt,name=allocationprefix,proto3" json:"allocationprefix,omitempty"`
	Allocationprefixlen uint32            `protobuf:"varint,6,opt,name=allocationprefixlen" json:"allocationprefixlen,omitempty"`
	// various configuration to dataPlane, lispers.net vs Zededa
	Experimental bool `protobuf:"varint,20,opt,name=experimental" json:"experimental,omitempty"`
}

func (m *NetworkInstanceLispConfig) Reset()                    { *m = NetworkInstanceLispConfig{} }
func (m *NetworkInstanceLispConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkInstanceLispConfig) ProtoMessage()               {}
func (*NetworkInstanceLispConfig) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *NetworkInstanceLispConfig) GetLispMSs() []*ZcServicePoint {
	if m != nil {
		return m.LispMSs
	}
	return nil
}

func (m *NetworkInstanceLispConfig) GetLispInstanceId() uint32 {
	if m != nil {
		return m.LispInstanceId
	}
	return 0
}

func (m *NetworkInstanceLispConfig) GetAllocate() bool {
	if m != nil {
		return m.Allocate
	}
	return false
}

func (m *NetworkInstanceLispConfig) GetExportprivate() bool {
	if m != nil {
		return m.Exportprivate
	}
	return false
}

func (m *NetworkInstanceLispConfig) GetAllocationprefix() []byte {
	if m != nil {
		return m.Allocationprefix
	}
	return nil
}

func (m *NetworkInstanceLispConfig) GetAllocationprefixlen() uint32 {
	if m != nil {
		return m.Allocationprefixlen
	}
	return 0
}

func (m *NetworkInstanceLispConfig) GetExperimental() bool {
	if m != nil {
		return m.Experimental
	}
	return false
}

type NetworkInstanceConfig struct {
	Uuidandversion *UUIDandVersion `protobuf:"bytes,1,opt,name=uuidandversion" json:"uuidandversion,omitempty"`
	Displayname    string          `protobuf:"bytes,2,opt,name=displayname" json:"displayname,omitempty"`
	// new instance type
	InstType ZNetworkInstType `protobuf:"varint,4,opt,name=instType,enum=ZNetworkInstType" json:"instType,omitempty"`
	Activate bool             `protobuf:"varint,5,opt,name=activate" json:"activate,omitempty"`
	// This is port configuration, we can use this one and evovle to do
	// model name, based thing for future.
	// towards devices which phyiscal or logical adapter to use
	Devlink *Adapter `protobuf:"bytes,20,opt,name=devlink" json:"devlink,omitempty"`
	// Opaque configuration
	Cfg *NetworkInstanceOpaqueConfig `protobuf:"bytes,30,opt,name=cfg" json:"cfg,omitempty"`
	// network ip specification
	Ip *Ipspec `protobuf:"bytes,40,opt,name=ip" json:"ip,omitempty"`
	// static DNS entry, if we are running DNS/DHCP service
	Dns []*ZnetStaticDNSEntry `protobuf:"bytes,41,rep,name=dns" json:"dns,omitempty"`
}

func (m *NetworkInstanceConfig) Reset()                    { *m = NetworkInstanceConfig{} }
func (m *NetworkInstanceConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkInstanceConfig) ProtoMessage()               {}
func (*NetworkInstanceConfig) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *NetworkInstanceConfig) GetUuidandversion() *UUIDandVersion {
	if m != nil {
		return m.Uuidandversion
	}
	return nil
}

func (m *NetworkInstanceConfig) GetDisplayname() string {
	if m != nil {
		return m.Displayname
	}
	return ""
}

func (m *NetworkInstanceConfig) GetInstType() ZNetworkInstType {
	if m != nil {
		return m.InstType
	}
	return ZNetworkInstType_ZNetInstFirst
}

func (m *NetworkInstanceConfig) GetActivate() bool {
	if m != nil {
		return m.Activate
	}
	return false
}

func (m *NetworkInstanceConfig) GetDevlink() *Adapter {
	if m != nil {
		return m.Devlink
	}
	return nil
}

func (m *NetworkInstanceConfig) GetCfg() *NetworkInstanceOpaqueConfig {
	if m != nil {
		return m.Cfg
	}
	return nil
}

func (m *NetworkInstanceConfig) GetIp() *Ipspec {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *NetworkInstanceConfig) GetDns() []*ZnetStaticDNSEntry {
	if m != nil {
		return m.Dns
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkInstanceOpaqueConfig)(nil), "NetworkInstanceOpaqueConfig")
	proto.RegisterType((*NetworkInstanceLispConfig)(nil), "NetworkInstanceLispConfig")
	proto.RegisterType((*NetworkInstanceConfig)(nil), "NetworkInstanceConfig")
	proto.RegisterEnum("ZNetworkInstType", ZNetworkInstType_name, ZNetworkInstType_value)
}

func init() { proto.RegisterFile("netinst.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x5f, 0x4f, 0xdb, 0x3c,
	0x18, 0xc5, 0xdf, 0xb4, 0x40, 0xcb, 0x43, 0x5b, 0x82, 0xe1, 0x15, 0x19, 0xfb, 0x57, 0x55, 0xdb,
	0x54, 0x90, 0x16, 0x26, 0x76, 0xc1, 0xed, 0x36, 0xd8, 0x34, 0x24, 0x60, 0x28, 0x85, 0x5d, 0xf4,
	0xce, 0x38, 0x0f, 0x60, 0x91, 0xd8, 0x9e, 0xed, 0x16, 0xca, 0xc7, 0xda, 0x3e, 0xc9, 0x3e, 0xd1,
	0x26, 0x3b, 0x09, 0x2a, 0xdd, 0xb4, 0xbb, 0x9c, 0xdf, 0x39, 0x76, 0x1e, 0x1f, 0xd9, 0xd0, 0x16,
	0x68, 0xb9, 0x30, 0x36, 0x56, 0x5a, 0x5a, 0xb9, 0xb1, 0x9c, 0xe2, 0x98, 0xc9, 0x3c, 0x97, 0xa2,
	0x04, 0x2d, 0x81, 0x96, 0xe5, 0xa5, 0xea, 0xed, 0xc2, 0xe3, 0x63, 0xb4, 0x37, 0x52, 0x5f, 0x1f,
	0x08, 0x63, 0xa9, 0x60, 0xf8, 0x45, 0xd1, 0x6f, 0x23, 0xdc, 0x93, 0xe2, 0x82, 0x5f, 0x92, 0x08,
	0x1a, 0x92, 0xf9, 0xcf, 0x28, 0xe8, 0x06, 0xfd, 0xc5, 0xa4, 0x92, 0xbd, 0xef, 0x35, 0x78, 0x34,
	0xb3, 0xf2, 0x90, 0x1b, 0x55, 0xae, 0xdb, 0x84, 0x86, 0x53, 0x47, 0x03, 0x13, 0x05, 0xdd, 0x7a,
	0x7f, 0x69, 0x67, 0x39, 0x1e, 0xb2, 0x01, 0xea, 0x31, 0x67, 0x78, 0x22, 0xb9, 0xb0, 0x49, 0xe5,
	0x93, 0x57, 0xd0, 0x71, 0x9f, 0xd5, 0x26, 0x07, 0x69, 0x54, 0xeb, 0x06, 0xfd, 0x76, 0x32, 0x43,
	0xc9, 0x06, 0x34, 0x69, 0x96, 0x49, 0x46, 0x2d, 0x46, 0xf5, 0x6e, 0xd0, 0x6f, 0x26, 0xf7, 0x9a,
	0xbc, 0x80, 0x36, 0xde, 0x2a, 0xa9, 0xad, 0xd2, 0x7c, 0xec, 0x02, 0x73, 0x3e, 0xf0, 0x10, 0x92,
	0x2d, 0x08, 0xcb, 0x15, 0x5c, 0x0a, 0xa5, 0xf1, 0x82, 0xdf, 0x46, 0xf3, 0xdd, 0xa0, 0xdf, 0x4a,
	0xfe, 0xe0, 0xe4, 0x0d, 0xac, 0xce, 0xb2, 0x0c, 0x45, 0xb4, 0xe0, 0x47, 0xfb, 0x9b, 0x45, 0x7a,
	0xd0, 0xc2, 0x5b, 0x85, 0x9a, 0xe7, 0x28, 0x2c, 0xcd, 0xa2, 0x35, 0x3f, 0xc2, 0x03, 0xd6, 0xfb,
	0x59, 0x83, 0xff, 0x67, 0x4a, 0x2b, 0x0b, 0xdb, 0x85, 0xce, 0x68, 0xc4, 0x53, 0x2a, 0xd2, 0x31,
	0x6a, 0xc3, 0xa5, 0xf0, 0x7d, 0xbb, 0xde, 0xce, 0xce, 0x0e, 0xf6, 0xa9, 0x48, 0xbf, 0x16, 0x38,
	0x99, 0x89, 0x91, 0x2e, 0x2c, 0xa5, 0xdc, 0xa8, 0x8c, 0x4e, 0x04, 0xcd, 0xd1, 0x77, 0xb7, 0x98,
	0x4c, 0x23, 0xf2, 0x1a, 0x9a, 0xee, 0x3e, 0x9c, 0x4e, 0x54, 0xd1, 0x4b, 0x67, 0x67, 0x25, 0x1e,
	0x4e, 0x4d, 0xe1, 0x8c, 0xe4, 0x3e, 0xe2, 0x7b, 0x66, 0xb6, 0xa8, 0x71, 0xbe, 0xec, 0xb9, 0xd4,
	0xa4, 0x07, 0x8d, 0x14, 0xc7, 0x19, 0x17, 0xd7, 0xfe, 0x78, 0x4b, 0x3b, 0xcd, 0xf8, 0x7d, 0x4a,
	0x95, 0x45, 0x9d, 0x54, 0x06, 0x89, 0xa1, 0xce, 0x2e, 0x2e, 0xa3, 0x67, 0xde, 0x7f, 0x12, 0xff,
	0xe3, 0x76, 0x25, 0x2e, 0x48, 0xd6, 0xa1, 0xc6, 0x55, 0xd4, 0xf7, 0xf1, 0x46, 0xcc, 0x95, 0x51,
	0xc8, 0x92, 0x1a, 0x57, 0xe4, 0x25, 0xd4, 0x53, 0x61, 0xa2, 0x4d, 0x7f, 0x7f, 0x56, 0xe3, 0xa1,
	0x40, 0x3b, 0xb0, 0xd4, 0x72, 0xb6, 0x7f, 0x3c, 0xf8, 0x28, 0xac, 0x9e, 0x24, 0xce, 0xdf, 0xfa,
	0x11, 0x40, 0x38, 0x7b, 0x1c, 0xb2, 0x02, 0x6d, 0xc7, 0x9c, 0xfe, 0xc4, 0xb5, 0xb1, 0xe1, 0x7f,
	0x84, 0x40, 0xc7, 0x6d, 0xe1, 0xd0, 0xe0, 0x86, 0x5b, 0x76, 0x15, 0x06, 0x3e, 0x56, 0xb2, 0x43,
	0xc9, 0x68, 0x16, 0xd6, 0xa6, 0xd1, 0x5e, 0x26, 0x47, 0x69, 0x58, 0x27, 0x21, 0xb4, 0x2a, 0x74,
	0x84, 0xe6, 0x2a, 0x9c, 0x23, 0x6b, 0x10, 0x56, 0xe4, 0xb3, 0x14, 0x38, 0x39, 0x91, 0x36, 0x9c,
	0x27, 0xeb, 0xb0, 0x5a, 0xd1, 0x53, 0x4d, 0x85, 0x51, 0x54, 0xa3, 0xb0, 0xe1, 0x02, 0x59, 0x81,
	0x56, 0x35, 0xcd, 0x21, 0x35, 0x36, 0xfc, 0x15, 0x7c, 0x78, 0x07, 0xcf, 0x99, 0xcc, 0xe3, 0x3b,
	0x4c, 0x31, 0xa5, 0x31, 0x73, 0x7f, 0x8a, 0x47, 0xa6, 0x78, 0x20, 0xc5, 0xd3, 0x1c, 0x3e, 0xbd,
	0xe4, 0xf6, 0x6a, 0x74, 0x1e, 0x33, 0x99, 0x6f, 0x17, 0xb9, 0x6d, 0xaa, 0xf8, 0xf6, 0x5d, 0xf1,
	0x00, 0xcf, 0x17, 0x7c, 0xea, 0xed, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0xcf, 0x3a, 0x4f,
	0xf0, 0x03, 0x00, 0x00,
}
