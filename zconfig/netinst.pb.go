// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netinst.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ZNetworkInstType int32

const (
	ZNetworkInstType_ZNetInstFirst    ZNetworkInstType = 0
	ZNetworkInstType_ZnetInstSwitch   ZNetworkInstType = 1
	ZNetworkInstType_ZnetInstLocal    ZNetworkInstType = 2
	ZNetworkInstType_ZnetInstCloud    ZNetworkInstType = 3
	ZNetworkInstType_ZnetInstMesh     ZNetworkInstType = 4
	ZNetworkInstType_ZnetInstHoneyPot ZNetworkInstType = 5
	ZNetworkInstType_ZNetInstLast     ZNetworkInstType = 255
)

var ZNetworkInstType_name = map[int32]string{
	0:   "ZNetInstFirst",
	1:   "ZnetInstSwitch",
	2:   "ZnetInstLocal",
	3:   "ZnetInstCloud",
	4:   "ZnetInstMesh",
	5:   "ZnetInstHoneyPot",
	255: "ZNetInstLast",
}
var ZNetworkInstType_value = map[string]int32{
	"ZNetInstFirst":    0,
	"ZnetInstSwitch":   1,
	"ZnetInstLocal":    2,
	"ZnetInstCloud":    3,
	"ZnetInstMesh":     4,
	"ZnetInstHoneyPot": 5,
	"ZNetInstLast":     255,
}

func (x ZNetworkInstType) String() string {
	return proto.EnumName(ZNetworkInstType_name, int32(x))
}
func (ZNetworkInstType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

// Network Instance Opaque config. In future we might add more fields here
// but idea is here. This is service specific configuration.
type NetworkInstanceOpaqueConfig struct {
	Oconfig string `protobuf:"bytes,1,opt,name=oconfig" json:"oconfig,omitempty"`
}

func (m *NetworkInstanceOpaqueConfig) Reset()                    { *m = NetworkInstanceOpaqueConfig{} }
func (m *NetworkInstanceOpaqueConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkInstanceOpaqueConfig) ProtoMessage()               {}
func (*NetworkInstanceOpaqueConfig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *NetworkInstanceOpaqueConfig) GetOconfig() string {
	if m != nil {
		return m.Oconfig
	}
	return ""
}

// Lisp NetworkInstance config
type NetworkInstanceLispConfig struct {
	LispMSs             []*ZcServicePoint `protobuf:"bytes,1,rep,name=LispMSs" json:"LispMSs,omitempty"`
	LispInstanceId      uint32            `protobuf:"varint,2,opt,name=LispInstanceId" json:"LispInstanceId,omitempty"`
	Allocate            bool              `protobuf:"varint,3,opt,name=allocate" json:"allocate,omitempty"`
	Exportprivate       bool              `protobuf:"varint,4,opt,name=exportprivate" json:"exportprivate,omitempty"`
	Allocationprefix    []byte            `protobuf:"bytes,5,opt,name=allocationprefix,proto3" json:"allocationprefix,omitempty"`
	Allocationprefixlen uint32            `protobuf:"varint,6,opt,name=allocationprefixlen" json:"allocationprefixlen,omitempty"`
	// various configuration to dataPlane, lispers.net vs Zededa
	Experimental bool `protobuf:"varint,20,opt,name=experimental" json:"experimental,omitempty"`
}

func (m *NetworkInstanceLispConfig) Reset()                    { *m = NetworkInstanceLispConfig{} }
func (m *NetworkInstanceLispConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkInstanceLispConfig) ProtoMessage()               {}
func (*NetworkInstanceLispConfig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *NetworkInstanceLispConfig) GetLispMSs() []*ZcServicePoint {
	if m != nil {
		return m.LispMSs
	}
	return nil
}

func (m *NetworkInstanceLispConfig) GetLispInstanceId() uint32 {
	if m != nil {
		return m.LispInstanceId
	}
	return 0
}

func (m *NetworkInstanceLispConfig) GetAllocate() bool {
	if m != nil {
		return m.Allocate
	}
	return false
}

func (m *NetworkInstanceLispConfig) GetExportprivate() bool {
	if m != nil {
		return m.Exportprivate
	}
	return false
}

func (m *NetworkInstanceLispConfig) GetAllocationprefix() []byte {
	if m != nil {
		return m.Allocationprefix
	}
	return nil
}

func (m *NetworkInstanceLispConfig) GetAllocationprefixlen() uint32 {
	if m != nil {
		return m.Allocationprefixlen
	}
	return 0
}

func (m *NetworkInstanceLispConfig) GetExperimental() bool {
	if m != nil {
		return m.Experimental
	}
	return false
}

type NetworkInstanceConfig struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Displayname string `protobuf:"bytes,2,opt,name=displayname" json:"displayname,omitempty"`
	// new instance type
	InstType ZNetworkInstType `protobuf:"varint,4,opt,name=instType,enum=ZNetworkInstType" json:"instType,omitempty"`
	Activate bool             `protobuf:"varint,5,opt,name=activate" json:"activate,omitempty"`
	// towards devices which phyiscal or logical adapter to use
	Devlink *Adapter `protobuf:"bytes,20,opt,name=devlink" json:"devlink,omitempty"`
	// Opaque configuration
	Cfg *NetworkInstanceOpaqueConfig `protobuf:"bytes,30,opt,name=cfg" json:"cfg,omitempty"`
	// network ip specification
	Ip *Ipspec `protobuf:"bytes,40,opt,name=ip" json:"ip,omitempty"`
	// static DNS entry, if we are running DNS/DHCP service
	Dns []*ZnetStaticDNSEntry `protobuf:"bytes,41,rep,name=dns" json:"dns,omitempty"`
	// enterprise proxy
	EntProxy *ProxyConfig `protobuf:"bytes,42,opt,name=entProxy" json:"entProxy,omitempty"`
}

func (m *NetworkInstanceConfig) Reset()                    { *m = NetworkInstanceConfig{} }
func (m *NetworkInstanceConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkInstanceConfig) ProtoMessage()               {}
func (*NetworkInstanceConfig) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *NetworkInstanceConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkInstanceConfig) GetDisplayname() string {
	if m != nil {
		return m.Displayname
	}
	return ""
}

func (m *NetworkInstanceConfig) GetInstType() ZNetworkInstType {
	if m != nil {
		return m.InstType
	}
	return ZNetworkInstType_ZNetInstFirst
}

func (m *NetworkInstanceConfig) GetActivate() bool {
	if m != nil {
		return m.Activate
	}
	return false
}

func (m *NetworkInstanceConfig) GetDevlink() *Adapter {
	if m != nil {
		return m.Devlink
	}
	return nil
}

func (m *NetworkInstanceConfig) GetCfg() *NetworkInstanceOpaqueConfig {
	if m != nil {
		return m.Cfg
	}
	return nil
}

func (m *NetworkInstanceConfig) GetIp() *Ipspec {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *NetworkInstanceConfig) GetDns() []*ZnetStaticDNSEntry {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *NetworkInstanceConfig) GetEntProxy() *ProxyConfig {
	if m != nil {
		return m.EntProxy
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkInstanceOpaqueConfig)(nil), "NetworkInstanceOpaqueConfig")
	proto.RegisterType((*NetworkInstanceLispConfig)(nil), "NetworkInstanceLispConfig")
	proto.RegisterType((*NetworkInstanceConfig)(nil), "NetworkInstanceConfig")
	proto.RegisterEnum("ZNetworkInstType", ZNetworkInstType_name, ZNetworkInstType_value)
}

func init() { proto.RegisterFile("netinst.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x18, 0xc5, 0x49, 0xba, 0xad, 0xdd, 0xb7, 0xb6, 0xcb, 0xbc, 0x21, 0xcc, 0xf8, 0x57, 0x55, 0x80,
	0xb2, 0x49, 0x78, 0x68, 0x5c, 0x70, 0x0b, 0x0c, 0x10, 0x93, 0xb6, 0x31, 0xa5, 0x5c, 0xf5, 0xce,
	0x73, 0xbe, 0x6d, 0xd6, 0x12, 0xdb, 0x24, 0x6e, 0xd7, 0xee, 0x51, 0x78, 0x0c, 0x1e, 0x85, 0x17,
	0x02, 0xd9, 0x4d, 0xa6, 0xae, 0x20, 0xee, 0x72, 0x7e, 0xe7, 0xf8, 0xb3, 0x73, 0x12, 0x43, 0x47,
	0xa1, 0x95, 0xaa, 0xb4, 0xcc, 0x14, 0xda, 0xea, 0xed, 0xf5, 0x14, 0xc7, 0x42, 0xe7, 0xb9, 0x56,
	0x15, 0x68, 0x2b, 0xb4, 0x22, 0xaf, 0x54, 0xff, 0x2d, 0x3c, 0x3a, 0x41, 0x7b, 0xad, 0x8b, 0xab,
	0x43, 0x55, 0x5a, 0xae, 0x04, 0x7e, 0x35, 0xfc, 0xfb, 0x08, 0x0f, 0xb4, 0x3a, 0x97, 0x17, 0x84,
	0x42, 0x53, 0x0b, 0xff, 0x48, 0x83, 0x5e, 0x10, 0xaf, 0x26, 0xb5, 0xec, 0xff, 0x0c, 0xe1, 0xe1,
	0xc2, 0xca, 0x23, 0x59, 0x9a, 0x6a, 0xdd, 0x0e, 0x34, 0x9d, 0x3a, 0x1e, 0x94, 0x34, 0xe8, 0x35,
	0xe2, 0xb5, 0xfd, 0x75, 0x36, 0x14, 0x03, 0x2c, 0xc6, 0x52, 0xe0, 0xa9, 0x96, 0xca, 0x26, 0xb5,
	0x4f, 0x5e, 0x42, 0xd7, 0x3d, 0xd6, 0x43, 0x0e, 0x53, 0x1a, 0xf6, 0x82, 0xb8, 0x93, 0x2c, 0x50,
	0xb2, 0x0d, 0x2d, 0x9e, 0x65, 0x5a, 0x70, 0x8b, 0xb4, 0xd1, 0x0b, 0xe2, 0x56, 0x72, 0xab, 0xc9,
	0x73, 0xe8, 0xe0, 0xc4, 0xe8, 0xc2, 0x9a, 0x42, 0x8e, 0x5d, 0x60, 0xc9, 0x07, 0xee, 0x42, 0xb2,
	0x0b, 0x51, 0xb5, 0x42, 0x6a, 0x65, 0x0a, 0x3c, 0x97, 0x13, 0xba, 0xdc, 0x0b, 0xe2, 0x76, 0xf2,
	0x17, 0x27, 0xaf, 0x61, 0x73, 0x91, 0x65, 0xa8, 0xe8, 0x8a, 0x3f, 0xda, 0xbf, 0x2c, 0xd2, 0x87,
	0x36, 0x4e, 0x0c, 0x16, 0x32, 0x47, 0x65, 0x79, 0x46, 0xb7, 0xfc, 0x11, 0xee, 0xb0, 0xfe, 0xaf,
	0x10, 0xee, 0x2f, 0x94, 0x56, 0x15, 0xd6, 0x85, 0x50, 0xa6, 0x55, 0xc7, 0xa1, 0x4c, 0x49, 0x0f,
	0xd6, 0x52, 0x59, 0x9a, 0x8c, 0x4f, 0x15, 0xcf, 0xd1, 0x57, 0xb2, 0x9a, 0xcc, 0x23, 0xf2, 0x0a,
	0x5a, 0xee, 0x33, 0x7f, 0x9b, 0x9a, 0xd9, 0xeb, 0x76, 0xf7, 0x37, 0xd8, 0x70, 0x6e, 0xb8, 0x33,
	0x92, 0xdb, 0x88, 0xaf, 0x4f, 0xd8, 0x59, 0x3b, 0xcb, 0x55, 0x7d, 0x95, 0x26, 0x7d, 0x68, 0xa6,
	0x38, 0xce, 0xa4, 0xba, 0xf2, 0xa7, 0x5e, 0xdb, 0x6f, 0xb1, 0xf7, 0x29, 0x37, 0x16, 0x8b, 0xa4,
	0x36, 0x08, 0x83, 0x86, 0x38, 0xbf, 0xa0, 0x4f, 0xbd, 0xff, 0x98, 0xfd, 0xe7, 0xa7, 0x49, 0x5c,
	0x90, 0x3c, 0x80, 0x50, 0x1a, 0x1a, 0xfb, 0x78, 0x93, 0x49, 0x53, 0x1a, 0x14, 0x49, 0x28, 0x0d,
	0x79, 0x01, 0x8d, 0x54, 0x95, 0x74, 0xc7, 0xff, 0x16, 0x9b, 0x6c, 0xa8, 0xd0, 0x0e, 0x2c, 0xb7,
	0x52, 0x7c, 0x3c, 0x19, 0x7c, 0x52, 0xb6, 0x98, 0x26, 0xce, 0x27, 0x31, 0xb4, 0x50, 0xd9, 0xd3,
	0x42, 0x4f, 0xa6, 0x74, 0xd7, 0x4f, 0x69, 0x33, 0xaf, 0xaa, 0x4d, 0x6e, 0xdd, 0xdd, 0x1f, 0x01,
	0x44, 0x8b, 0x2f, 0x4e, 0x36, 0xa0, 0xe3, 0x98, 0xd3, 0x9f, 0x65, 0x51, 0xda, 0xe8, 0x1e, 0x21,
	0xd0, 0x75, 0x9b, 0x39, 0x34, 0xb8, 0x96, 0x56, 0x5c, 0x46, 0x81, 0x8f, 0x55, 0xec, 0x48, 0x0b,
	0x9e, 0x45, 0xe1, 0x3c, 0x3a, 0xc8, 0xf4, 0x28, 0x8d, 0x1a, 0x24, 0x82, 0x76, 0x8d, 0x8e, 0xb1,
	0xbc, 0x8c, 0x96, 0xc8, 0x16, 0x44, 0x35, 0xf9, 0xa2, 0x15, 0x4e, 0x4f, 0xb5, 0x8d, 0x96, 0xc9,
	0x06, 0xb4, 0xeb, 0x4d, 0x8f, 0x78, 0x69, 0xa3, 0xdf, 0xc1, 0x87, 0x77, 0xf0, 0x4c, 0xe8, 0x9c,
	0xdd, 0x60, 0x8a, 0x29, 0x67, 0xc2, 0x0d, 0x64, 0xa3, 0x72, 0x76, 0x11, 0x66, 0x57, 0x70, 0xf8,
	0xe4, 0x42, 0xda, 0xcb, 0xd1, 0x19, 0x13, 0x3a, 0xdf, 0x9b, 0xe5, 0xf6, 0xb8, 0x91, 0x7b, 0x37,
	0xb3, 0x8b, 0x76, 0xb6, 0xe2, 0x53, 0x6f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x9f, 0xfa,
	0x78, 0xd8, 0x03, 0x00, 0x00,
}
