# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: netcmn.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='netcmn.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0cnetcmn.proto\"%\n\x07ipRange\x12\r\n\x05start\x18\x01 \x01(\t\x12\x0b\n\x03\x65nd\x18\x02 \x01(\t\"\x89\x01\n\x06ipspec\x12\x17\n\x04\x64hcp\x18\x02 \x01(\x0e\x32\t.DHCPType\x12\x0e\n\x06subnet\x18\x03 \x01(\t\x12\x0f\n\x07gateway\x18\x05 \x01(\t\x12\x0e\n\x06\x64omain\x18\x06 \x01(\t\x12\x0b\n\x03ntp\x18\x07 \x01(\t\x12\x0b\n\x03\x64ns\x18\x08 \x03(\t\x12\x1b\n\tdhcpRange\x18\t \x01(\x0b\x32\x08.ipRange\"+\n\tNameToEid\x12\x10\n\x08hostname\x18\x01 \x01(\t\x12\x0c\n\x04\x65ids\x18\x02 \x03(\t\"o\n\rEIDAllocation\x12\x10\n\x08\x61llocate\x18\x01 \x01(\x08\x12\x15\n\rexportprivate\x18\x02 \x01(\x08\x12\x18\n\x10\x61llocationprefix\x18\x03 \x01(\x0c\x12\x1b\n\x13\x61llocationprefixlen\x18\x04 \x01(\r\"V\n\x08lispspec\x12\x0b\n\x03iid\x18\x01 \x01(\r\x12 \n\x08\x65idalloc\x18\x02 \x01(\x0b\x32\x0e.EIDAllocation\x12\x1b\n\x07nmtoeid\x18\x03 \x03(\x0b\x32\n.NameToEid*M\n\x08\x44HCPType\x12\x0c\n\x08\x44HCPNoop\x10\x00\x12\n\n\x06Static\x10\x01\x12\x0f\n\x0bPassThrough\x10\x02\x12\n\n\x06Server\x10\x03\x12\n\n\x06\x43lient\x10\x04*<\n\x0bNetworkType\x12\x13\n\x0fNETWORKTYPENOOP\x10\x00\x12\x06\n\x02V4\x10\x04\x12\x06\n\x02V6\x10\x06\x12\x08\n\x04LISP\x10\nB@\n\x1f\x63om.zededa.cloud.uservice.protoZ\x1dgithub.com/zededa/api/zconfigb\x06proto3')
)

_DHCPTYPE = _descriptor.EnumDescriptor(
  name='DHCPType',
  full_name='DHCPType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='DHCPNoop', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Static', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='PassThrough', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Server', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Client', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=441,
  serialized_end=518,
)
_sym_db.RegisterEnumDescriptor(_DHCPTYPE)

DHCPType = enum_type_wrapper.EnumTypeWrapper(_DHCPTYPE)
_NETWORKTYPE = _descriptor.EnumDescriptor(
  name='NetworkType',
  full_name='NetworkType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NETWORKTYPENOOP', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='V4', index=1, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='V6', index=2, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='LISP', index=3, number=10,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=520,
  serialized_end=580,
)
_sym_db.RegisterEnumDescriptor(_NETWORKTYPE)

NetworkType = enum_type_wrapper.EnumTypeWrapper(_NETWORKTYPE)
DHCPNoop = 0
Static = 1
PassThrough = 2
Server = 3
Client = 4
NETWORKTYPENOOP = 0
V4 = 4
V6 = 6
LISP = 10



_IPRANGE = _descriptor.Descriptor(
  name='ipRange',
  full_name='ipRange',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='start', full_name='ipRange.start', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='end', full_name='ipRange.end', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=16,
  serialized_end=53,
)


_IPSPEC = _descriptor.Descriptor(
  name='ipspec',
  full_name='ipspec',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dhcp', full_name='ipspec.dhcp', index=0,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='subnet', full_name='ipspec.subnet', index=1,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='gateway', full_name='ipspec.gateway', index=2,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='domain', full_name='ipspec.domain', index=3,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='ntp', full_name='ipspec.ntp', index=4,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='dns', full_name='ipspec.dns', index=5,
      number=8, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='dhcpRange', full_name='ipspec.dhcpRange', index=6,
      number=9, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=56,
  serialized_end=193,
)


_NAMETOEID = _descriptor.Descriptor(
  name='NameToEid',
  full_name='NameToEid',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='hostname', full_name='NameToEid.hostname', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='eids', full_name='NameToEid.eids', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=195,
  serialized_end=238,
)


_EIDALLOCATION = _descriptor.Descriptor(
  name='EIDAllocation',
  full_name='EIDAllocation',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='allocate', full_name='EIDAllocation.allocate', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='exportprivate', full_name='EIDAllocation.exportprivate', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='allocationprefix', full_name='EIDAllocation.allocationprefix', index=2,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='allocationprefixlen', full_name='EIDAllocation.allocationprefixlen', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=240,
  serialized_end=351,
)


_LISPSPEC = _descriptor.Descriptor(
  name='lispspec',
  full_name='lispspec',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='iid', full_name='lispspec.iid', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='eidalloc', full_name='lispspec.eidalloc', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='nmtoeid', full_name='lispspec.nmtoeid', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=353,
  serialized_end=439,
)

_IPSPEC.fields_by_name['dhcp'].enum_type = _DHCPTYPE
_IPSPEC.fields_by_name['dhcpRange'].message_type = _IPRANGE
_LISPSPEC.fields_by_name['eidalloc'].message_type = _EIDALLOCATION
_LISPSPEC.fields_by_name['nmtoeid'].message_type = _NAMETOEID
DESCRIPTOR.message_types_by_name['ipRange'] = _IPRANGE
DESCRIPTOR.message_types_by_name['ipspec'] = _IPSPEC
DESCRIPTOR.message_types_by_name['NameToEid'] = _NAMETOEID
DESCRIPTOR.message_types_by_name['EIDAllocation'] = _EIDALLOCATION
DESCRIPTOR.message_types_by_name['lispspec'] = _LISPSPEC
DESCRIPTOR.enum_types_by_name['DHCPType'] = _DHCPTYPE
DESCRIPTOR.enum_types_by_name['NetworkType'] = _NETWORKTYPE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ipRange = _reflection.GeneratedProtocolMessageType('ipRange', (_message.Message,), dict(
  DESCRIPTOR = _IPRANGE,
  __module__ = 'netcmn_pb2'
  # @@protoc_insertion_point(class_scope:ipRange)
  ))
_sym_db.RegisterMessage(ipRange)

ipspec = _reflection.GeneratedProtocolMessageType('ipspec', (_message.Message,), dict(
  DESCRIPTOR = _IPSPEC,
  __module__ = 'netcmn_pb2'
  # @@protoc_insertion_point(class_scope:ipspec)
  ))
_sym_db.RegisterMessage(ipspec)

NameToEid = _reflection.GeneratedProtocolMessageType('NameToEid', (_message.Message,), dict(
  DESCRIPTOR = _NAMETOEID,
  __module__ = 'netcmn_pb2'
  # @@protoc_insertion_point(class_scope:NameToEid)
  ))
_sym_db.RegisterMessage(NameToEid)

EIDAllocation = _reflection.GeneratedProtocolMessageType('EIDAllocation', (_message.Message,), dict(
  DESCRIPTOR = _EIDALLOCATION,
  __module__ = 'netcmn_pb2'
  # @@protoc_insertion_point(class_scope:EIDAllocation)
  ))
_sym_db.RegisterMessage(EIDAllocation)

lispspec = _reflection.GeneratedProtocolMessageType('lispspec', (_message.Message,), dict(
  DESCRIPTOR = _LISPSPEC,
  __module__ = 'netcmn_pb2'
  # @@protoc_insertion_point(class_scope:lispspec)
  ))
_sym_db.RegisterMessage(lispspec)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\037com.zededa.cloud.uservice.protoZ\035github.com/zededa/api/zconfig'))
# @@protoc_insertion_point(module_scope)
