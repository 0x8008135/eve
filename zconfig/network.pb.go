// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NetworkKind int32

const (
	NetworkKind_NETWORKKINGNOOP NetworkKind = 0
	NetworkKind_UNDERLAY        NetworkKind = 1
	NetworkKind_OVERLAY         NetworkKind = 2
)

var NetworkKind_name = map[int32]string{
	0: "NETWORKKINGNOOP",
	1: "UNDERLAY",
	2: "OVERLAY",
}
var NetworkKind_value = map[string]int32{
	"NETWORKKINGNOOP": 0,
	"UNDERLAY":        1,
	"OVERLAY":         2,
}

func (x NetworkKind) String() string {
	return proto.EnumName(NetworkKind_name, int32(x))
}
func (NetworkKind) EnumDescriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{0} }

type NetworkState int32

const (
	NetworkState_NSTATENOOP NetworkState = 0
	NetworkState_NARCHIVE   NetworkState = 1
	NetworkState_NACTIVE    NetworkState = 2
	NetworkState_NINACTIVE  NetworkState = 3
)

var NetworkState_name = map[int32]string{
	0: "NSTATENOOP",
	1: "NARCHIVE",
	2: "NACTIVE",
	3: "NINACTIVE",
}
var NetworkState_value = map[string]int32{
	"NSTATENOOP": 0,
	"NARCHIVE":   1,
	"NACTIVE":    2,
	"NINACTIVE":  3,
}

func (x NetworkState) String() string {
	return proto.EnumName(NetworkState_name, int32(x))
}
func (NetworkState) EnumDescriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{1} }

type NetworkServiceSubType int32

const (
	NetworkServiceSubType_NETWORKNOOP    NetworkServiceSubType = 0
	NetworkServiceSubType_NETWORKCREATE  NetworkServiceSubType = 1
	NetworkServiceSubType_NETWORKARCHIVE NetworkServiceSubType = 2
	NetworkServiceSubType_NETWORKUPDATE  NetworkServiceSubType = 3
	NetworkServiceSubType_NETWORKREAD    NetworkServiceSubType = 4
	NetworkServiceSubType_NETWORKLIST    NetworkServiceSubType = 5
)

var NetworkServiceSubType_name = map[int32]string{
	0: "NETWORKNOOP",
	1: "NETWORKCREATE",
	2: "NETWORKARCHIVE",
	3: "NETWORKUPDATE",
	4: "NETWORKREAD",
	5: "NETWORKLIST",
}
var NetworkServiceSubType_value = map[string]int32{
	"NETWORKNOOP":    0,
	"NETWORKCREATE":  1,
	"NETWORKARCHIVE": 2,
	"NETWORKUPDATE":  3,
	"NETWORKREAD":    4,
	"NETWORKLIST":    5,
}

func (x NetworkServiceSubType) String() string {
	return proto.EnumName(NetworkServiceSubType_name, int32(x))
}
func (NetworkServiceSubType) EnumDescriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{2} }

type NetworkServiceResult int32

const (
	NetworkServiceResult_NETWORKNONE       NetworkServiceResult = 0
	NetworkServiceResult_NETWORKOPSSUCCESS NetworkServiceResult = 1
	NetworkServiceResult_NETWORKOPSFAILED  NetworkServiceResult = 2
	NetworkServiceResult_NETWORKNOTFOUND   NetworkServiceResult = 3
)

var NetworkServiceResult_name = map[int32]string{
	0: "NETWORKNONE",
	1: "NETWORKOPSSUCCESS",
	2: "NETWORKOPSFAILED",
	3: "NETWORKNOTFOUND",
}
var NetworkServiceResult_value = map[string]int32{
	"NETWORKNONE":       0,
	"NETWORKOPSSUCCESS": 1,
	"NETWORKOPSFAILED":  2,
	"NETWORKNOTFOUND":   3,
}

func (x NetworkServiceResult) String() string {
	return proto.EnumName(NetworkServiceResult_name, int32(x))
}
func (NetworkServiceResult) EnumDescriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{3} }

type NetworkParam struct {
	Id      string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Project string      `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Desc    string      `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Type    NetworkType `protobuf:"varint,5,opt,name=type,proto3,enum=NetworkType" json:"type,omitempty"`
	Kind    NetworkKind `protobuf:"varint,6,opt,name=kind,proto3,enum=NetworkKind" json:"kind,omitempty"`
	// Types that are valid to be assigned to NetContent:
	//	*NetworkParam_Nl2
	//	*NetworkParam_Nlisp
	//	*NetworkParam_Nv4
	//	*NetworkParam_Nv6
	NetContent isNetworkParam_NetContent `protobuf_oneof:"netContent"`
	State      NetworkState              `protobuf:"varint,12,opt,name=state,proto3,enum=NetworkState" json:"state,omitempty"`
}

func (m *NetworkParam) Reset()                    { *m = NetworkParam{} }
func (m *NetworkParam) String() string            { return proto.CompactTextString(m) }
func (*NetworkParam) ProtoMessage()               {}
func (*NetworkParam) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{0} }

type isNetworkParam_NetContent interface {
	isNetworkParam_NetContent()
	MarshalTo([]byte) (int, error)
	Size() int
}

type NetworkParam_Nl2 struct {
	Nl2 *L2Spec `protobuf:"bytes,8,opt,name=nl2,oneof"`
}
type NetworkParam_Nlisp struct {
	Nlisp *Lispspec `protobuf:"bytes,9,opt,name=nlisp,oneof"`
}
type NetworkParam_Nv4 struct {
	Nv4 *Ipv4Spec `protobuf:"bytes,10,opt,name=nv4,oneof"`
}
type NetworkParam_Nv6 struct {
	Nv6 *Ipv6Spec `protobuf:"bytes,11,opt,name=nv6,oneof"`
}

func (*NetworkParam_Nl2) isNetworkParam_NetContent()   {}
func (*NetworkParam_Nlisp) isNetworkParam_NetContent() {}
func (*NetworkParam_Nv4) isNetworkParam_NetContent()   {}
func (*NetworkParam_Nv6) isNetworkParam_NetContent()   {}

func (m *NetworkParam) GetNetContent() isNetworkParam_NetContent {
	if m != nil {
		return m.NetContent
	}
	return nil
}

func (m *NetworkParam) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkParam) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *NetworkParam) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *NetworkParam) GetType() NetworkType {
	if m != nil {
		return m.Type
	}
	return NetworkType_NETWORKTYPENOOP
}

func (m *NetworkParam) GetKind() NetworkKind {
	if m != nil {
		return m.Kind
	}
	return NetworkKind_NETWORKKINGNOOP
}

func (m *NetworkParam) GetNl2() *L2Spec {
	if x, ok := m.GetNetContent().(*NetworkParam_Nl2); ok {
		return x.Nl2
	}
	return nil
}

func (m *NetworkParam) GetNlisp() *Lispspec {
	if x, ok := m.GetNetContent().(*NetworkParam_Nlisp); ok {
		return x.Nlisp
	}
	return nil
}

func (m *NetworkParam) GetNv4() *Ipv4Spec {
	if x, ok := m.GetNetContent().(*NetworkParam_Nv4); ok {
		return x.Nv4
	}
	return nil
}

func (m *NetworkParam) GetNv6() *Ipv6Spec {
	if x, ok := m.GetNetContent().(*NetworkParam_Nv6); ok {
		return x.Nv6
	}
	return nil
}

func (m *NetworkParam) GetState() NetworkState {
	if m != nil {
		return m.State
	}
	return NetworkState_NSTATENOOP
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkParam) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NetworkParam_OneofMarshaler, _NetworkParam_OneofUnmarshaler, _NetworkParam_OneofSizer, []interface{}{
		(*NetworkParam_Nl2)(nil),
		(*NetworkParam_Nlisp)(nil),
		(*NetworkParam_Nv4)(nil),
		(*NetworkParam_Nv6)(nil),
	}
}

func _NetworkParam_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NetworkParam)
	// netContent
	switch x := m.NetContent.(type) {
	case *NetworkParam_Nl2:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nl2); err != nil {
			return err
		}
	case *NetworkParam_Nlisp:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nlisp); err != nil {
			return err
		}
	case *NetworkParam_Nv4:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nv4); err != nil {
			return err
		}
	case *NetworkParam_Nv6:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nv6); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NetworkParam.NetContent has unexpected type %T", x)
	}
	return nil
}

func _NetworkParam_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NetworkParam)
	switch tag {
	case 8: // netContent.nl2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(L2Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkParam_Nl2{msg}
		return true, err
	case 9: // netContent.nlisp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Lispspec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkParam_Nlisp{msg}
		return true, err
	case 10: // netContent.nv4
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ipv4Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkParam_Nv4{msg}
		return true, err
	case 11: // netContent.nv6
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ipv6Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkParam_Nv6{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkParam_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NetworkParam)
	// netContent
	switch x := m.NetContent.(type) {
	case *NetworkParam_Nl2:
		s := proto.Size(x.Nl2)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkParam_Nlisp:
		s := proto.Size(x.Nlisp)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkParam_Nv4:
		s := proto.Size(x.Nv4)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkParam_Nv6:
		s := proto.Size(x.Nv6)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NetworkServiceReq struct {
	Subcmd NetworkServiceSubType `protobuf:"varint,1,opt,name=subcmd,proto3,enum=NetworkServiceSubType" json:"subcmd,omitempty"`
	Ninfo  *NetworkParam         `protobuf:"bytes,2,opt,name=ninfo" json:"ninfo,omitempty"`
}

func (m *NetworkServiceReq) Reset()                    { *m = NetworkServiceReq{} }
func (m *NetworkServiceReq) String() string            { return proto.CompactTextString(m) }
func (*NetworkServiceReq) ProtoMessage()               {}
func (*NetworkServiceReq) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{1} }

func (m *NetworkServiceReq) GetSubcmd() NetworkServiceSubType {
	if m != nil {
		return m.Subcmd
	}
	return NetworkServiceSubType_NETWORKNOOP
}

func (m *NetworkServiceReq) GetNinfo() *NetworkParam {
	if m != nil {
		return m.Ninfo
	}
	return nil
}

type NetworkServiceResp struct {
	Subcmd NetworkServiceSubType `protobuf:"varint,1,opt,name=subcmd,proto3,enum=NetworkServiceSubType" json:"subcmd,omitempty"`
	Result NetworkServiceResult  `protobuf:"varint,2,opt,name=result,proto3,enum=NetworkServiceResult" json:"result,omitempty"`
	Ninfo  []*NetworkParam       `protobuf:"bytes,3,rep,name=ninfo" json:"ninfo,omitempty"`
}

func (m *NetworkServiceResp) Reset()                    { *m = NetworkServiceResp{} }
func (m *NetworkServiceResp) String() string            { return proto.CompactTextString(m) }
func (*NetworkServiceResp) ProtoMessage()               {}
func (*NetworkServiceResp) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{2} }

func (m *NetworkServiceResp) GetSubcmd() NetworkServiceSubType {
	if m != nil {
		return m.Subcmd
	}
	return NetworkServiceSubType_NETWORKNOOP
}

func (m *NetworkServiceResp) GetResult() NetworkServiceResult {
	if m != nil {
		return m.Result
	}
	return NetworkServiceResult_NETWORKNONE
}

func (m *NetworkServiceResp) GetNinfo() []*NetworkParam {
	if m != nil {
		return m.Ninfo
	}
	return nil
}

type NetworkIf struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	NetworkId string `protobuf:"bytes,3,opt,name=networkId,proto3" json:"networkId,omitempty"`
	// eid=lisp, v4=ipv4 etc...
	Addr     string `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// more configuration for getting addr
	Lispsignature string `protobuf:"bytes,6,opt,name=lispsignature,proto3" json:"lispsignature,omitempty"`
	Pemcert       []byte `protobuf:"bytes,7,opt,name=pemcert,proto3" json:"pemcert,omitempty"`
	Pemprivatekey []byte `protobuf:"bytes,8,opt,name=pemprivatekey,proto3" json:"pemprivatekey,omitempty"`
	// firewall
	Acls []*ACE `protobuf:"bytes,40,rep,name=acls" json:"acls,omitempty"`
}

func (m *NetworkIf) Reset()                    { *m = NetworkIf{} }
func (m *NetworkIf) String() string            { return proto.CompactTextString(m) }
func (*NetworkIf) ProtoMessage()               {}
func (*NetworkIf) Descriptor() ([]byte, []int) { return fileDescriptorNetwork, []int{3} }

func (m *NetworkIf) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkIf) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkIf) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *NetworkIf) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NetworkIf) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NetworkIf) GetLispsignature() string {
	if m != nil {
		return m.Lispsignature
	}
	return ""
}

func (m *NetworkIf) GetPemcert() []byte {
	if m != nil {
		return m.Pemcert
	}
	return nil
}

func (m *NetworkIf) GetPemprivatekey() []byte {
	if m != nil {
		return m.Pemprivatekey
	}
	return nil
}

func (m *NetworkIf) GetAcls() []*ACE {
	if m != nil {
		return m.Acls
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkParam)(nil), "NetworkParam")
	proto.RegisterType((*NetworkServiceReq)(nil), "NetworkServiceReq")
	proto.RegisterType((*NetworkServiceResp)(nil), "NetworkServiceResp")
	proto.RegisterType((*NetworkIf)(nil), "NetworkIf")
	proto.RegisterEnum("NetworkKind", NetworkKind_name, NetworkKind_value)
	proto.RegisterEnum("NetworkState", NetworkState_name, NetworkState_value)
	proto.RegisterEnum("NetworkServiceSubType", NetworkServiceSubType_name, NetworkServiceSubType_value)
	proto.RegisterEnum("NetworkServiceResult", NetworkServiceResult_name, NetworkServiceResult_value)
}
func (m *NetworkParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Project) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Project)))
		i += copy(dAtA[i:], m.Project)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Type))
	}
	if m.Kind != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Kind))
	}
	if m.NetContent != nil {
		nn1, err := m.NetContent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.State != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *NetworkParam_Nl2) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Nl2 != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Nl2.Size()))
		n2, err := m.Nl2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *NetworkParam_Nlisp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Nlisp != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Nlisp.Size()))
		n3, err := m.Nlisp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *NetworkParam_Nv4) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Nv4 != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Nv4.Size()))
		n4, err := m.Nv4.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *NetworkParam_Nv6) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Nv6 != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Nv6.Size()))
		n5, err := m.Nv6.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *NetworkServiceReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkServiceReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Subcmd != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Subcmd))
	}
	if m.Ninfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Ninfo.Size()))
		n6, err := m.Ninfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *NetworkServiceResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkServiceResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Subcmd != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Subcmd))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(m.Result))
	}
	if len(m.Ninfo) > 0 {
		for _, msg := range m.Ninfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NetworkIf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkIf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.NetworkId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.NetworkId)))
		i += copy(dAtA[i:], m.NetworkId)
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if len(m.Hostname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Hostname)))
		i += copy(dAtA[i:], m.Hostname)
	}
	if len(m.Lispsignature) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Lispsignature)))
		i += copy(dAtA[i:], m.Lispsignature)
	}
	if len(m.Pemcert) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Pemcert)))
		i += copy(dAtA[i:], m.Pemcert)
	}
	if len(m.Pemprivatekey) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintNetwork(dAtA, i, uint64(len(m.Pemprivatekey)))
		i += copy(dAtA[i:], m.Pemprivatekey)
	}
	if len(m.Acls) > 0 {
		for _, msg := range m.Acls {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x2
			i++
			i = encodeVarintNetwork(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintNetwork(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NetworkParam) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Project)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovNetwork(uint64(m.Type))
	}
	if m.Kind != 0 {
		n += 1 + sovNetwork(uint64(m.Kind))
	}
	if m.NetContent != nil {
		n += m.NetContent.Size()
	}
	if m.State != 0 {
		n += 1 + sovNetwork(uint64(m.State))
	}
	return n
}

func (m *NetworkParam_Nl2) Size() (n int) {
	var l int
	_ = l
	if m.Nl2 != nil {
		l = m.Nl2.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *NetworkParam_Nlisp) Size() (n int) {
	var l int
	_ = l
	if m.Nlisp != nil {
		l = m.Nlisp.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *NetworkParam_Nv4) Size() (n int) {
	var l int
	_ = l
	if m.Nv4 != nil {
		l = m.Nv4.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *NetworkParam_Nv6) Size() (n int) {
	var l int
	_ = l
	if m.Nv6 != nil {
		l = m.Nv6.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}
func (m *NetworkServiceReq) Size() (n int) {
	var l int
	_ = l
	if m.Subcmd != 0 {
		n += 1 + sovNetwork(uint64(m.Subcmd))
	}
	if m.Ninfo != nil {
		l = m.Ninfo.Size()
		n += 1 + l + sovNetwork(uint64(l))
	}
	return n
}

func (m *NetworkServiceResp) Size() (n int) {
	var l int
	_ = l
	if m.Subcmd != 0 {
		n += 1 + sovNetwork(uint64(m.Subcmd))
	}
	if m.Result != 0 {
		n += 1 + sovNetwork(uint64(m.Result))
	}
	if len(m.Ninfo) > 0 {
		for _, e := range m.Ninfo {
			l = e.Size()
			n += 1 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func (m *NetworkIf) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.NetworkId)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Lispsignature)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Pemcert)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	l = len(m.Pemprivatekey)
	if l > 0 {
		n += 1 + l + sovNetwork(uint64(l))
	}
	if len(m.Acls) > 0 {
		for _, e := range m.Acls {
			l = e.Size()
			n += 2 + l + sovNetwork(uint64(l))
		}
	}
	return n
}

func sovNetwork(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetwork(x uint64) (n int) {
	return sovNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (NetworkType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (NetworkKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nl2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &L2Spec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetContent = &NetworkParam_Nl2{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nlisp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Lispspec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetContent = &NetworkParam_Nlisp{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nv4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ipv4Spec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetContent = &NetworkParam_Nv4{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nv6", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ipv6Spec{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.NetContent = &NetworkParam_Nv6{v}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (NetworkState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkServiceReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkServiceReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkServiceReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subcmd", wireType)
			}
			m.Subcmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subcmd |= (NetworkServiceSubType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ninfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ninfo == nil {
				m.Ninfo = &NetworkParam{}
			}
			if err := m.Ninfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkServiceResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkServiceResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkServiceResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subcmd", wireType)
			}
			m.Subcmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subcmd |= (NetworkServiceSubType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (NetworkServiceResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ninfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ninfo = append(m.Ninfo, &NetworkParam{})
			if err := m.Ninfo[len(m.Ninfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkIf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkIf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkIf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lispsignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lispsignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pemcert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pemcert = append(m.Pemcert[:0], dAtA[iNdEx:postIndex]...)
			if m.Pemcert == nil {
				m.Pemcert = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pemprivatekey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pemprivatekey = append(m.Pemprivatekey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pemprivatekey == nil {
				m.Pemprivatekey = []byte{}
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetwork
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Acls = append(m.Acls, &ACE{})
			if err := m.Acls[len(m.Acls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetwork
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetwork
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetwork(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetwork = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetwork   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("network.proto", fileDescriptorNetwork) }

var fileDescriptorNetwork = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xf3, 0x44,
	0x10, 0x8e, 0xed, 0x7c, 0x4e, 0x9c, 0xbc, 0xee, 0xd2, 0x22, 0xab, 0xd0, 0x10, 0x0a, 0x87, 0x28,
	0x12, 0xae, 0x14, 0xaa, 0xde, 0x38, 0xb8, 0x89, 0x4b, 0xa3, 0x56, 0x4e, 0xb4, 0x76, 0x8a, 0xe0,
	0xe6, 0xd8, 0x9b, 0xd6, 0x34, 0x5e, 0x1b, 0x7b, 0x9d, 0xaa, 0x3d, 0xf3, 0x23, 0xfa, 0x93, 0x38,
	0x72, 0xe1, 0x8e, 0xca, 0xef, 0x40, 0x42, 0x5e, 0x3b, 0x5f, 0x50, 0x0e, 0xef, 0x6d, 0x9e, 0x8f,
	0x9d, 0x19, 0x8d, 0x9f, 0x04, 0x5a, 0x94, 0xb0, 0xa7, 0x30, 0x7e, 0xd4, 0xa2, 0x38, 0x64, 0xe1,
	0x71, 0x7d, 0xf1, 0x54, 0x54, 0x32, 0x25, 0xcc, 0x0d, 0x68, 0x8e, 0x4e, 0xff, 0x10, 0x41, 0x36,
	0x73, 0xe7, 0xd4, 0x89, 0x9d, 0x00, 0xb5, 0x41, 0xf4, 0x3d, 0x55, 0xe8, 0x0a, 0xbd, 0x06, 0x16,
	0x7d, 0x0f, 0x21, 0x28, 0x53, 0x27, 0x20, 0xaa, 0xc8, 0x19, 0x5e, 0x23, 0x15, 0x6a, 0x51, 0x1c,
	0xfe, 0x4c, 0x5c, 0xa6, 0x4a, 0x9c, 0x5e, 0xc3, 0xcc, 0xed, 0x91, 0xc4, 0x55, 0xcb, 0xb9, 0x3b,
	0xab, 0x51, 0x17, 0xca, 0xec, 0x39, 0x22, 0x6a, 0xa5, 0x2b, 0xf4, 0xda, 0x03, 0x59, 0x2b, 0xc6,
	0xd9, 0xcf, 0x11, 0xc1, 0x5c, 0xc9, 0x1c, 0x8f, 0x3e, 0xf5, 0xd4, 0xea, 0xbe, 0xe3, 0xc6, 0xa7,
	0x1e, 0xe6, 0x0a, 0xfa, 0x0c, 0x24, 0xba, 0x1c, 0xa8, 0xf5, 0xae, 0xd0, 0x6b, 0x0e, 0x6a, 0xda,
	0x72, 0x90, 0x44, 0xc4, 0xbd, 0x2e, 0xe1, 0x8c, 0x45, 0x5f, 0x42, 0x85, 0x2e, 0xfd, 0x24, 0x52,
	0x1b, 0x5c, 0x6e, 0x68, 0x19, 0x28, 0x0c, 0xb9, 0x82, 0x4e, 0x40, 0xa2, 0xab, 0x73, 0x15, 0x0a,
	0x83, 0x1f, 0xad, 0xce, 0x37, 0x1d, 0x56, 0xe7, 0xb9, 0x7c, 0xa1, 0x36, 0xb7, 0xf2, 0xc5, 0x56,
	0xbe, 0x40, 0x5f, 0x41, 0x25, 0x61, 0x0e, 0x23, 0xaa, 0xcc, 0x17, 0x6c, 0xad, 0x17, 0xb4, 0x32,
	0x12, 0xe7, 0xda, 0xa5, 0x0c, 0x40, 0x09, 0x1b, 0x86, 0x94, 0x11, 0xca, 0x4e, 0x1f, 0xe0, 0x60,
	0x6d, 0x22, 0xf1, 0xca, 0x77, 0x09, 0x26, 0xbf, 0x20, 0x0d, 0xaa, 0x49, 0x3a, 0x77, 0x83, 0xfc,
	0xbe, 0xed, 0xc1, 0xa7, 0xda, 0xbe, 0xc7, 0x4a, 0xe7, 0xfc, 0x2a, 0x85, 0x2b, 0x9b, 0x4b, 0x7d,
	0xba, 0x08, 0xf9, 0xf1, 0x9b, 0xdb, 0xb9, 0xfc, 0x4b, 0xe1, 0x5c, 0x3b, 0x7d, 0x15, 0x00, 0xfd,
	0x7b, 0x54, 0x12, 0x7d, 0xf4, 0xac, 0x6f, 0xa0, 0x1a, 0x93, 0x24, 0x5d, 0x32, 0x3e, 0xac, 0x3d,
	0x38, 0xd2, 0xfe, 0xd3, 0x34, 0x5d, 0x32, 0x5c, 0x98, 0xb6, 0xab, 0x49, 0x5d, 0xe9, 0x7f, 0x57,
	0xfb, 0x5b, 0x80, 0x46, 0xc1, 0x8f, 0x17, 0x9b, 0x24, 0x09, 0x3b, 0x49, 0xca, 0xd3, 0x26, 0x6e,
	0xd2, 0xf6, 0x39, 0x34, 0x8a, 0xdc, 0x8e, 0xbd, 0x22, 0x5b, 0x5b, 0x22, 0xeb, 0xe0, 0x78, 0x5e,
	0xbc, 0x4e, 0x57, 0x56, 0xa3, 0x63, 0xa8, 0x3f, 0x84, 0x09, 0xe3, 0x9d, 0x2b, 0x9c, 0xdf, 0x60,
	0xf4, 0x35, 0xb4, 0x78, 0x14, 0xfc, 0x7b, 0xea, 0xb0, 0x34, 0x26, 0x3c, 0x60, 0x0d, 0xbc, 0x4f,
	0xf2, 0x34, 0x93, 0xc0, 0x25, 0x31, 0x53, 0x6b, 0x5d, 0xa1, 0x27, 0xe3, 0x35, 0xcc, 0xde, 0x47,
	0x24, 0x88, 0x62, 0x7f, 0xe5, 0x30, 0xf2, 0x48, 0x9e, 0x79, 0xfe, 0x64, 0xbc, 0x4f, 0x22, 0x15,
	0xca, 0x8e, 0xbb, 0x4c, 0xd4, 0x1e, 0xbf, 0x44, 0x59, 0xd3, 0x87, 0x06, 0xe6, 0x4c, 0xff, 0x3b,
	0x68, 0xee, 0x44, 0x19, 0x7d, 0x02, 0x1f, 0x4c, 0xc3, 0xfe, 0x61, 0x82, 0x6f, 0x6e, 0xc6, 0xe6,
	0xf7, 0xe6, 0x64, 0x32, 0x55, 0x4a, 0x48, 0x86, 0xfa, 0xcc, 0x1c, 0x19, 0xf8, 0x56, 0xff, 0x51,
	0x11, 0x50, 0x13, 0x6a, 0x93, 0xbb, 0x1c, 0x88, 0xfd, 0xeb, 0xcd, 0x4f, 0x93, 0x07, 0x0d, 0xb5,
	0x01, 0x4c, 0xcb, 0xd6, 0x6d, 0x63, 0xfb, 0xd4, 0xd4, 0xf1, 0xf0, 0x7a, 0x7c, 0x67, 0xe4, 0x4f,
	0x4d, 0x7d, 0x68, 0x67, 0x40, 0x44, 0x2d, 0x68, 0x98, 0xe3, 0x35, 0x94, 0xfa, 0xbf, 0x0a, 0x70,
	0xf4, 0xee, 0xe7, 0x47, 0x1f, 0xa0, 0x59, 0xec, 0x54, 0x34, 0x3d, 0x80, 0x56, 0x41, 0x0c, 0xb1,
	0xa1, 0xdb, 0x59, 0x67, 0x04, 0xed, 0x82, 0x5a, 0x4f, 0x13, 0x77, 0x6c, 0xb3, 0xe9, 0x28, 0xb3,
	0x49, 0x3b, 0xad, 0xb0, 0xa1, 0x8f, 0x94, 0xf2, 0x0e, 0x71, 0x3b, 0xb6, 0x6c, 0xa5, 0xd2, 0xf7,
	0xe1, 0xf0, 0xbd, 0x50, 0xed, 0x2d, 0x61, 0x1a, 0x4a, 0x09, 0x1d, 0xc1, 0x41, 0x41, 0x4c, 0xa6,
	0x96, 0x35, 0x1b, 0x0e, 0x0d, 0xcb, 0x52, 0x04, 0x74, 0x08, 0xca, 0x96, 0xbe, 0xd2, 0xc7, 0xb7,
	0xc6, 0x48, 0x11, 0x77, 0xce, 0x6a, 0x4e, 0xec, 0xab, 0xc9, 0xcc, 0x1c, 0x29, 0xd2, 0xe5, 0xf4,
	0xb7, 0xb7, 0x8e, 0xf0, 0xfb, 0x5b, 0x47, 0xf8, 0xf3, 0xad, 0x23, 0xbc, 0xfe, 0xd5, 0x29, 0xc1,
	0x17, 0x6e, 0x18, 0x68, 0x2f, 0xc4, 0x23, 0x9e, 0xa3, 0xb9, 0xcb, 0x30, 0xf5, 0xb4, 0x34, 0xc9,
	0xb7, 0xc8, 0xff, 0x0a, 0x7f, 0x3a, 0xb9, 0xf7, 0xd9, 0x43, 0x3a, 0xd7, 0xdc, 0x30, 0x38, 0xcb,
	0x7d, 0x67, 0x4e, 0xe4, 0x9f, 0xbd, 0xb8, 0x21, 0x5d, 0xf8, 0xf7, 0xf3, 0x2a, 0x77, 0x7d, 0xfb,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x2d, 0xd9, 0xc2, 0x59, 0x05, 0x00, 0x00,
}
