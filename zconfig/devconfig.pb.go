// Code generated by protoc-gen-go. DO NOT EDIT.
// source: devconfig.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MapServer struct {
	NameOrIp   string `protobuf:"bytes,1,opt,name=NameOrIp" json:"NameOrIp,omitempty"`
	Credential string `protobuf:"bytes,2,opt,name=Credential" json:"Credential,omitempty"`
}

func (m *MapServer) Reset()                    { *m = MapServer{} }
func (m *MapServer) String() string            { return proto.CompactTextString(m) }
func (*MapServer) ProtoMessage()               {}
func (*MapServer) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *MapServer) GetNameOrIp() string {
	if m != nil {
		return m.NameOrIp
	}
	return ""
}

func (m *MapServer) GetCredential() string {
	if m != nil {
		return m.Credential
	}
	return ""
}

type ZedServer struct {
	HostName string   `protobuf:"bytes,1,opt,name=HostName" json:"HostName,omitempty"`
	EID      []string `protobuf:"bytes,2,rep,name=EID" json:"EID,omitempty"`
}

func (m *ZedServer) Reset()                    { *m = ZedServer{} }
func (m *ZedServer) String() string            { return proto.CompactTextString(m) }
func (*ZedServer) ProtoMessage()               {}
func (*ZedServer) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ZedServer) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *ZedServer) GetEID() []string {
	if m != nil {
		return m.EID
	}
	return nil
}

type DeviceLispDetails struct {
	LispMapServers         []*MapServer `protobuf:"bytes,1,rep,name=LispMapServers" json:"LispMapServers,omitempty"`
	LispInstance           uint32       `protobuf:"varint,2,opt,name=LispInstance" json:"LispInstance,omitempty"`
	EID                    string       `protobuf:"bytes,4,opt,name=EID" json:"EID,omitempty"`
	EIDHashLen             uint32       `protobuf:"varint,5,opt,name=EIDHashLen" json:"EIDHashLen,omitempty"`
	ZedServers             []*ZedServer `protobuf:"bytes,6,rep,name=ZedServers" json:"ZedServers,omitempty"`
	EidAllocationPrefix    []byte       `protobuf:"bytes,8,opt,name=EidAllocationPrefix,proto3" json:"EidAllocationPrefix,omitempty"`
	EidAllocationPrefixLen uint32       `protobuf:"varint,9,opt,name=EidAllocationPrefixLen" json:"EidAllocationPrefixLen,omitempty"`
	ClientAddr             string       `protobuf:"bytes,10,opt,name=ClientAddr" json:"ClientAddr,omitempty"`
}

func (m *DeviceLispDetails) Reset()                    { *m = DeviceLispDetails{} }
func (m *DeviceLispDetails) String() string            { return proto.CompactTextString(m) }
func (*DeviceLispDetails) ProtoMessage()               {}
func (*DeviceLispDetails) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *DeviceLispDetails) GetLispMapServers() []*MapServer {
	if m != nil {
		return m.LispMapServers
	}
	return nil
}

func (m *DeviceLispDetails) GetLispInstance() uint32 {
	if m != nil {
		return m.LispInstance
	}
	return 0
}

func (m *DeviceLispDetails) GetEID() string {
	if m != nil {
		return m.EID
	}
	return ""
}

func (m *DeviceLispDetails) GetEIDHashLen() uint32 {
	if m != nil {
		return m.EIDHashLen
	}
	return 0
}

func (m *DeviceLispDetails) GetZedServers() []*ZedServer {
	if m != nil {
		return m.ZedServers
	}
	return nil
}

func (m *DeviceLispDetails) GetEidAllocationPrefix() []byte {
	if m != nil {
		return m.EidAllocationPrefix
	}
	return nil
}

func (m *DeviceLispDetails) GetEidAllocationPrefixLen() uint32 {
	if m != nil {
		return m.EidAllocationPrefixLen
	}
	return 0
}

func (m *DeviceLispDetails) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

// Device Operational Commands Semantic
// For rebooting device,  command=Reset, counter = counter+delta, desiredState = on
// For poweroff device,  command=Reset, counter = counter+delta, desiredState = off
// For backup at midnight, command=Backup, counter = counter+delta, desiredState=n/a, opsTime = mm/dd/yy:hh:ss
//
type DeviceOpsCmd struct {
	Counter      uint32 `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
	DesriedState bool   `protobuf:"varint,3,opt,name=desriedState" json:"desriedState,omitempty"`
	OpsTime      string `protobuf:"bytes,4,opt,name=opsTime" json:"opsTime,omitempty"`
}

func (m *DeviceOpsCmd) Reset()                    { *m = DeviceOpsCmd{} }
func (m *DeviceOpsCmd) String() string            { return proto.CompactTextString(m) }
func (*DeviceOpsCmd) ProtoMessage()               {}
func (*DeviceOpsCmd) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *DeviceOpsCmd) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *DeviceOpsCmd) GetDesriedState() bool {
	if m != nil {
		return m.DesriedState
	}
	return false
}

func (m *DeviceOpsCmd) GetOpsTime() string {
	if m != nil {
		return m.OpsTime
	}
	return ""
}

type EdgeDevConfig struct {
	Id                 *UUIDandVersion      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DevConfigSha256    []byte               `protobuf:"bytes,2,opt,name=devConfigSha256,proto3" json:"devConfigSha256,omitempty"`
	DevConfigSignature []byte               `protobuf:"bytes,3,opt,name=devConfigSignature,proto3" json:"devConfigSignature,omitempty"`
	Apps               []*AppInstanceConfig `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
	Networks           []*NetworkConfig     `protobuf:"bytes,5,rep,name=networks" json:"networks,omitempty"`
	Datastores         []*DatastoreConfig   `protobuf:"bytes,6,rep,name=datastores" json:"datastores,omitempty"`
	LispInfo           *DeviceLispDetails   `protobuf:"bytes,7,opt,name=lispInfo" json:"lispInfo,omitempty"`
	Base               []*BaseOSConfig      `protobuf:"bytes,8,rep,name=base" json:"base,omitempty"`
	Reset_             *DeviceOpsCmd        `protobuf:"bytes,9,opt,name=reset" json:"reset,omitempty"`
	Backup             *DeviceOpsCmd        `protobuf:"bytes,10,opt,name=backup" json:"backup,omitempty"`
}

func (m *EdgeDevConfig) Reset()                    { *m = EdgeDevConfig{} }
func (m *EdgeDevConfig) String() string            { return proto.CompactTextString(m) }
func (*EdgeDevConfig) ProtoMessage()               {}
func (*EdgeDevConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *EdgeDevConfig) GetId() *UUIDandVersion {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EdgeDevConfig) GetDevConfigSha256() []byte {
	if m != nil {
		return m.DevConfigSha256
	}
	return nil
}

func (m *EdgeDevConfig) GetDevConfigSignature() []byte {
	if m != nil {
		return m.DevConfigSignature
	}
	return nil
}

func (m *EdgeDevConfig) GetApps() []*AppInstanceConfig {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *EdgeDevConfig) GetNetworks() []*NetworkConfig {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *EdgeDevConfig) GetDatastores() []*DatastoreConfig {
	if m != nil {
		return m.Datastores
	}
	return nil
}

func (m *EdgeDevConfig) GetLispInfo() *DeviceLispDetails {
	if m != nil {
		return m.LispInfo
	}
	return nil
}

func (m *EdgeDevConfig) GetBase() []*BaseOSConfig {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *EdgeDevConfig) GetReset_() *DeviceOpsCmd {
	if m != nil {
		return m.Reset_
	}
	return nil
}

func (m *EdgeDevConfig) GetBackup() *DeviceOpsCmd {
	if m != nil {
		return m.Backup
	}
	return nil
}

func init() {
	proto.RegisterType((*MapServer)(nil), "MapServer")
	proto.RegisterType((*ZedServer)(nil), "ZedServer")
	proto.RegisterType((*DeviceLispDetails)(nil), "DeviceLispDetails")
	proto.RegisterType((*DeviceOpsCmd)(nil), "DeviceOpsCmd")
	proto.RegisterType((*EdgeDevConfig)(nil), "EdgeDevConfig")
}

func init() { proto.RegisterFile("devconfig.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 614 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xdf, 0x4e, 0x1b, 0x3b,
	0x10, 0xc6, 0x95, 0x3f, 0x40, 0x32, 0x24, 0xc0, 0xf1, 0x91, 0x8e, 0x2c, 0xa4, 0x53, 0xd2, 0x54,
	0xad, 0x22, 0x2e, 0x0c, 0x4a, 0x55, 0xa4, 0xde, 0x15, 0x48, 0x54, 0x22, 0x51, 0xa8, 0x36, 0xa5,
	0x17, 0xdc, 0x39, 0xeb, 0x49, 0xb0, 0xc8, 0xda, 0x2b, 0xdb, 0x49, 0x2b, 0x5e, 0xaa, 0x0f, 0xd3,
	0x17, 0xaa, 0xec, 0xfd, 0x43, 0x02, 0xf4, 0x2e, 0xf3, 0xfb, 0x3e, 0x3b, 0xdf, 0xce, 0xcc, 0x2e,
	0xec, 0x0a, 0x5c, 0xc6, 0x5a, 0x4d, 0xe5, 0x8c, 0xa5, 0x46, 0x3b, 0xbd, 0x9f, 0x81, 0x24, 0xd1,
	0xaa, 0x00, 0x3c, 0x4d, 0xd7, 0x1c, 0x64, 0xc2, 0x2d, 0x6a, 0xbb, 0x7e, 0x4a, 0xa1, 0x5b, 0x03,
	0x6d, 0xeb, 0xb4, 0xe1, 0x33, 0xcc, 0xca, 0xee, 0x67, 0x68, 0x7e, 0xe1, 0xe9, 0x18, 0xcd, 0x12,
	0x0d, 0xd9, 0x87, 0xc6, 0x15, 0x4f, 0xf0, 0xda, 0x8c, 0x52, 0x5a, 0xe9, 0x54, 0x7a, 0xcd, 0xa8,
	0xac, 0xc9, 0x2b, 0x80, 0x73, 0x83, 0x02, 0x95, 0x93, 0x7c, 0x4e, 0xab, 0x41, 0x5d, 0x21, 0xdd,
	0x8f, 0xd0, 0xbc, 0x45, 0xf1, 0x78, 0xd1, 0x85, 0xb6, 0xce, 0x1f, 0x2e, 0x2e, 0x2a, 0x6a, 0xb2,
	0x07, 0xb5, 0xe1, 0x68, 0x40, 0xab, 0x9d, 0x5a, 0xaf, 0x19, 0xf9, 0x9f, 0xdd, 0xdf, 0x55, 0xf8,
	0x67, 0x80, 0x4b, 0x19, 0xe3, 0xa5, 0xb4, 0xe9, 0x00, 0x1d, 0x97, 0x73, 0x4b, 0xfa, 0xb0, 0xe3,
	0xcb, 0x32, 0x9d, 0xa5, 0x95, 0x4e, 0xad, 0xb7, 0xdd, 0x07, 0x56, 0xa2, 0xe8, 0x89, 0x83, 0x74,
	0xa1, 0xe5, 0xc9, 0x48, 0x59, 0xc7, 0x55, 0x8c, 0x21, 0x66, 0x3b, 0x5a, 0x63, 0xc5, 0xff, 0xd7,
	0x43, 0x2c, 0xff, 0xd3, 0x3f, 0xda, 0x70, 0x34, 0xb8, 0xe0, 0xf6, 0xee, 0x12, 0x15, 0xdd, 0x08,
	0x67, 0x56, 0x08, 0x39, 0x04, 0x28, 0x1f, 0xcd, 0xd2, 0xcd, 0x3c, 0x45, 0x89, 0xa2, 0x15, 0x95,
	0x1c, 0xc3, 0xbf, 0x43, 0x29, 0x4e, 0xe7, 0x73, 0x1d, 0x73, 0x27, 0xb5, 0xfa, 0x6a, 0x70, 0x2a,
	0x7f, 0xd2, 0x46, 0xa7, 0xd2, 0x6b, 0x45, 0x2f, 0x49, 0xe4, 0x04, 0xfe, 0x7b, 0x01, 0xfb, 0x24,
	0xcd, 0x90, 0xe4, 0x2f, 0x6a, 0x18, 0xc8, 0x5c, 0xa2, 0x72, 0xa7, 0x42, 0x18, 0x0a, 0xf9, 0x40,
	0x4a, 0xd2, 0x9d, 0x42, 0x2b, 0x6b, 0xea, 0x75, 0x6a, 0xcf, 0x13, 0x41, 0x28, 0x6c, 0xc5, 0x7a,
	0xa1, 0x1c, 0x9a, 0xbc, 0x2d, 0x45, 0xe9, 0xbb, 0x26, 0xd0, 0x1a, 0x89, 0x62, 0xec, 0xb8, 0x43,
	0x5a, 0xeb, 0x54, 0x7a, 0x8d, 0x68, 0x8d, 0xf9, 0xd3, 0x3a, 0xb5, 0xdf, 0x64, 0x82, 0x79, 0xe7,
	0x8a, 0xb2, 0xfb, 0xab, 0x06, 0xed, 0xa1, 0x98, 0xe1, 0x00, 0x97, 0xe7, 0x61, 0xd1, 0xc8, 0x01,
	0x54, 0xa5, 0x08, 0x73, 0xdf, 0xee, 0xef, 0xb2, 0x9b, 0x9b, 0xd1, 0x80, 0x2b, 0xf1, 0x1d, 0x8d,
	0x95, 0x5a, 0x45, 0x55, 0x29, 0x48, 0x2f, 0x6c, 0x77, 0xe6, 0x1e, 0xdf, 0xf1, 0xfe, 0x87, 0x93,
	0x10, 0xa9, 0x15, 0x3d, 0xc5, 0x84, 0x01, 0x79, 0x44, 0x72, 0xa6, 0xb8, 0x5b, 0x98, 0x2c, 0x60,
	0x2b, 0x7a, 0x41, 0x21, 0xef, 0xa0, 0xce, 0xd3, 0xd4, 0xd2, 0x7a, 0x18, 0x12, 0x61, 0xa7, 0x69,
	0x39, 0xf8, 0xcc, 0x1a, 0x05, 0x9d, 0x1c, 0x42, 0x43, 0xa1, 0xfb, 0xa1, 0xcd, 0xbd, 0xa5, 0x1b,
	0xc1, 0xbb, 0xc3, 0xae, 0x32, 0x90, 0xfb, 0x4a, 0x9d, 0x1c, 0x03, 0x08, 0xee, 0xb8, 0x7f, 0x6f,
	0xb0, 0x18, 0xff, 0x1e, 0x1b, 0x14, 0x28, 0xf7, 0xaf, 0x78, 0x08, 0x83, 0xc6, 0x3c, 0xac, 0xdc,
	0x54, 0xd3, 0xad, 0xd0, 0x06, 0xc2, 0x9e, 0x2d, 0x78, 0x54, 0x7a, 0xc8, 0x6b, 0xa8, 0xfb, 0x57,
	0x97, 0x36, 0xc2, 0xdd, 0x6d, 0x76, 0xc6, 0x2d, 0x5e, 0x8f, 0x8b, 0xc0, 0x5e, 0x22, 0x6f, 0x60,
	0xc3, 0xa0, 0x45, 0x17, 0x96, 0xc2, 0x7b, 0x56, 0x67, 0x1b, 0x65, 0x1a, 0x79, 0x0b, 0x9b, 0x13,
	0x1e, 0xdf, 0x2f, 0xd2, 0xb0, 0x0e, 0xcf, 0x5c, 0xb9, 0x78, 0xf6, 0x09, 0x0e, 0x62, 0x9d, 0xb0,
	0x07, 0x14, 0x28, 0x38, 0x8b, 0xe7, 0x7a, 0x21, 0xd8, 0xc2, 0xa2, 0xf1, 0xd6, 0xec, 0xb3, 0x70,
	0xfb, 0xff, 0x4c, 0xba, 0xbb, 0xc5, 0x84, 0xc5, 0x3a, 0x39, 0xca, 0x7c, 0x47, 0x3c, 0x95, 0x47,
	0x0f, 0xd9, 0xa7, 0x64, 0xb2, 0x19, 0x5c, 0xef, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x50, 0x45,
	0xb2, 0xf9, 0xa5, 0x04, 0x00, 0x00,
}
