// Code generated by protoc-gen-go. DO NOT EDIT.
// source: devconfig.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MapServer struct {
	NameOrIp   string `protobuf:"bytes,1,opt,name=NameOrIp" json:"NameOrIp,omitempty"`
	Credential string `protobuf:"bytes,2,opt,name=Credential" json:"Credential,omitempty"`
}

func (m *MapServer) Reset()                    { *m = MapServer{} }
func (m *MapServer) String() string            { return proto.CompactTextString(m) }
func (*MapServer) ProtoMessage()               {}
func (*MapServer) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *MapServer) GetNameOrIp() string {
	if m != nil {
		return m.NameOrIp
	}
	return ""
}

func (m *MapServer) GetCredential() string {
	if m != nil {
		return m.Credential
	}
	return ""
}

type ZedServer struct {
	HostName string   `protobuf:"bytes,1,opt,name=HostName" json:"HostName,omitempty"`
	EID      []string `protobuf:"bytes,2,rep,name=EID" json:"EID,omitempty"`
}

func (m *ZedServer) Reset()                    { *m = ZedServer{} }
func (m *ZedServer) String() string            { return proto.CompactTextString(m) }
func (*ZedServer) ProtoMessage()               {}
func (*ZedServer) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ZedServer) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *ZedServer) GetEID() []string {
	if m != nil {
		return m.EID
	}
	return nil
}

type DeviceLispDetails struct {
	LispMapServers         []*MapServer `protobuf:"bytes,1,rep,name=LispMapServers" json:"LispMapServers,omitempty"`
	LispInstance           uint32       `protobuf:"varint,2,opt,name=LispInstance" json:"LispInstance,omitempty"`
	EID                    string       `protobuf:"bytes,4,opt,name=EID" json:"EID,omitempty"`
	EIDHashLen             uint32       `protobuf:"varint,5,opt,name=EIDHashLen" json:"EIDHashLen,omitempty"`
	ZedServers             []*ZedServer `protobuf:"bytes,6,rep,name=ZedServers" json:"ZedServers,omitempty"`
	EidAllocationPrefix    []byte       `protobuf:"bytes,8,opt,name=EidAllocationPrefix,proto3" json:"EidAllocationPrefix,omitempty"`
	EidAllocationPrefixLen uint32       `protobuf:"varint,9,opt,name=EidAllocationPrefixLen" json:"EidAllocationPrefixLen,omitempty"`
	ClientAddr             string       `protobuf:"bytes,10,opt,name=ClientAddr" json:"ClientAddr,omitempty"`
	Experimental           bool         `protobuf:"varint,20,opt,name=Experimental" json:"Experimental,omitempty"`
}

func (m *DeviceLispDetails) Reset()                    { *m = DeviceLispDetails{} }
func (m *DeviceLispDetails) String() string            { return proto.CompactTextString(m) }
func (*DeviceLispDetails) ProtoMessage()               {}
func (*DeviceLispDetails) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *DeviceLispDetails) GetLispMapServers() []*MapServer {
	if m != nil {
		return m.LispMapServers
	}
	return nil
}

func (m *DeviceLispDetails) GetLispInstance() uint32 {
	if m != nil {
		return m.LispInstance
	}
	return 0
}

func (m *DeviceLispDetails) GetEID() string {
	if m != nil {
		return m.EID
	}
	return ""
}

func (m *DeviceLispDetails) GetEIDHashLen() uint32 {
	if m != nil {
		return m.EIDHashLen
	}
	return 0
}

func (m *DeviceLispDetails) GetZedServers() []*ZedServer {
	if m != nil {
		return m.ZedServers
	}
	return nil
}

func (m *DeviceLispDetails) GetEidAllocationPrefix() []byte {
	if m != nil {
		return m.EidAllocationPrefix
	}
	return nil
}

func (m *DeviceLispDetails) GetEidAllocationPrefixLen() uint32 {
	if m != nil {
		return m.EidAllocationPrefixLen
	}
	return 0
}

func (m *DeviceLispDetails) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

func (m *DeviceLispDetails) GetExperimental() bool {
	if m != nil {
		return m.Experimental
	}
	return false
}

// Device Operational Commands Semantic
// For rebooting device,  command=Reset, counter = counter+delta, desiredState = on
// For poweroff device,  command=Reset, counter = counter+delta, desiredState = off
// For backup at midnight, command=Backup, counter = counter+delta, desiredState=n/a, opsTime = mm/dd/yy:hh:ss
// Current implementation does support only single command outstanding for each type
// In future can be extended to have more scheduled events
//
type DeviceOpsCmd struct {
	Counter      uint32 `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
	DesiredState bool   `protobuf:"varint,3,opt,name=desiredState" json:"desiredState,omitempty"`
	// FIXME: change to timestamp, once we move to gogo proto
	OpsTime string `protobuf:"bytes,4,opt,name=opsTime" json:"opsTime,omitempty"`
}

func (m *DeviceOpsCmd) Reset()                    { *m = DeviceOpsCmd{} }
func (m *DeviceOpsCmd) String() string            { return proto.CompactTextString(m) }
func (*DeviceOpsCmd) ProtoMessage()               {}
func (*DeviceOpsCmd) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *DeviceOpsCmd) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *DeviceOpsCmd) GetDesiredState() bool {
	if m != nil {
		return m.DesiredState
	}
	return false
}

func (m *DeviceOpsCmd) GetOpsTime() string {
	if m != nil {
		return m.OpsTime
	}
	return ""
}

type EdgeDevConfig struct {
	Id                 *UUIDandVersion      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DevConfigSha256    []byte               `protobuf:"bytes,2,opt,name=devConfigSha256,proto3" json:"devConfigSha256,omitempty"`
	DevConfigSignature []byte               `protobuf:"bytes,3,opt,name=devConfigSignature,proto3" json:"devConfigSignature,omitempty"`
	Apps               []*AppInstanceConfig `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
	Networks           []*NetworkConfig     `protobuf:"bytes,5,rep,name=networks" json:"networks,omitempty"`
	Datastores         []*DatastoreConfig   `protobuf:"bytes,6,rep,name=datastores" json:"datastores,omitempty"`
	LispInfo           *DeviceLispDetails   `protobuf:"bytes,7,opt,name=lispInfo" json:"lispInfo,omitempty"`
	Base               []*BaseOSConfig      `protobuf:"bytes,8,rep,name=base" json:"base,omitempty"`
	Reboot             *DeviceOpsCmd        `protobuf:"bytes,9,opt,name=reboot" json:"reboot,omitempty"`
	Backup             *DeviceOpsCmd        `protobuf:"bytes,10,opt,name=backup" json:"backup,omitempty"`
	ConfigItems        []*ConfigItem        `protobuf:"bytes,11,rep,name=configItems" json:"configItems,omitempty"`
}

func (m *EdgeDevConfig) Reset()                    { *m = EdgeDevConfig{} }
func (m *EdgeDevConfig) String() string            { return proto.CompactTextString(m) }
func (*EdgeDevConfig) ProtoMessage()               {}
func (*EdgeDevConfig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *EdgeDevConfig) GetId() *UUIDandVersion {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EdgeDevConfig) GetDevConfigSha256() []byte {
	if m != nil {
		return m.DevConfigSha256
	}
	return nil
}

func (m *EdgeDevConfig) GetDevConfigSignature() []byte {
	if m != nil {
		return m.DevConfigSignature
	}
	return nil
}

func (m *EdgeDevConfig) GetApps() []*AppInstanceConfig {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *EdgeDevConfig) GetNetworks() []*NetworkConfig {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *EdgeDevConfig) GetDatastores() []*DatastoreConfig {
	if m != nil {
		return m.Datastores
	}
	return nil
}

func (m *EdgeDevConfig) GetLispInfo() *DeviceLispDetails {
	if m != nil {
		return m.LispInfo
	}
	return nil
}

func (m *EdgeDevConfig) GetBase() []*BaseOSConfig {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *EdgeDevConfig) GetReboot() *DeviceOpsCmd {
	if m != nil {
		return m.Reboot
	}
	return nil
}

func (m *EdgeDevConfig) GetBackup() *DeviceOpsCmd {
	if m != nil {
		return m.Backup
	}
	return nil
}

func (m *EdgeDevConfig) GetConfigItems() []*ConfigItem {
	if m != nil {
		return m.ConfigItems
	}
	return nil
}

// Timers and other per-device policy which relates to the interaction
// with zedcloud. Note that the timers are randomized on the device
// to avoid synchronization with other devices. Random range is between
// between .5 and 1.5 of these nominal values. If not set (i.e. zero),
// it means the default value of 60 seconds.
// Initially we'll have a "configinterval" and a "metricsinterval" item.
// We'll also need a "resetIfCloudGoneTime" and a "fallbackIfCloudGoneTime"
// to control a normal operation and an upgrade inprogress check of
// cloud connectivity.
type ConfigItem struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Types that are valid to be assigned to ConfigItemValue:
	//	*ConfigItem_Uint32Value
	//	*ConfigItem_StringValue
	//	*ConfigItem_JsonValue
	ConfigItemValue isConfigItem_ConfigItemValue `protobuf_oneof:"configItemValue"`
}

func (m *ConfigItem) Reset()                    { *m = ConfigItem{} }
func (m *ConfigItem) String() string            { return proto.CompactTextString(m) }
func (*ConfigItem) ProtoMessage()               {}
func (*ConfigItem) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

type isConfigItem_ConfigItemValue interface {
	isConfigItem_ConfigItemValue()
}

type ConfigItem_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,2,opt,name=uint32Value,oneof"`
}
type ConfigItem_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=stringValue,oneof"`
}
type ConfigItem_JsonValue struct {
	JsonValue string `protobuf:"bytes,4,opt,name=jsonValue,oneof"`
}

func (*ConfigItem_Uint32Value) isConfigItem_ConfigItemValue() {}
func (*ConfigItem_StringValue) isConfigItem_ConfigItemValue() {}
func (*ConfigItem_JsonValue) isConfigItem_ConfigItemValue()   {}

func (m *ConfigItem) GetConfigItemValue() isConfigItem_ConfigItemValue {
	if m != nil {
		return m.ConfigItemValue
	}
	return nil
}

func (m *ConfigItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConfigItem) GetUint32Value() uint32 {
	if x, ok := m.GetConfigItemValue().(*ConfigItem_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (m *ConfigItem) GetStringValue() string {
	if x, ok := m.GetConfigItemValue().(*ConfigItem_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *ConfigItem) GetJsonValue() string {
	if x, ok := m.GetConfigItemValue().(*ConfigItem_JsonValue); ok {
		return x.JsonValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ConfigItem) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ConfigItem_OneofMarshaler, _ConfigItem_OneofUnmarshaler, _ConfigItem_OneofSizer, []interface{}{
		(*ConfigItem_Uint32Value)(nil),
		(*ConfigItem_StringValue)(nil),
		(*ConfigItem_JsonValue)(nil),
	}
}

func _ConfigItem_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ConfigItem)
	// configItemValue
	switch x := m.ConfigItemValue.(type) {
	case *ConfigItem_Uint32Value:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint32Value))
	case *ConfigItem_StringValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *ConfigItem_JsonValue:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.JsonValue)
	case nil:
	default:
		return fmt.Errorf("ConfigItem.ConfigItemValue has unexpected type %T", x)
	}
	return nil
}

func _ConfigItem_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ConfigItem)
	switch tag {
	case 2: // configItemValue.uint32Value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.ConfigItemValue = &ConfigItem_Uint32Value{uint32(x)}
		return true, err
	case 3: // configItemValue.stringValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ConfigItemValue = &ConfigItem_StringValue{x}
		return true, err
	case 4: // configItemValue.jsonValue
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ConfigItemValue = &ConfigItem_JsonValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _ConfigItem_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ConfigItem)
	// configItemValue
	switch x := m.ConfigItemValue.(type) {
	case *ConfigItem_Uint32Value:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Uint32Value))
	case *ConfigItem_StringValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *ConfigItem_JsonValue:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.JsonValue)))
		n += len(x.JsonValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ConfigRequest struct {
	ConfigHash string `protobuf:"bytes,1,opt,name=configHash" json:"configHash,omitempty"`
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *ConfigRequest) GetConfigHash() string {
	if m != nil {
		return m.ConfigHash
	}
	return ""
}

type ConfigResponse struct {
	Config     *EdgeDevConfig `protobuf:"bytes,1,opt,name=config" json:"config,omitempty"`
	ConfigHash string         `protobuf:"bytes,2,opt,name=configHash" json:"configHash,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *ConfigResponse) GetConfig() *EdgeDevConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ConfigResponse) GetConfigHash() string {
	if m != nil {
		return m.ConfigHash
	}
	return ""
}

func init() {
	proto.RegisterType((*MapServer)(nil), "MapServer")
	proto.RegisterType((*ZedServer)(nil), "ZedServer")
	proto.RegisterType((*DeviceLispDetails)(nil), "DeviceLispDetails")
	proto.RegisterType((*DeviceOpsCmd)(nil), "DeviceOpsCmd")
	proto.RegisterType((*EdgeDevConfig)(nil), "EdgeDevConfig")
	proto.RegisterType((*ConfigItem)(nil), "ConfigItem")
	proto.RegisterType((*ConfigRequest)(nil), "ConfigRequest")
	proto.RegisterType((*ConfigResponse)(nil), "ConfigResponse")
}

func init() { proto.RegisterFile("devconfig.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xc7, 0xe7, 0x8f, 0xa6, 0xf6, 0xb1, 0x9d, 0xb4, 0xdc, 0x30, 0x08, 0x05, 0xd6, 0x7a, 0x02,
	0x36, 0x18, 0x05, 0xa6, 0x14, 0x2e, 0x56, 0x60, 0x77, 0x4b, 0x62, 0x63, 0x31, 0xd0, 0x35, 0x03,
	0xb3, 0x16, 0x43, 0xef, 0x68, 0xf1, 0xc4, 0xe1, 0x22, 0x91, 0x1a, 0x49, 0x79, 0x5d, 0xdf, 0x64,
	0x6f, 0xb7, 0xb7, 0xd8, 0xed, 0x40, 0x52, 0x92, 0x65, 0x37, 0xbb, 0x13, 0x7f, 0xff, 0x3f, 0x8f,
	0x8e, 0xce, 0x87, 0xe0, 0x84, 0xe3, 0x36, 0x55, 0xf2, 0x46, 0x6c, 0x92, 0x42, 0x2b, 0xab, 0x9e,
	0x04, 0x90, 0xe7, 0x4a, 0xd6, 0x80, 0x15, 0xc5, 0x9e, 0x83, 0xac, 0x99, 0x41, 0x65, 0xf6, 0x6f,
	0x49, 0xb4, 0x7b, 0x60, 0x62, 0xac, 0xd2, 0x6c, 0x83, 0xe1, 0x18, 0xff, 0x04, 0xc3, 0x9f, 0x59,
	0x71, 0x8d, 0x7a, 0x8b, 0x9a, 0x3c, 0x81, 0xc1, 0x1b, 0x96, 0xe3, 0x95, 0x5e, 0x15, 0x51, 0x67,
	0xda, 0x99, 0x0d, 0x69, 0x73, 0x26, 0x4f, 0x01, 0x2e, 0x34, 0x72, 0x94, 0x56, 0xb0, 0x2c, 0xea,
	0x7a, 0xb5, 0x45, 0xe2, 0x1f, 0x60, 0xf8, 0x1e, 0xf9, 0x2e, 0xd0, 0xa5, 0x32, 0xd6, 0x5d, 0xae,
	0x03, 0xd5, 0x67, 0xf2, 0x08, 0x7a, 0xcb, 0xd5, 0x22, 0xea, 0x4e, 0x7b, 0xb3, 0x21, 0x75, 0x8f,
	0xf1, 0xbf, 0x5d, 0x78, 0xbc, 0xc0, 0xad, 0x48, 0xf1, 0xb5, 0x30, 0xc5, 0x02, 0x2d, 0x13, 0x99,
	0x21, 0x73, 0x38, 0x76, 0xc7, 0x26, 0x3b, 0x13, 0x75, 0xa6, 0xbd, 0xd9, 0x68, 0x0e, 0x49, 0x83,
	0xe8, 0x81, 0x83, 0xc4, 0x30, 0x76, 0x64, 0x25, 0x8d, 0x65, 0x32, 0x45, 0x9f, 0xe6, 0x84, 0xee,
	0xb1, 0xfa, 0xfd, 0x7d, 0x9f, 0x96, 0x7b, 0x74, 0x9f, 0xb6, 0x5c, 0x2d, 0x2e, 0x99, 0xb9, 0x7d,
	0x8d, 0x32, 0x7a, 0xe0, 0xef, 0xb4, 0x08, 0x79, 0x0e, 0xd0, 0x7c, 0x9a, 0x89, 0x8e, 0xaa, 0x2c,
	0x1a, 0x44, 0x5b, 0x2a, 0x79, 0x01, 0x9f, 0x2f, 0x05, 0x3f, 0xcb, 0x32, 0x95, 0x32, 0x2b, 0x94,
	0xfc, 0x45, 0xe3, 0x8d, 0xf8, 0x10, 0x0d, 0xa6, 0x9d, 0xd9, 0x98, 0xde, 0x27, 0x91, 0x57, 0xf0,
	0xe5, 0x3d, 0xd8, 0x65, 0x32, 0xf4, 0x99, 0xfc, 0x8f, 0xea, 0x1b, 0x92, 0x09, 0x94, 0xf6, 0x8c,
	0x73, 0x1d, 0x41, 0xd5, 0x90, 0x86, 0xb8, 0x5a, 0x2c, 0x3f, 0x14, 0xa8, 0x45, 0x8e, 0xd2, 0xb2,
	0x2c, 0xfa, 0x62, 0xda, 0x99, 0x0d, 0xe8, 0x1e, 0x8b, 0x6f, 0x60, 0x1c, 0x0a, 0x7f, 0x55, 0x98,
	0x8b, 0x9c, 0x93, 0x08, 0x1e, 0xa6, 0xaa, 0x94, 0x16, 0x75, 0x55, 0xba, 0xfa, 0xe8, 0xa2, 0x71,
	0x34, 0x42, 0x23, 0xbf, 0xb6, 0xcc, 0x62, 0xd4, 0x0b, 0xd1, 0xda, 0xcc, 0xdd, 0x56, 0x85, 0xf9,
	0x55, 0xe4, 0x58, 0x55, 0xb7, 0x3e, 0xc6, 0xff, 0xf4, 0x60, 0xb2, 0xe4, 0x1b, 0x5c, 0xe0, 0xf6,
	0xc2, 0x0f, 0x23, 0x79, 0x06, 0x5d, 0xc1, 0xfd, 0x6c, 0x8c, 0xe6, 0x27, 0xc9, 0xdb, 0xb7, 0xab,
	0x05, 0x93, 0xfc, 0x1d, 0x6a, 0x23, 0x94, 0xa4, 0x5d, 0xc1, 0xc9, 0xcc, 0x6f, 0x40, 0x70, 0x5f,
	0xdf, 0xb2, 0xf9, 0xf7, 0xaf, 0x7c, 0x4a, 0x63, 0x7a, 0x88, 0x49, 0x02, 0x64, 0x87, 0xc4, 0x46,
	0x32, 0x5b, 0xea, 0x90, 0xe0, 0x98, 0xde, 0xa3, 0x90, 0x6f, 0xa1, 0xcf, 0x8a, 0xc2, 0x44, 0x7d,
	0xdf, 0x48, 0x92, 0x9c, 0x15, 0xcd, 0x70, 0x04, 0x2b, 0xf5, 0x3a, 0x79, 0x0e, 0x03, 0x89, 0xf6,
	0x4f, 0xa5, 0xef, 0x4c, 0xf4, 0xc0, 0x7b, 0x8f, 0x93, 0x37, 0x01, 0x54, 0xbe, 0x46, 0x27, 0x2f,
	0x00, 0x38, 0xb3, 0xcc, 0xed, 0x16, 0xd6, 0x23, 0xf2, 0x28, 0x59, 0xd4, 0xa8, 0xf2, 0xb7, 0x3c,
	0x24, 0x81, 0x41, 0xe6, 0xc7, 0xf2, 0x46, 0x45, 0x0f, 0x7d, 0x19, 0x48, 0xf2, 0xc9, 0x12, 0xd0,
	0xc6, 0x43, 0xbe, 0x86, 0xbe, 0x5b, 0xef, 0x68, 0xe0, 0x63, 0x4f, 0x92, 0x73, 0x66, 0xf0, 0xea,
	0xba, 0x4e, 0xd8, 0x49, 0xe4, 0x1b, 0x38, 0xd2, 0xb8, 0x56, 0xca, 0xfa, 0xc9, 0x71, 0xa6, 0x76,
	0x73, 0x69, 0x25, 0x3a, 0xdb, 0x9a, 0xa5, 0x77, 0x65, 0xe1, 0x87, 0xe6, 0x53, 0x5b, 0x10, 0xc9,
	0x77, 0x30, 0x0a, 0x3f, 0x8e, 0x95, 0xc5, 0xdc, 0x44, 0x23, 0xff, 0xde, 0x51, 0x72, 0xd1, 0x30,
	0xda, 0xd6, 0xe3, 0xbf, 0x3b, 0x00, 0x3b, 0xcd, 0x6d, 0xd9, 0x1d, 0xfe, 0x55, 0x2d, 0xbf, 0x7b,
	0x24, 0x31, 0x8c, 0x4a, 0x21, 0xed, 0xcb, 0xf9, 0x3b, 0x96, 0x95, 0xd5, 0x6a, 0x5e, 0x7e, 0x46,
	0xdb, 0xd0, 0x79, 0x8c, 0xd5, 0x42, 0x6e, 0x82, 0xc7, 0xf5, 0x70, 0xe8, 0x3c, 0x2d, 0x48, 0x9e,
	0xc2, 0xf0, 0x77, 0xa3, 0x64, 0x70, 0xf4, 0x2b, 0xc7, 0x0e, 0x9d, 0x3f, 0x86, 0x93, 0x5d, 0x5e,
	0x1e, 0xc5, 0xa7, 0x30, 0xa9, 0x0a, 0x85, 0x7f, 0x94, 0x68, 0xac, 0xdb, 0x9d, 0xe0, 0x71, 0x2b,
	0x5e, 0x25, 0xd9, 0x22, 0xf1, 0x6f, 0x70, 0x5c, 0x5f, 0x30, 0x85, 0x92, 0xc6, 0x0d, 0xcd, 0x51,
	0xd0, 0xab, 0x99, 0x3d, 0x4e, 0xf6, 0xe6, 0x99, 0x56, 0xea, 0x41, 0xe4, 0xee, 0x61, 0xe4, 0xf3,
	0x1f, 0xe1, 0x59, 0xaa, 0xf2, 0xe4, 0x23, 0x72, 0xe4, 0x2c, 0x49, 0x33, 0x55, 0xf2, 0xa4, 0x34,
	0xa8, 0x5d, 0x03, 0xc2, 0x2f, 0xf9, 0xfd, 0x57, 0x1b, 0x61, 0x6f, 0xcb, 0x75, 0x92, 0xaa, 0xfc,
	0x34, 0xf8, 0x4e, 0x59, 0x21, 0x4e, 0x3f, 0x86, 0x28, 0xeb, 0x23, 0xef, 0x7a, 0xf9, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x83, 0x04, 0x2a, 0x20, 0x21, 0x06, 0x00, 0x00,
}
