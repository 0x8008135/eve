// Code generated by protoc-gen-go. DO NOT EDIT.
// source: devconfig.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DeviceCmdType int32

const (
	DeviceCmdType_OpsInvalid DeviceCmdType = 0
	DeviceCmdType_Reset      DeviceCmdType = 1
	DeviceCmdType_Backup     DeviceCmdType = 2
)

var DeviceCmdType_name = map[int32]string{
	0: "OpsInvalid",
	1: "Reset",
	2: "Backup",
}
var DeviceCmdType_value = map[string]int32{
	"OpsInvalid": 0,
	"Reset":      1,
	"Backup":     2,
}

func (x DeviceCmdType) String() string {
	return proto.EnumName(DeviceCmdType_name, int32(x))
}
func (DeviceCmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type MapServer struct {
	NameOrIp   string `protobuf:"bytes,1,opt,name=NameOrIp" json:"NameOrIp,omitempty"`
	Credential string `protobuf:"bytes,2,opt,name=Credential" json:"Credential,omitempty"`
}

func (m *MapServer) Reset()                    { *m = MapServer{} }
func (m *MapServer) String() string            { return proto.CompactTextString(m) }
func (*MapServer) ProtoMessage()               {}
func (*MapServer) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *MapServer) GetNameOrIp() string {
	if m != nil {
		return m.NameOrIp
	}
	return ""
}

func (m *MapServer) GetCredential() string {
	if m != nil {
		return m.Credential
	}
	return ""
}

type ZedServer struct {
	HostName string   `protobuf:"bytes,1,opt,name=HostName" json:"HostName,omitempty"`
	EID      []string `protobuf:"bytes,2,rep,name=EID" json:"EID,omitempty"`
}

func (m *ZedServer) Reset()                    { *m = ZedServer{} }
func (m *ZedServer) String() string            { return proto.CompactTextString(m) }
func (*ZedServer) ProtoMessage()               {}
func (*ZedServer) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ZedServer) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *ZedServer) GetEID() []string {
	if m != nil {
		return m.EID
	}
	return nil
}

type DeviceLispDetails struct {
	LispMapServers         []*MapServer `protobuf:"bytes,1,rep,name=LispMapServers" json:"LispMapServers,omitempty"`
	LispInstance           uint32       `protobuf:"varint,2,opt,name=LispInstance" json:"LispInstance,omitempty"`
	EID                    string       `protobuf:"bytes,4,opt,name=EID" json:"EID,omitempty"`
	EIDHashLen             uint32       `protobuf:"varint,5,opt,name=EIDHashLen" json:"EIDHashLen,omitempty"`
	ZedServers             []*ZedServer `protobuf:"bytes,6,rep,name=ZedServers" json:"ZedServers,omitempty"`
	EidAllocationPrefix    []byte       `protobuf:"bytes,8,opt,name=EidAllocationPrefix,proto3" json:"EidAllocationPrefix,omitempty"`
	EidAllocationPrefixLen uint32       `protobuf:"varint,9,opt,name=EidAllocationPrefixLen" json:"EidAllocationPrefixLen,omitempty"`
	ClientAddr             string       `protobuf:"bytes,10,opt,name=ClientAddr" json:"ClientAddr,omitempty"`
}

func (m *DeviceLispDetails) Reset()                    { *m = DeviceLispDetails{} }
func (m *DeviceLispDetails) String() string            { return proto.CompactTextString(m) }
func (*DeviceLispDetails) ProtoMessage()               {}
func (*DeviceLispDetails) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *DeviceLispDetails) GetLispMapServers() []*MapServer {
	if m != nil {
		return m.LispMapServers
	}
	return nil
}

func (m *DeviceLispDetails) GetLispInstance() uint32 {
	if m != nil {
		return m.LispInstance
	}
	return 0
}

func (m *DeviceLispDetails) GetEID() string {
	if m != nil {
		return m.EID
	}
	return ""
}

func (m *DeviceLispDetails) GetEIDHashLen() uint32 {
	if m != nil {
		return m.EIDHashLen
	}
	return 0
}

func (m *DeviceLispDetails) GetZedServers() []*ZedServer {
	if m != nil {
		return m.ZedServers
	}
	return nil
}

func (m *DeviceLispDetails) GetEidAllocationPrefix() []byte {
	if m != nil {
		return m.EidAllocationPrefix
	}
	return nil
}

func (m *DeviceLispDetails) GetEidAllocationPrefixLen() uint32 {
	if m != nil {
		return m.EidAllocationPrefixLen
	}
	return 0
}

func (m *DeviceLispDetails) GetClientAddr() string {
	if m != nil {
		return m.ClientAddr
	}
	return ""
}

// Device Operational Commands Semantic
// For rebooting device,  command=Reset, desiredState = on
// For poweroff device,  command=Reset, desiredState = off
// For backup at midnight, command=Backup, desiredState=n/a, opsTime = mm/dd/yy:hh:ss
//
type DeviceOpsCmd struct {
	Command      DeviceCmdType `protobuf:"varint,1,opt,name=command,enum=DeviceCmdType" json:"command,omitempty"`
	Counter      uint32        `protobuf:"varint,2,opt,name=counter" json:"counter,omitempty"`
	DesriedState bool          `protobuf:"varint,3,opt,name=desriedState" json:"desriedState,omitempty"`
	OpsTime      string        `protobuf:"bytes,4,opt,name=opsTime" json:"opsTime,omitempty"`
}

func (m *DeviceOpsCmd) Reset()                    { *m = DeviceOpsCmd{} }
func (m *DeviceOpsCmd) String() string            { return proto.CompactTextString(m) }
func (*DeviceOpsCmd) ProtoMessage()               {}
func (*DeviceOpsCmd) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *DeviceOpsCmd) GetCommand() DeviceCmdType {
	if m != nil {
		return m.Command
	}
	return DeviceCmdType_OpsInvalid
}

func (m *DeviceOpsCmd) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *DeviceOpsCmd) GetDesriedState() bool {
	if m != nil {
		return m.DesriedState
	}
	return false
}

func (m *DeviceOpsCmd) GetOpsTime() string {
	if m != nil {
		return m.OpsTime
	}
	return ""
}

type EdgeDevConfig struct {
	Id                 *UUIDandVersion      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DevConfigSha256    []byte               `protobuf:"bytes,2,opt,name=devConfigSha256,proto3" json:"devConfigSha256,omitempty"`
	DevConfigSignature []byte               `protobuf:"bytes,3,opt,name=devConfigSignature,proto3" json:"devConfigSignature,omitempty"`
	Apps               []*AppInstanceConfig `protobuf:"bytes,4,rep,name=apps" json:"apps,omitempty"`
	Networks           []*NetworkConfig     `protobuf:"bytes,5,rep,name=networks" json:"networks,omitempty"`
	Datastores         []*DatastoreConfig   `protobuf:"bytes,6,rep,name=datastores" json:"datastores,omitempty"`
	LispInfo           *DeviceLispDetails   `protobuf:"bytes,7,opt,name=lispInfo" json:"lispInfo,omitempty"`
	Base               []*BaseOSConfig      `protobuf:"bytes,8,rep,name=base" json:"base,omitempty"`
	Operations         []*DeviceOpsCmd      `protobuf:"bytes,9,rep,name=operations" json:"operations,omitempty"`
}

func (m *EdgeDevConfig) Reset()                    { *m = EdgeDevConfig{} }
func (m *EdgeDevConfig) String() string            { return proto.CompactTextString(m) }
func (*EdgeDevConfig) ProtoMessage()               {}
func (*EdgeDevConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *EdgeDevConfig) GetId() *UUIDandVersion {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EdgeDevConfig) GetDevConfigSha256() []byte {
	if m != nil {
		return m.DevConfigSha256
	}
	return nil
}

func (m *EdgeDevConfig) GetDevConfigSignature() []byte {
	if m != nil {
		return m.DevConfigSignature
	}
	return nil
}

func (m *EdgeDevConfig) GetApps() []*AppInstanceConfig {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *EdgeDevConfig) GetNetworks() []*NetworkConfig {
	if m != nil {
		return m.Networks
	}
	return nil
}

func (m *EdgeDevConfig) GetDatastores() []*DatastoreConfig {
	if m != nil {
		return m.Datastores
	}
	return nil
}

func (m *EdgeDevConfig) GetLispInfo() *DeviceLispDetails {
	if m != nil {
		return m.LispInfo
	}
	return nil
}

func (m *EdgeDevConfig) GetBase() []*BaseOSConfig {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *EdgeDevConfig) GetOperations() []*DeviceOpsCmd {
	if m != nil {
		return m.Operations
	}
	return nil
}

func init() {
	proto.RegisterType((*MapServer)(nil), "MapServer")
	proto.RegisterType((*ZedServer)(nil), "ZedServer")
	proto.RegisterType((*DeviceLispDetails)(nil), "DeviceLispDetails")
	proto.RegisterType((*DeviceOpsCmd)(nil), "DeviceOpsCmd")
	proto.RegisterType((*EdgeDevConfig)(nil), "EdgeDevConfig")
	proto.RegisterEnum("DeviceCmdType", DeviceCmdType_name, DeviceCmdType_value)
}

func init() { proto.RegisterFile("devconfig.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 657 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0x5d, 0x4f, 0xdb, 0x30,
	0x14, 0x5d, 0x3f, 0x80, 0xf6, 0xd2, 0x96, 0xce, 0x93, 0xa6, 0x08, 0x69, 0xa3, 0xeb, 0xc3, 0x54,
	0x21, 0x2d, 0xa0, 0x4e, 0x43, 0xda, 0xdb, 0xa0, 0xad, 0x46, 0x25, 0x46, 0xa7, 0x14, 0xf6, 0xc0,
	0x9b, 0x89, 0x2f, 0xc5, 0x22, 0xb1, 0x2d, 0xdb, 0xed, 0x36, 0x7e, 0xc5, 0xb4, 0xbf, 0xb6, 0x3f,
	0x34, 0xd9, 0x69, 0x42, 0xcb, 0xd8, 0x5b, 0xee, 0x39, 0xc7, 0x37, 0x27, 0xf7, 0x1e, 0x07, 0x76,
	0x18, 0x2e, 0x62, 0x29, 0x6e, 0xf8, 0x2c, 0x54, 0x5a, 0x5a, 0xb9, 0x9b, 0x01, 0x69, 0x2a, 0x45,
	0x0e, 0x50, 0xa5, 0xd6, 0x14, 0xe4, 0x9a, 0x1a, 0x94, 0x66, 0xfd, 0x94, 0x40, 0xbb, 0x06, 0x34,
	0x8d, 0x95, 0x9a, 0xce, 0x30, 0x2b, 0xbb, 0x9f, 0xa1, 0xfe, 0x85, 0xaa, 0x29, 0xea, 0x05, 0x6a,
	0xb2, 0x0b, 0xb5, 0x73, 0x9a, 0xe2, 0x44, 0x8f, 0x55, 0x50, 0xea, 0x94, 0x7a, 0xf5, 0xa8, 0xa8,
	0xc9, 0x6b, 0x80, 0x81, 0x46, 0x86, 0xc2, 0x72, 0x9a, 0x04, 0x65, 0xcf, 0xae, 0x20, 0xdd, 0x8f,
	0x50, 0xbf, 0x42, 0xf6, 0xd0, 0xe8, 0x54, 0x1a, 0xeb, 0x0e, 0xe7, 0x8d, 0xf2, 0x9a, 0xb4, 0xa1,
	0x32, 0x1a, 0x0f, 0x83, 0x72, 0xa7, 0xd2, 0xab, 0x47, 0xee, 0xb1, 0xfb, 0xa7, 0x0c, 0xcf, 0x87,
	0xb8, 0xe0, 0x31, 0x9e, 0x71, 0xa3, 0x86, 0x68, 0x29, 0x4f, 0x0c, 0xe9, 0x43, 0xcb, 0x95, 0x85,
	0x3b, 0x13, 0x94, 0x3a, 0x95, 0xde, 0x76, 0x1f, 0xc2, 0x02, 0x8a, 0x1e, 0x29, 0x48, 0x17, 0x1a,
	0x0e, 0x19, 0x0b, 0x63, 0xa9, 0x88, 0xd1, 0xdb, 0x6c, 0x46, 0x6b, 0x58, 0xfe, 0xfe, 0xaa, 0xb7,
	0xe5, 0x1e, 0xdd, 0xa7, 0x8d, 0xc6, 0xc3, 0x53, 0x6a, 0x6e, 0xcf, 0x50, 0x04, 0x1b, 0xfe, 0xcc,
	0x0a, 0x42, 0xf6, 0x01, 0x8a, 0x4f, 0x33, 0xc1, 0xe6, 0xd2, 0x45, 0x01, 0x45, 0x2b, 0x2c, 0x39,
	0x84, 0x17, 0x23, 0xce, 0x8e, 0x93, 0x44, 0xc6, 0xd4, 0x72, 0x29, 0xbe, 0x6a, 0xbc, 0xe1, 0x3f,
	0x82, 0x5a, 0xa7, 0xd4, 0x6b, 0x44, 0x4f, 0x51, 0xe4, 0x08, 0x5e, 0x3e, 0x01, 0x3b, 0x27, 0x75,
	0xef, 0xe4, 0x3f, 0xac, 0x5f, 0x48, 0xc2, 0x51, 0xd8, 0x63, 0xc6, 0x74, 0x00, 0xcb, 0x85, 0x14,
	0x48, 0xf7, 0x57, 0x09, 0x1a, 0xd9, 0x54, 0x27, 0xca, 0x0c, 0x52, 0x46, 0x7a, 0xb0, 0xe5, 0xf2,
	0x43, 0x05, 0xf3, 0x3b, 0x69, 0xf5, 0x5b, 0x61, 0xc6, 0x0f, 0x52, 0x76, 0xf1, 0x53, 0x61, 0x94,
	0xd3, 0x24, 0x70, 0xca, 0xb9, 0xb0, 0xa8, 0x97, 0x13, 0xcc, 0x4b, 0x37, 0x60, 0x86, 0x46, 0x73,
	0x64, 0x53, 0x4b, 0x2d, 0x06, 0x95, 0x4e, 0xa9, 0x57, 0x8b, 0xd6, 0x30, 0x77, 0x5a, 0x2a, 0x73,
	0xc1, 0x53, 0x5c, 0x0e, 0x39, 0x2f, 0xbb, 0xbf, 0x2b, 0xd0, 0x1c, 0xb1, 0x19, 0x0e, 0x71, 0x31,
	0xf0, 0x99, 0x24, 0x7b, 0x50, 0xe6, 0x99, 0x9d, 0xed, 0xfe, 0x4e, 0x78, 0x79, 0x39, 0x1e, 0x52,
	0xc1, 0xbe, 0xa1, 0x36, 0x5c, 0x8a, 0xa8, 0xcc, 0x9d, 0x69, 0x97, 0xfb, 0x4c, 0x3d, 0xbd, 0xa5,
	0xfd, 0x0f, 0x47, 0xde, 0x52, 0x23, 0x7a, 0x0c, 0x93, 0x10, 0xc8, 0x03, 0xc4, 0x67, 0x82, 0xda,
	0xb9, 0xce, 0x0c, 0x36, 0xa2, 0x27, 0x18, 0xf2, 0x16, 0xaa, 0x54, 0x29, 0x13, 0x54, 0xfd, 0x3e,
	0x49, 0x78, 0xac, 0x8a, 0x8c, 0x64, 0xd2, 0xc8, 0xf3, 0x64, 0x1f, 0x6a, 0x02, 0xed, 0x77, 0xa9,
	0xef, 0x4c, 0xb0, 0xe1, 0xb5, 0xad, 0xf0, 0x3c, 0x03, 0x96, 0xba, 0x82, 0x27, 0x87, 0x00, 0x8c,
	0x5a, 0xea, 0xae, 0x18, 0xe6, 0x49, 0x69, 0x87, 0xc3, 0x1c, 0x5a, 0xea, 0x57, 0x34, 0x24, 0x84,
	0x5a, 0xe2, 0xd3, 0x79, 0x23, 0x83, 0x2d, 0x3f, 0x06, 0x12, 0xfe, 0x73, 0x17, 0xa2, 0x42, 0x43,
	0xde, 0x40, 0xd5, 0xdd, 0xf2, 0xa0, 0xe6, 0x7b, 0x37, 0xc3, 0x13, 0x6a, 0x70, 0x32, 0xcd, 0x0d,
	0x3b, 0x8a, 0xbc, 0x03, 0x90, 0x0a, 0xb5, 0x8f, 0x8b, 0x09, 0xea, 0x4b, 0xe1, 0x6a, 0x14, 0xa2,
	0x15, 0xc1, 0xfe, 0x11, 0x34, 0xd7, 0x62, 0x40, 0x5a, 0x00, 0x13, 0x65, 0xc6, 0x62, 0x41, 0x13,
	0xce, 0xda, 0xcf, 0x48, 0x1d, 0x36, 0x22, 0x34, 0x68, 0xdb, 0x25, 0x02, 0xb0, 0x79, 0x42, 0xe3,
	0xbb, 0xb9, 0x6a, 0x97, 0x4f, 0x3e, 0xc1, 0x5e, 0x2c, 0xd3, 0xf0, 0x1e, 0x19, 0x32, 0x1a, 0xc6,
	0x89, 0x9c, 0xb3, 0x70, 0x6e, 0x50, 0xbb, 0x56, 0xd9, 0xcf, 0xe5, 0xea, 0xd5, 0x8c, 0xdb, 0xdb,
	0xf9, 0x75, 0x18, 0xcb, 0xf4, 0x20, 0xd3, 0x1d, 0x50, 0xc5, 0x0f, 0xee, 0xb3, 0x1f, 0xd2, 0xf5,
	0xa6, 0x57, 0xbd, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x46, 0xe4, 0x59, 0xeb, 0x04, 0x00,
	0x00,
}
