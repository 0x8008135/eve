// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netconfig.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NetworkConfig struct {
	Id   string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type NetworkType `protobuf:"varint,5,opt,name=type,enum=NetworkType" json:"type,omitempty"`
	// Types that are valid to be assigned to NetContent:
	//	*NetworkConfig_Nlisp
	//	*NetworkConfig_Nv4
	//	*NetworkConfig_Nv6
	NetContent isNetworkConfig_NetContent `protobuf_oneof:"netContent"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

type isNetworkConfig_NetContent interface {
	isNetworkConfig_NetContent()
}

type NetworkConfig_Nlisp struct {
	Nlisp *Lispspec `protobuf:"bytes,9,opt,name=nlisp,oneof"`
}
type NetworkConfig_Nv4 struct {
	Nv4 *Ipv4Spec `protobuf:"bytes,10,opt,name=nv4,oneof"`
}
type NetworkConfig_Nv6 struct {
	Nv6 *Ipv6Spec `protobuf:"bytes,11,opt,name=nv6,oneof"`
}

func (*NetworkConfig_Nlisp) isNetworkConfig_NetContent() {}
func (*NetworkConfig_Nv4) isNetworkConfig_NetContent()   {}
func (*NetworkConfig_Nv6) isNetworkConfig_NetContent()   {}

func (m *NetworkConfig) GetNetContent() isNetworkConfig_NetContent {
	if m != nil {
		return m.NetContent
	}
	return nil
}

func (m *NetworkConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkConfig) GetType() NetworkType {
	if m != nil {
		return m.Type
	}
	return NetworkType_NETWORKTYPENOOP
}

func (m *NetworkConfig) GetNlisp() *Lispspec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nlisp); ok {
		return x.Nlisp
	}
	return nil
}

func (m *NetworkConfig) GetNv4() *Ipv4Spec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nv4); ok {
		return x.Nv4
	}
	return nil
}

func (m *NetworkConfig) GetNv6() *Ipv6Spec {
	if x, ok := m.GetNetContent().(*NetworkConfig_Nv6); ok {
		return x.Nv6
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NetworkConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NetworkConfig_OneofMarshaler, _NetworkConfig_OneofUnmarshaler, _NetworkConfig_OneofSizer, []interface{}{
		(*NetworkConfig_Nlisp)(nil),
		(*NetworkConfig_Nv4)(nil),
		(*NetworkConfig_Nv6)(nil),
	}
}

func _NetworkConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NetworkConfig)
	// netContent
	switch x := m.NetContent.(type) {
	case *NetworkConfig_Nlisp:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nlisp); err != nil {
			return err
		}
	case *NetworkConfig_Nv4:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nv4); err != nil {
			return err
		}
	case *NetworkConfig_Nv6:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nv6); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("NetworkConfig.NetContent has unexpected type %T", x)
	}
	return nil
}

func _NetworkConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NetworkConfig)
	switch tag {
	case 9: // netContent.nlisp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Lispspec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nlisp{msg}
		return true, err
	case 10: // netContent.nv4
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ipv4Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nv4{msg}
		return true, err
	case 11: // netContent.nv6
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ipv6Spec)
		err := b.DecodeMessage(msg)
		m.NetContent = &NetworkConfig_Nv6{msg}
		return true, err
	default:
		return false, nil
	}
}

func _NetworkConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NetworkConfig)
	// netContent
	switch x := m.NetContent.(type) {
	case *NetworkConfig_Nlisp:
		s := proto.Size(x.Nlisp)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkConfig_Nv4:
		s := proto.Size(x.Nv4)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NetworkConfig_Nv6:
		s := proto.Size(x.Nv6)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NetworkAdapter struct {
	// this is deviceName....
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	NetworkId string `protobuf:"bytes,3,opt,name=networkId" json:"networkId,omitempty"`
	// eid=lisp, v4=ipv4 etc...
	Addr     string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	Hostname string `protobuf:"bytes,5,opt,name=hostname" json:"hostname,omitempty"`
	// more configuration for getting addr
	Lispsignature string `protobuf:"bytes,6,opt,name=lispsignature" json:"lispsignature,omitempty"`
	Pemcert       []byte `protobuf:"bytes,7,opt,name=pemcert,proto3" json:"pemcert,omitempty"`
	Pemprivatekey []byte `protobuf:"bytes,8,opt,name=pemprivatekey,proto3" json:"pemprivatekey,omitempty"`
	// firewall
	Acls []*ACE `protobuf:"bytes,40,rep,name=acls" json:"acls,omitempty"`
}

func (m *NetworkAdapter) Reset()                    { *m = NetworkAdapter{} }
func (m *NetworkAdapter) String() string            { return proto.CompactTextString(m) }
func (*NetworkAdapter) ProtoMessage()               {}
func (*NetworkAdapter) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *NetworkAdapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkAdapter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkAdapter) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *NetworkAdapter) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NetworkAdapter) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NetworkAdapter) GetLispsignature() string {
	if m != nil {
		return m.Lispsignature
	}
	return ""
}

func (m *NetworkAdapter) GetPemcert() []byte {
	if m != nil {
		return m.Pemcert
	}
	return nil
}

func (m *NetworkAdapter) GetPemprivatekey() []byte {
	if m != nil {
		return m.Pemprivatekey
	}
	return nil
}

func (m *NetworkAdapter) GetAcls() []*ACE {
	if m != nil {
		return m.Acls
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkConfig)(nil), "NetworkConfig")
	proto.RegisterType((*NetworkAdapter)(nil), "NetworkAdapter")
}

func init() { proto.RegisterFile("netconfig.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x31, 0x6f, 0xdb, 0x30,
	0x10, 0x85, 0x2b, 0x59, 0x4e, 0xac, 0xb3, 0xe2, 0x02, 0x9c, 0x88, 0xa0, 0x41, 0xd5, 0xa0, 0x83,
	0x26, 0x1a, 0x70, 0x03, 0xcf, 0x4d, 0x8c, 0x02, 0xed, 0xd2, 0x41, 0xe8, 0xd4, 0x8d, 0x21, 0x2f,
	0x0e, 0x11, 0x8b, 0x24, 0x28, 0x4a, 0x86, 0x3d, 0xf6, 0x17, 0xf5, 0x27, 0x16, 0x22, 0x55, 0x1b,
	0xde, 0xee, 0xbd, 0xf7, 0xdd, 0xe1, 0x0e, 0x24, 0xbc, 0xd7, 0xe8, 0x85, 0xd1, 0x2f, 0x6a, 0xcb,
	0xac, 0x33, 0xde, 0xdc, 0xce, 0x5e, 0xf6, 0x63, 0x55, 0x0c, 0x51, 0xa3, 0xa3, 0xba, 0xff, 0x9b,
	0xc0, 0xcd, 0x4f, 0xf4, 0x7b, 0xe3, 0xde, 0x36, 0x81, 0x27, 0x0b, 0x48, 0x95, 0xa4, 0x49, 0x99,
	0x54, 0x79, 0x9d, 0x2a, 0x49, 0x4a, 0xc8, 0xfc, 0xc1, 0x22, 0x9d, 0x96, 0x49, 0xb5, 0x58, 0x15,
	0x6c, 0xa4, 0x7f, 0x1d, 0x2c, 0xd6, 0x21, 0x21, 0x9f, 0x60, 0xaa, 0x77, 0xaa, 0xb5, 0x34, 0x2f,
	0x93, 0x6a, 0xbe, 0xca, 0xd9, 0x20, 0x5a, 0x8b, 0xe2, 0xfb, 0xbb, 0x3a, 0x26, 0xe4, 0x0e, 0x26,
	0xba, 0x7f, 0xa0, 0x30, 0x02, 0xca, 0xf6, 0x0f, 0x23, 0x30, 0xf8, 0x31, 0x5e, 0xd3, 0xf9, 0x39,
	0x5e, 0x9f, 0xe3, 0xf5, 0x53, 0x01, 0xa0, 0xd1, 0x6f, 0x8c, 0xf6, 0xa8, 0xfd, 0xfd, 0x9f, 0x14,
	0x16, 0xe3, 0x12, 0x8f, 0x92, 0x5b, 0x8f, 0x8e, 0x10, 0xc8, 0x34, 0x6f, 0x70, 0xdc, 0x3a, 0xd4,
	0xe3, 0x1d, 0xe9, 0xe9, 0x8e, 0x0f, 0x90, 0xeb, 0xd8, 0xf5, 0x43, 0xd2, 0x49, 0xb0, 0xcf, 0xc6,
	0x30, 0x81, 0x4b, 0xe9, 0x68, 0x16, 0x27, 0x0c, 0x35, 0xb9, 0x85, 0xd9, 0xab, 0x69, 0x7d, 0x98,
	0x3c, 0x0d, 0xfe, 0x49, 0x93, 0xcf, 0x70, 0x13, 0xae, 0x54, 0x5b, 0xcd, 0x7d, 0xe7, 0x90, 0x5e,
	0x05, 0xe0, 0xd2, 0x24, 0x14, 0xae, 0x2d, 0x36, 0x02, 0x9d, 0xa7, 0xd7, 0x65, 0x52, 0x15, 0xf5,
	0x7f, 0x39, 0xf4, 0x5b, 0x6c, 0xac, 0x53, 0x3d, 0xf7, 0xf8, 0x86, 0x07, 0x3a, 0x0b, 0xf9, 0xa5,
	0x49, 0x28, 0x64, 0x5c, 0xec, 0x5a, 0x5a, 0x95, 0x93, 0x6a, 0xbe, 0xca, 0xd8, 0xe3, 0xe6, 0x5b,
	0x1d, 0x9c, 0xa7, 0xaf, 0xf0, 0x51, 0x98, 0x86, 0x1d, 0x51, 0xa2, 0xe4, 0x4c, 0xec, 0x4c, 0x27,
	0x59, 0xd7, 0xa2, 0xeb, 0x95, 0xc0, 0xf8, 0xb4, 0xbf, 0xef, 0xb6, 0xca, 0xbf, 0x76, 0xcf, 0x4c,
	0x98, 0x66, 0x19, 0xb9, 0x25, 0xb7, 0x6a, 0x79, 0x8c, 0xff, 0xe2, 0xf9, 0x2a, 0x50, 0x5f, 0xfe,
	0x05, 0x00, 0x00, 0xff, 0xff, 0xde, 0xf0, 0x6c, 0xc5, 0x2b, 0x02, 0x00, 0x00,
}
