// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netconfig.proto

package zconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NetworkConfig struct {
	Id   string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type NetworkType `protobuf:"varint,5,opt,name=type,enum=NetworkType" json:"type,omitempty"`
	Ip   *Ipspec     `protobuf:"bytes,6,opt,name=ip" json:"ip,omitempty"`
}

func (m *NetworkConfig) Reset()                    { *m = NetworkConfig{} }
func (m *NetworkConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkConfig) ProtoMessage()               {}
func (*NetworkConfig) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *NetworkConfig) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkConfig) GetType() NetworkType {
	if m != nil {
		return m.Type
	}
	return NetworkType_NETWORKTYPENOOP
}

func (m *NetworkConfig) GetIp() *Ipspec {
	if m != nil {
		return m.Ip
	}
	return nil
}

type NetworkAdapter struct {
	// this is deviceName....
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	NetworkId string `protobuf:"bytes,3,opt,name=networkId" json:"networkId,omitempty"`
	// eid=lisp, v4=ipv4 etc...
	Addr     string `protobuf:"bytes,4,opt,name=addr" json:"addr,omitempty"`
	Hostname string `protobuf:"bytes,5,opt,name=hostname" json:"hostname,omitempty"`
	// more configuration for getting addr
	Lispsignature string `protobuf:"bytes,6,opt,name=lispsignature" json:"lispsignature,omitempty"`
	Pemcert       []byte `protobuf:"bytes,7,opt,name=pemcert,proto3" json:"pemcert,omitempty"`
	Pemprivatekey []byte `protobuf:"bytes,8,opt,name=pemprivatekey,proto3" json:"pemprivatekey,omitempty"`
	// used in case of P2V, where we want to specify a macAddress
	// to vif, that is simulated towards app
	MacAddress string `protobuf:"bytes,9,opt,name=macAddress" json:"macAddress,omitempty"`
	// firewall
	Acls []*ACE `protobuf:"bytes,40,rep,name=acls" json:"acls,omitempty"`
}

func (m *NetworkAdapter) Reset()                    { *m = NetworkAdapter{} }
func (m *NetworkAdapter) String() string            { return proto.CompactTextString(m) }
func (*NetworkAdapter) ProtoMessage()               {}
func (*NetworkAdapter) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *NetworkAdapter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkAdapter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NetworkAdapter) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *NetworkAdapter) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NetworkAdapter) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NetworkAdapter) GetLispsignature() string {
	if m != nil {
		return m.Lispsignature
	}
	return ""
}

func (m *NetworkAdapter) GetPemcert() []byte {
	if m != nil {
		return m.Pemcert
	}
	return nil
}

func (m *NetworkAdapter) GetPemprivatekey() []byte {
	if m != nil {
		return m.Pemprivatekey
	}
	return nil
}

func (m *NetworkAdapter) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *NetworkAdapter) GetAcls() []*ACE {
	if m != nil {
		return m.Acls
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkConfig)(nil), "NetworkConfig")
	proto.RegisterType((*NetworkAdapter)(nil), "NetworkAdapter")
}

func init() { proto.RegisterFile("netconfig.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcd, 0x8e, 0xda, 0x30,
	0x14, 0x85, 0x95, 0x10, 0x7e, 0x72, 0xf9, 0xa9, 0xe4, 0x4d, 0x2d, 0xd4, 0x9f, 0x08, 0x75, 0x91,
	0x95, 0x91, 0xe8, 0x0b, 0x94, 0xa2, 0x2e, 0xba, 0xe9, 0x22, 0xea, 0x8a, 0x9d, 0xb1, 0x2f, 0x60,
	0x41, 0x62, 0xcb, 0x76, 0x40, 0xf0, 0x38, 0xf3, 0xa4, 0xa3, 0x38, 0x19, 0x66, 0xd8, 0xdd, 0xfb,
	0x9d, 0xe3, 0x73, 0x2c, 0x5d, 0xf8, 0x54, 0xa1, 0x17, 0xba, 0xda, 0xab, 0x03, 0x33, 0x56, 0x7b,
	0x3d, 0x1f, 0xed, 0xaf, 0xdd, 0x34, 0x69, 0xa4, 0xb2, 0x6a, 0xb7, 0xc5, 0x16, 0xa6, 0xff, 0xd0,
	0x5f, 0xb5, 0x3d, 0x6d, 0x82, 0x9d, 0xcc, 0x20, 0x56, 0x92, 0x46, 0x59, 0x94, 0xa7, 0x45, 0xac,
	0x24, 0xc9, 0x20, 0xf1, 0x37, 0x83, 0xb4, 0x9f, 0x45, 0xf9, 0x6c, 0x35, 0x61, 0x9d, 0xfb, 0xff,
	0xcd, 0x60, 0x11, 0x14, 0xf2, 0x19, 0x62, 0x65, 0xe8, 0x20, 0x8b, 0xf2, 0xf1, 0x6a, 0xc8, 0x94,
	0x71, 0x06, 0x45, 0x11, 0x2b, 0xb3, 0x78, 0x89, 0x61, 0xd6, 0xd9, 0xd7, 0x92, 0x1b, 0x8f, 0x96,
	0x10, 0x48, 0x2a, 0x5e, 0x62, 0x97, 0x1f, 0xe6, 0xae, 0x31, 0x7e, 0x34, 0x7e, 0x81, 0xb4, 0x6a,
	0x5f, 0xfd, 0x95, 0xb4, 0x17, 0xf0, 0x3b, 0x68, 0x12, 0xb8, 0x94, 0x96, 0x26, 0x6d, 0x42, 0x33,
	0x93, 0x39, 0x8c, 0x8e, 0xda, 0xf9, 0x90, 0xdc, 0x0f, 0xfc, 0xb1, 0x93, 0x1f, 0x30, 0x3d, 0x2b,
	0x67, 0x9c, 0x3a, 0x54, 0xdc, 0xd7, 0x16, 0xc3, 0x47, 0xd3, 0xe2, 0x19, 0x12, 0x0a, 0x43, 0x83,
	0xa5, 0x40, 0xeb, 0xe9, 0x30, 0x8b, 0xf2, 0x49, 0xf1, 0xb6, 0x36, 0xef, 0x0d, 0x96, 0xc6, 0xaa,
	0x0b, 0xf7, 0x78, 0xc2, 0x1b, 0x1d, 0x05, 0xfd, 0x19, 0x92, 0x6f, 0x00, 0x25, 0x17, 0x6b, 0x29,
	0x2d, 0x3a, 0x47, 0xd3, 0x50, 0xf1, 0x81, 0x10, 0x0a, 0x09, 0x17, 0x67, 0x47, 0xf3, 0xac, 0x97,
	0x8f, 0x57, 0x09, 0x5b, 0x6f, 0xfe, 0x14, 0x81, 0xfc, 0xfe, 0x05, 0xdf, 0x85, 0x2e, 0xd9, 0x1d,
	0x25, 0x4a, 0xce, 0xc4, 0x59, 0xd7, 0x92, 0xd5, 0x0e, 0xed, 0x45, 0x09, 0x6c, 0x6f, 0xb4, 0xfd,
	0x7a, 0x50, 0xfe, 0x58, 0xef, 0x98, 0xd0, 0xe5, 0xb2, 0xf5, 0x2d, 0xb9, 0x51, 0xcb, 0x7b, 0x7b,
	0xe0, 0xdd, 0x20, 0xb8, 0x7e, 0xbe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x41, 0x85, 0xd6, 0xf4,
	0x01, 0x00, 0x00,
}
