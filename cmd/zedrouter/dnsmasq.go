// Copyright (c) 2017 Zededa, Inc.
// All rights reserved.

// dnsmasq configlets for overlay and underlay interfaces towards domU

package zedrouter

import (
	"fmt"
	"github.com/zededa/go-provision/agentlog"
	"github.com/zededa/go-provision/types"
	"log"
	"net"
	"os"
	"os/exec"
)

const dnsmasqOverlayStatic = `
# Automatically generated by zedrouter
except-interface=lo
bind-interfaces
log-queries
log-dhcp
no-hosts
no-ping
bogus-priv
stop-dns-rebind
rebind-localhost-ok
neg-ttl=10
dhcp-range=::,static,0,infinite
`

const dnsmasqUnderlayStatic = `
# Automatically generated by zedrouter
except-interface=lo
bind-interfaces
log-queries
log-dhcp
no-hosts
no-ping
bogus-priv
stop-dns-rebind
rebind-localhost-ok
neg-ttl=10
`

// Create the dnsmasq configuration for the the overlay interface
// Would be more polite to return an error then to Fatal
func createDnsmasqOverlayConfiglet(cfgPathname string, olIfname string,
	olAddr1 string, olAddr2 string, olMac string, hostsDir string,
	hostName string, ipsets []string, netconf *types.NetworkObjectConfig) {
	if debug {
		log.Printf("createDnsmasqOverlayConfiglen: %s\n", olIfname)
	}
	file, err := os.Create(cfgPathname)
	if err != nil {
		log.Fatal("os.Create for ", cfgPathname, err)
	}
	defer file.Close()
	file.WriteString(dnsmasqOverlayStatic)
	for _, ipset := range ipsets {
		file.WriteString(fmt.Sprintf("ipset=/%s/ipv4.%s,ipv6.%s\n",
			ipset, ipset, ipset))
	}
	file.WriteString(fmt.Sprintf("pid-file=/var/run/dnsmasq.%s.pid\n",
		olIfname))
	file.WriteString(fmt.Sprintf("interface=%s\n", olIfname))
	file.WriteString(fmt.Sprintf("listen-address=%s\n", olAddr1))
	file.WriteString(fmt.Sprintf("dhcp-host=%s,[%s],%s\n",
		olMac, olAddr2, hostName))
	file.WriteString(fmt.Sprintf("hostsdir=%s\n", hostsDir))

	if netconf != nil {
		if netconf.DomainName != "" {
			file.WriteString(fmt.Sprintf("dhcp-option=domain-search,%s\n",
				netconf.DomainName))
		}
		for _, ns := range netconf.DnsServers {
			file.WriteString(fmt.Sprintf("dhcp-option=dns-server,%s\n",
				ns.String()))
		}
		if netconf.NtpServer != nil {
			file.WriteString(fmt.Sprintf("dhcp-option=ntp-server,%s\n",
				netconf.NtpServer.String()))
		}
	}
}

// Create the dnsmasq configuration for the the underlay interface
// Would be more polite to return an error then to Fatal
// XXX not clear what needs to change here to handle IPv6 underlay. The default
// ranges are off, plus domain-name needs to be replaced by domain-search, etc
func createDnsmasqUnderlayConfiglet(cfgPathname string, ulIfname string,
	ulAddr1 string, ulAddr2 string, ulMac string, hostName string,
	ipsets []string, netconf *types.NetworkObjectConfig) {
	if debug {
		log.Printf("createDnsmasqUnderlayConfiglen: %s\n", ulIfname)
	}
	file, err := os.Create(cfgPathname)
	if err != nil {
		log.Fatal("os.Create for ", cfgPathname, err)
	}
	defer file.Close()
	file.WriteString(dnsmasqUnderlayStatic)
	for _, ipset := range ipsets {
		file.WriteString(fmt.Sprintf("ipset=/%s/ipv4.%s,ipv6.%s\n",
			ipset, ipset, ipset))
	}
	file.WriteString(fmt.Sprintf("pid-file=/var/run/dnsmasq.%s.pid\n",
		ulIfname))
	file.WriteString(fmt.Sprintf("interface=%s\n", ulIfname))
	file.WriteString(fmt.Sprintf("listen-address=%s\n", ulAddr1))
	file.WriteString(fmt.Sprintf("dhcp-host=%s,id:*,%s,%s\n",
		ulMac, ulAddr2, hostName))

	netmask := "255.255.0.0"  // Default unless there is a Subnet
	dhcpRange := "172.27.0.0" // Default unless there is a DhcpRange

	if netconf != nil {
		if netconf.DomainName != "" {
			file.WriteString(fmt.Sprintf("dhcp-option=domain-name,%s\n",
				netconf.DomainName))
		}
		for _, ns := range netconf.DnsServers {
			file.WriteString(fmt.Sprintf("dhcp-option=dns-server,%s\n",
				ns.String()))
		}
		if netconf.NtpServer != nil {
			file.WriteString(fmt.Sprintf("dhcp-option=ntp-server,%s\n",
				netconf.NtpServer.String()))
		}
		if netconf.Subnet.IP != nil {
			netmask = net.IP(netconf.Subnet.Mask).String()
			file.WriteString(fmt.Sprintf("dhcp-option=netmask,%s\n",
				netmask))
		}
		if netconf.Gateway != nil {
			// XXX vs. ulAddr1
			file.WriteString(fmt.Sprintf("dhcp-option=option:router,%s\n",
				netconf.Gateway.String()))
		}
		if netconf.DhcpRange.Start != nil {
			if netconf.DhcpRange.End != nil {
				dhcpRange = fmt.Sprintf("%s,%s",
					netconf.DhcpRange.Start.String(),
					netconf.DhcpRange.End.String())
			} else {
				dhcpRange = netconf.DhcpRange.Start.String()
			}
		}
	}
	file.WriteString(fmt.Sprintf("dhcp-range=%s,static,%s,infinite\n",
		dhcpRange, netmask))
}

func deleteDnsmasqConfiglet(cfgPathname string) {
	if debug {
		log.Printf("deleteDnsmasqOverlayConfiglen: %s\n", cfgPathname)
	}
	if err := os.Remove(cfgPathname); err != nil {
		log.Println(err)
	}
}

// Run this:
//    DMDIR=/opt/zededa/bin/
//    ${DMDIR}/dnsmasq --conf-file=/var/run/zedrouter/dnsmasq.${OLIFNAME}.conf
// or
//    ${DMDIR}/dnsmasq --conf-file=/var/run/zedrouter/dnsmasq.${ULIFNAME}.conf
func startDnsmasq(cfgPathname string, ifname string) {
	if debug {
		log.Printf("startDnsmasq: %s\n", cfgPathname)
	}
	name := "nohup"
	args := []string{
		"/opt/zededa/bin/dnsmasq",
		"-d",
		"-C",
		cfgPathname,
	}
	logFilename := fmt.Sprintf("dnsmasq.%s", ifname)
	logf, err := agentlog.InitChild(logFilename)
	if err != nil {
		log.Fatalf("startDnsmasq agentlog failed: %s\n", err)
	}
	cmd := exec.Command(name, args...)
	cmd.Stderr = logf
	if debug {
		log.Printf("Calling command %s %v\n", name, args)
	}
	go cmd.Run()
}

//    pkill -u nobody -f dnsmasq.${IFNAME}.conf
func stopDnsmasq(cfgFilename string, printOnError bool) {
	if debug {
		log.Printf("stopDnsmasq: %s\n", cfgFilename)
	}
	pkillUserArgs("nobody", cfgFilename, printOnError)
}
